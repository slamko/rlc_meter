
tlc_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ff8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005188  08005188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005260  08005260  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005260  08005260  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005260  08005260  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005260  08005260  00015260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005264  08005264  00015264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005268  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000088  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f8  200000f8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009baf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bdf  00000000  00000000  00029c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a0  00000000  00000000  0002b830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005e0  00000000  00000000  0002bed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e610  00000000  00000000  0002c4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009110  00000000  00000000  0004aac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4841  00000000  00000000  00053bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f8411  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000233c  00000000  00000000  000f8464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005170 	.word	0x08005170

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005170 	.word	0x08005170

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8c:	f000 fbdc 	bl	8001348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b90:	f000 f807 	bl	8000ba2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b94:	f000 f8bc 	bl	8000d10 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000b98:	f000 f85c 	bl	8000c54 <MX_ADC2_Init>
  while (1)
  {
	  /*HAL_ADC_Start(&hadc2);
	  if (HAL_ADC_PollForConversion(&hadc2, 1000) != HAL_OK) continue;
	  uint32_t init_val = HAL_ADC_GetValue(&hadc2);*/
	  loop();
 8000b9c:	f000 f9ba 	bl	8000f14 <loop>
  {
 8000ba0:	e7fc      	b.n	8000b9c <main+0x14>

08000ba2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b096      	sub	sp, #88	; 0x58
 8000ba6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bac:	2228      	movs	r2, #40	; 0x28
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f003 fb47 	bl	8004244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bde:	2310      	movs	r3, #16
 8000be0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be2:	2302      	movs	r3, #2
 8000be4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000be6:	2300      	movs	r3, #0
 8000be8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000bea:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000bee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 fdab 	bl	8002750 <HAL_RCC_OscConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c00:	f000 f8dc 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c04:	230f      	movs	r3, #15
 8000c06:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	2102      	movs	r1, #2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 fdd3 	bl	80037cc <HAL_RCC_ClockConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c2c:	f000 f8c6 	bl	8000dbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c38:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f002 ffab 	bl	8003b98 <HAL_RCCEx_PeriphCLKConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c48:	f000 f8b8 	bl	8000dbc <Error_Handler>
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3758      	adds	r7, #88	; 0x58
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
 8000c68:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c6a:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000c6c:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <MX_ADC2_Init+0xb8>)
 8000c6e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c70:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c76:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c7c:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000cb2:	2204      	movs	r2, #4
 8000cb4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cc2:	4811      	ldr	r0, [pc, #68]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000cc4:	f000 fbca 	bl	800145c <HAL_ADC_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000cce:	f000 f875 	bl	8000dbc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <MX_ADC2_Init+0xb4>)
 8000cf0:	f000 fed8 	bl	8001aa4 <HAL_ADC_ConfigChannel>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000cfa:	f000 f85f 	bl	8000dbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000008c 	.word	0x2000008c
 8000d0c:	50000100 	.word	0x50000100

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <MX_GPIO_Init+0xa4>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <MX_GPIO_Init+0xa4>)
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	6153      	str	r3, [r2, #20]
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <MX_GPIO_Init+0xa4>)
 8000d34:	695b      	ldr	r3, [r3, #20]
 8000d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_GPIO_Init+0xa4>)
 8000d40:	695b      	ldr	r3, [r3, #20]
 8000d42:	4a1c      	ldr	r2, [pc, #112]	; (8000db4 <MX_GPIO_Init+0xa4>)
 8000d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d48:	6153      	str	r3, [r2, #20]
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_GPIO_Init+0xa4>)
 8000d4c:	695b      	ldr	r3, [r3, #20]
 8000d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2120      	movs	r1, #32
 8000d5a:	4817      	ldr	r0, [pc, #92]	; (8000db8 <MX_GPIO_Init+0xa8>)
 8000d5c:	f001 fcc8 	bl	80026f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	4619      	mov	r1, r3
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f001 fb2f 	bl	80023dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	4619      	mov	r1, r3
 8000d94:	4808      	ldr	r0, [pc, #32]	; (8000db8 <MX_GPIO_Init+0xa8>)
 8000d96:	f001 fb21 	bl	80023dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2028      	movs	r0, #40	; 0x28
 8000da0:	f001 fae5 	bl	800236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000da4:	2028      	movs	r0, #40	; 0x28
 8000da6:	f001 fafe 	bl	80023a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000daa:	bf00      	nop
 8000dac:	3720      	adds	r7, #32
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000
 8000db8:	48000400 	.word	0x48000400

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>

08000dc6 <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
	{ return __r; }
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <_Z9capa_calcNSt6chrono8durationIxSt5ratioILx1ELx1000EEEEmmm>:

using namespace std::chrono;

bool adc_ready = false;

double capa_calc(std::chrono::milliseconds charge_time, uint32_t res, uint32_t vc0, uint32_t vc) {
 8000de2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
 8000df0:	603b      	str	r3, [r7, #0]
	double ln = log((double)(4096 - vc0) / (double)(4096 - vc - vc0));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fb7b 	bl	80004f4 <__aeabi_ui2d>
 8000dfe:	4682      	mov	sl, r0
 8000e00:	468b      	mov	fp, r1
 8000e02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fb71 	bl	80004f4 <__aeabi_ui2d>
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	4650      	mov	r0, sl
 8000e18:	4659      	mov	r1, fp
 8000e1a:	f7ff fd0f 	bl	800083c <__aeabi_ddiv>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	ec43 2b17 	vmov	d7, r2, r3
 8000e26:	eeb0 0a47 	vmov.f32	s0, s14
 8000e2a:	eef0 0a67 	vmov.f32	s1, s15
 8000e2e:	f002 ffdb 	bl	8003de8 <log>
 8000e32:	ed87 0b04 	vstr	d0, [r7, #16]
	return ((charge_time.count() * 1000 )/ (ln * res));
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ffc3 	bl	8000dc6 <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	f04f 0a00 	mov.w	sl, #0
 8000e48:	f04f 0b00 	mov.w	fp, #0
 8000e4c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8000e50:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8000e54:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8000e58:	4652      	mov	r2, sl
 8000e5a:	465b      	mov	r3, fp
 8000e5c:	1a14      	subs	r4, r2, r0
 8000e5e:	eb63 0501 	sbc.w	r5, r3, r1
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	f04f 0300 	mov.w	r3, #0
 8000e6a:	00ab      	lsls	r3, r5, #2
 8000e6c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8000e70:	00a2      	lsls	r2, r4, #2
 8000e72:	4614      	mov	r4, r2
 8000e74:	461d      	mov	r5, r3
 8000e76:	eb14 0800 	adds.w	r8, r4, r0
 8000e7a:	eb45 0901 	adc.w	r9, r5, r1
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e92:	4690      	mov	r8, r2
 8000e94:	4699      	mov	r9, r3
 8000e96:	4642      	mov	r2, r8
 8000e98:	464b      	mov	r3, r9
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff fb75 	bl	800058c <__aeabi_l2d>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	460d      	mov	r5, r1
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fb24 	bl	80004f4 <__aeabi_ui2d>
 8000eac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000eb0:	f7ff fb9a 	bl	80005e8 <__aeabi_dmul>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4620      	mov	r0, r4
 8000eba:	4629      	mov	r1, r5
 8000ebc:	f7ff fcbe 	bl	800083c <__aeabi_ddiv>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	ec43 2b17 	vmov	d7, r2, r3
}
 8000ec8:	eeb0 0a47 	vmov.f32	s0, s14
 8000ecc:	eef0 0a67 	vmov.f32	s1, s15
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000ed8 <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
	if (pin == GPIO_PIN_10) {
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee8:	d10b      	bne.n	8000f02 <HAL_GPIO_EXTI_Callback+0x2a>
		GPIO_PinState pin_val = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000eea:	2120      	movs	r1, #32
 8000eec:	4807      	ldr	r0, [pc, #28]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x34>)
 8000eee:	f001 fbe7 	bl	80026c0 <HAL_GPIO_ReadPin>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	73fb      	strb	r3, [r7, #15]
		if (pin_val == GPIO_PIN_RESET) {
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d102      	bne.n	8000f02 <HAL_GPIO_EXTI_Callback+0x2a>
			adc_ready = true;
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <HAL_GPIO_EXTI_Callback+0x38>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	200000dc 	.word	0x200000dc

08000f14 <loop>:

extern "C" void loop(void) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af02      	add	r7, sp, #8
	  if (adc_ready) {
 8000f1a:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <loop+0xd0>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d05c      	beq.n	8000fdc <loop+0xc8>
		  uint32_t init_val, val;

		  adc_ready = false;
 8000f22:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <loop+0xd0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start(&hadc2);
 8000f28:	482f      	ldr	r0, [pc, #188]	; (8000fe8 <loop+0xd4>)
 8000f2a:	f000 fc29 	bl	8001780 <HAL_ADC_Start>
		  if (HAL_ADC_PollForConversion(&hadc2, 1000) != HAL_OK) return;
 8000f2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f32:	482d      	ldr	r0, [pc, #180]	; (8000fe8 <loop+0xd4>)
 8000f34:	f000 fcda 	bl	80018ec <HAL_ADC_PollForConversion>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	bf14      	ite	ne
 8000f3e:	2301      	movne	r3, #1
 8000f40:	2300      	moveq	r3, #0
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d146      	bne.n	8000fd6 <loop+0xc2>
		  init_val = HAL_ADC_GetValue(&hadc2);
 8000f48:	4827      	ldr	r0, [pc, #156]	; (8000fe8 <loop+0xd4>)
 8000f4a:	f000 fd9d 	bl	8001a88 <HAL_ADC_GetValue>
 8000f4e:	6178      	str	r0, [r7, #20]

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2120      	movs	r1, #32
 8000f54:	4825      	ldr	r0, [pc, #148]	; (8000fec <loop+0xd8>)
 8000f56:	f001 fbcb 	bl	80026f0 <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 8000f5a:	200a      	movs	r0, #10
 8000f5c:	f000 fa5a 	bl	8001414 <HAL_Delay>
		  HAL_ADC_Start(&hadc2);
 8000f60:	4821      	ldr	r0, [pc, #132]	; (8000fe8 <loop+0xd4>)
 8000f62:	f000 fc0d 	bl	8001780 <HAL_ADC_Start>
		  if (HAL_ADC_PollForConversion(&hadc2, 1000) != HAL_OK) return;
 8000f66:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f6a:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <loop+0xd4>)
 8000f6c:	f000 fcbe 	bl	80018ec <HAL_ADC_PollForConversion>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	bf14      	ite	ne
 8000f76:	2301      	movne	r3, #1
 8000f78:	2300      	moveq	r3, #0
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d12c      	bne.n	8000fda <loop+0xc6>

		  val = HAL_ADC_GetValue(&hadc2);
 8000f80:	4819      	ldr	r0, [pc, #100]	; (8000fe8 <loop+0xd4>)
 8000f82:	f000 fd81 	bl	8001a88 <HAL_ADC_GetValue>
 8000f86:	6138      	str	r0, [r7, #16]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	4817      	ldr	r0, [pc, #92]	; (8000fec <loop+0xd8>)
 8000f8e:	f001 fbaf 	bl	80026f0 <HAL_GPIO_WritePin>
		  double cap = capa_calc(10ms, 10000, init_val, val);
 8000f92:	463b      	mov	r3, r7
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f82f 	bl	8000ff8 <_ZNSt8literals15chrono_literalsli2msIJLc49ELc48EEEENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEv>
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fa8:	f7ff ff1b 	bl	8000de2 <_Z9capa_calcNSt6chrono8durationIxSt5ratioILx1ELx1000EEEEmmm>
 8000fac:	ed87 0b02 	vstr	d0, [r7, #8]
		  printf("Capacitance: %d", (unsigned int)(cap * 1000));
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <loop+0xdc>)
 8000fb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fba:	f7ff fb15 	bl	80005e8 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f7ff fdbf 	bl	8000b48 <__aeabi_d2uiz>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <loop+0xe0>)
 8000fd0:	f003 f940 	bl	8004254 <iprintf>
 8000fd4:	e002      	b.n	8000fdc <loop+0xc8>
		  if (HAL_ADC_PollForConversion(&hadc2, 1000) != HAL_OK) return;
 8000fd6:	bf00      	nop
 8000fd8:	e000      	b.n	8000fdc <loop+0xc8>
		  if (HAL_ADC_PollForConversion(&hadc2, 1000) != HAL_OK) return;
 8000fda:	bf00      	nop
	  }
}
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000dc 	.word	0x200000dc
 8000fe8:	2000008c 	.word	0x2000008c
 8000fec:	48000400 	.word	0x48000400
 8000ff0:	408f4000 	.word	0x408f4000
 8000ff4:	08005188 	.word	0x08005188

08000ff8 <_ZNSt8literals15chrono_literalsli2msIJLc49ELc48EEEENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEv>:
    { return chrono::duration<long double, milli>{__msecs}; }

    /// Literal suffix for durations of type `std::chrono::milliseconds`
    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f805 	bl	8001012 <_ZNSt8literals15chrono_literals16__check_overflowINSt6chrono8durationIxSt5ratioILx1ELx1000EEEEJLc49ELc48EEEET_v>
 8001008:	bf00      	nop
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_ZNSt8literals15chrono_literals16__check_overflowINSt6chrono8durationIxSt5ratioILx1ELx1000EEEEJLc49ELc48EEEET_v>:
      constexpr _Dur __check_overflow()
 8001012:	b580      	push	{r7, lr}
 8001014:	b084      	sub	sp, #16
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
 800101a:	f04f 020a 	mov.w	r2, #10
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	4619      	mov	r1, r3
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f804 	bl	800103a <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000EEEC1IxvEERKT_>
      }
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000EEEC1IxvEERKT_>:
	  constexpr explicit duration(const _Rep2& __rep)
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	e9c1 2300 	strd	r2, r3, [r1]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4618      	mov	r0, r3
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <HAL_MspInit+0x44>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <HAL_MspInit+0x44>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6193      	str	r3, [r2, #24]
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <HAL_MspInit+0x44>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <HAL_MspInit+0x44>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <HAL_MspInit+0x44>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001088:	61d3      	str	r3, [r2, #28]
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_MspInit+0x44>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000

080010a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a15      	ldr	r2, [pc, #84]	; (800111c <HAL_ADC_MspInit+0x74>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d124      	bne.n	8001114 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <HAL_ADC_MspInit+0x78>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	4a14      	ldr	r2, [pc, #80]	; (8001120 <HAL_ADC_MspInit+0x78>)
 80010d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d4:	6153      	str	r3, [r2, #20]
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_ADC_MspInit+0x78>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_ADC_MspInit+0x78>)
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	4a0e      	ldr	r2, [pc, #56]	; (8001120 <HAL_ADC_MspInit+0x78>)
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	6153      	str	r3, [r2, #20]
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <HAL_ADC_MspInit+0x78>)
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010fa:	2310      	movs	r3, #16
 80010fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fe:	2303      	movs	r3, #3
 8001100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001110:	f001 f964 	bl	80023dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	50000100 	.word	0x50000100
 8001120:	40021000 	.word	0x40021000

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <NMI_Handler+0x4>

0800112a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <MemManage_Handler+0x4>

08001136 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <UsageFault_Handler+0x4>

08001142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001170:	f000 f930 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800117c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001180:	f001 face 	bl	8002720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	e00a      	b.n	80011b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800119a:	f3af 8000 	nop.w
 800119e:	4601      	mov	r1, r0
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	60ba      	str	r2, [r7, #8]
 80011a6:	b2ca      	uxtb	r2, r1
 80011a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	3301      	adds	r3, #1
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	dbf0      	blt.n	800119a <_read+0x12>
  }

  return len;
 80011b8:	687b      	ldr	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b086      	sub	sp, #24
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	60f8      	str	r0, [r7, #12]
 80011ca:	60b9      	str	r1, [r7, #8]
 80011cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	e009      	b.n	80011e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1c5a      	adds	r2, r3, #1
 80011d8:	60ba      	str	r2, [r7, #8]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3301      	adds	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbf1      	blt.n	80011d4 <_write+0x12>
  }
  return len;
 80011f0:	687b      	ldr	r3, [r7, #4]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_close>:

int _close(int file)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001222:	605a      	str	r2, [r3, #4]
  return 0;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <_isatty>:

int _isatty(int file)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <_sbrk+0x5c>)
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <_sbrk+0x60>)
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <_sbrk+0x64>)
 8001282:	4a12      	ldr	r2, [pc, #72]	; (80012cc <_sbrk+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d207      	bcs.n	80012a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001294:	f002 ffac 	bl	80041f0 <__errno>
 8001298:	4603      	mov	r3, r0
 800129a:	220c      	movs	r2, #12
 800129c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012a2:	e009      	b.n	80012b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <_sbrk+0x64>)
 80012b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20003000 	.word	0x20003000
 80012c4:	00000400 	.word	0x00000400
 80012c8:	200000e0 	.word	0x200000e0
 80012cc:	200000f8 	.word	0x200000f8

080012d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <SystemInit+0x20>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012da:	4a05      	ldr	r2, [pc, #20]	; (80012f0 <SystemInit+0x20>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800132c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f8:	f7ff ffea 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012fc:	480c      	ldr	r0, [pc, #48]	; (8001330 <LoopForever+0x6>)
  ldr r1, =_edata
 80012fe:	490d      	ldr	r1, [pc, #52]	; (8001334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <LoopForever+0xe>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001304:	e002      	b.n	800130c <LoopCopyDataInit>

08001306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130a:	3304      	adds	r3, #4

0800130c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800130c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001310:	d3f9      	bcc.n	8001306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001314:	4c0a      	ldr	r4, [pc, #40]	; (8001340 <LoopForever+0x16>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001318:	e001      	b.n	800131e <LoopFillZerobss>

0800131a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800131c:	3204      	adds	r2, #4

0800131e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001320:	d3fb      	bcc.n	800131a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001322:	f002 ff6b 	bl	80041fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001326:	f7ff fc2f 	bl	8000b88 <main>

0800132a <LoopForever>:

LoopForever:
    b LoopForever
 800132a:	e7fe      	b.n	800132a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800132c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001334:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001338:	08005268 	.word	0x08005268
  ldr r2, =_sbss
 800133c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001340:	200000f8 	.word	0x200000f8

08001344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001344:	e7fe      	b.n	8001344 <ADC1_2_IRQHandler>
	...

08001348 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_Init+0x28>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <HAL_Init+0x28>)
 8001352:	f043 0310 	orr.w	r3, r3, #16
 8001356:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001358:	2003      	movs	r0, #3
 800135a:	f000 fffd 	bl	8002358 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135e:	200f      	movs	r0, #15
 8001360:	f000 f808 	bl	8001374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001364:	f7ff fe7c 	bl	8001060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40022000 	.word	0x40022000

08001374 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_InitTick+0x54>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x58>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f001 f815 	bl	80023c2 <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00e      	b.n	80013c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d80a      	bhi.n	80013be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b0:	f000 ffdd 	bl	800236e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_InitTick+0x5c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000004 	.word	0x20000004

080013d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000008 	.word	0x20000008
 80013f8:	200000e4 	.word	0x200000e4

080013fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	200000e4 	.word	0x200000e4

08001414 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000008 	.word	0x20000008

0800145c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b09a      	sub	sp, #104	; 0x68
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d101      	bne.n	800147c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e172      	b.n	8001762 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	2b00      	cmp	r3, #0
 800148c:	d176      	bne.n	800157c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	2b00      	cmp	r3, #0
 8001494:	d152      	bne.n	800153c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff fdf9 	bl	80010a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d13b      	bne.n	800153c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 fe11 	bl	80020ec <ADC_Disable>
 80014ca:	4603      	mov	r3, r0
 80014cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f003 0310 	and.w	r3, r3, #16
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d12f      	bne.n	800153c <HAL_ADC_Init+0xe0>
 80014dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d12b      	bne.n	800153c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014ec:	f023 0302 	bic.w	r3, r3, #2
 80014f0:	f043 0202 	orr.w	r2, r3, #2
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001506:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001516:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001518:	4b94      	ldr	r3, [pc, #592]	; (800176c <HAL_ADC_Init+0x310>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a94      	ldr	r2, [pc, #592]	; (8001770 <HAL_ADC_Init+0x314>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0c9a      	lsrs	r2, r3, #18
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800152e:	e002      	b.n	8001536 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	3b01      	subs	r3, #1
 8001534:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f9      	bne.n	8001530 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d007      	beq.n	800155a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001558:	d110      	bne.n	800157c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f023 0312 	bic.w	r3, r3, #18
 8001562:	f043 0210 	orr.w	r2, r3, #16
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f043 0201 	orr.w	r2, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	2b00      	cmp	r3, #0
 8001586:	f040 80df 	bne.w	8001748 <HAL_ADC_Init+0x2ec>
 800158a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800158e:	2b00      	cmp	r3, #0
 8001590:	f040 80da 	bne.w	8001748 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f040 80d2 	bne.w	8001748 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015ac:	f043 0202 	orr.w	r2, r3, #2
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b4:	4b6f      	ldr	r3, [pc, #444]	; (8001774 <HAL_ADC_Init+0x318>)
 80015b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c0:	d102      	bne.n	80015c8 <HAL_ADC_Init+0x16c>
 80015c2:	4b6d      	ldr	r3, [pc, #436]	; (8001778 <HAL_ADC_Init+0x31c>)
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	e002      	b.n	80015ce <HAL_ADC_Init+0x172>
 80015c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80015cc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d108      	bne.n	80015ee <HAL_ADC_Init+0x192>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_ADC_Init+0x192>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_ADC_Init+0x194>
 80015ee:	2300      	movs	r3, #0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d11c      	bne.n	800162e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015f4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d010      	beq.n	800161c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d107      	bne.n	8001616 <HAL_ADC_Init+0x1ba>
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b01      	cmp	r3, #1
 8001610:	d101      	bne.n	8001616 <HAL_ADC_Init+0x1ba>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <HAL_ADC_Init+0x1bc>
 8001616:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001618:	2b00      	cmp	r3, #0
 800161a:	d108      	bne.n	800162e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800161c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	431a      	orrs	r2, r3
 800162a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800162c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7e5b      	ldrb	r3, [r3, #25]
 8001632:	035b      	lsls	r3, r3, #13
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001638:	2a01      	cmp	r2, #1
 800163a:	d002      	beq.n	8001642 <HAL_ADC_Init+0x1e6>
 800163c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001640:	e000      	b.n	8001644 <HAL_ADC_Init+0x1e8>
 8001642:	2200      	movs	r2, #0
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4313      	orrs	r3, r2
 8001652:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001654:	4313      	orrs	r3, r2
 8001656:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d11b      	bne.n	800169a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7e5b      	ldrb	r3, [r3, #25]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	3b01      	subs	r3, #1
 8001670:	045a      	lsls	r2, r3, #17
 8001672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001674:	4313      	orrs	r3, r2
 8001676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167a:	663b      	str	r3, [r7, #96]	; 0x60
 800167c:	e00d      	b.n	800169a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001686:	f043 0220 	orr.w	r2, r3, #32
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f043 0201 	orr.w	r2, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d007      	beq.n	80016b2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	4313      	orrs	r3, r2
 80016ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016ae:	4313      	orrs	r3, r2
 80016b0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d114      	bne.n	80016ea <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016ce:	f023 0302 	bic.w	r3, r3, #2
 80016d2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	7e1b      	ldrb	r3, [r3, #24]
 80016d8:	039a      	lsls	r2, r3, #14
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4313      	orrs	r3, r2
 80016e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016e6:	4313      	orrs	r3, r2
 80016e8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	4b22      	ldr	r3, [pc, #136]	; (800177c <HAL_ADC_Init+0x320>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80016fa:	430b      	orrs	r3, r1
 80016fc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d10c      	bne.n	8001720 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170c:	f023 010f 	bic.w	r1, r3, #15
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	1e5a      	subs	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	631a      	str	r2, [r3, #48]	; 0x30
 800171e:	e007      	b.n	8001730 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 020f 	bic.w	r2, r2, #15
 800172e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f023 0303 	bic.w	r3, r3, #3
 800173e:	f043 0201 	orr.w	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
 8001746:	e00a      	b.n	800175e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f023 0312 	bic.w	r3, r3, #18
 8001750:	f043 0210 	orr.w	r2, r3, #16
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001758:	2301      	movs	r3, #1
 800175a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800175e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001762:	4618      	mov	r0, r3
 8001764:	3768      	adds	r7, #104	; 0x68
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000000 	.word	0x20000000
 8001770:	431bde83 	.word	0x431bde83
 8001774:	50000300 	.word	0x50000300
 8001778:	50000100 	.word	0x50000100
 800177c:	fff0c007 	.word	0xfff0c007

08001780 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b00      	cmp	r3, #0
 8001798:	f040 809c 	bne.w	80018d4 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <HAL_ADC_Start+0x2a>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e097      	b.n	80018da <HAL_ADC_Start+0x15a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fc36 	bl	8002024 <ADC_Enable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f040 8083 	bne.w	80018ca <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017d8:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <HAL_ADC_Start+0x164>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <HAL_ADC_Start+0x6e>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017ec:	d115      	bne.n	800181a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d027      	beq.n	8001858 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001810:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001818:	e01e      	b.n	8001858 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800182e:	d004      	beq.n	800183a <HAL_ADC_Start+0xba>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a2c      	ldr	r2, [pc, #176]	; (80018e8 <HAL_ADC_Start+0x168>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d10e      	bne.n	8001858 <HAL_ADC_Start+0xd8>
 800183a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d007      	beq.n	8001858 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001850:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001864:	d106      	bne.n	8001874 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f023 0206 	bic.w	r2, r3, #6
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	645a      	str	r2, [r3, #68]	; 0x44
 8001872:	e002      	b.n	800187a <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	221c      	movs	r2, #28
 8001888:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800188a:	4b16      	ldr	r3, [pc, #88]	; (80018e4 <HAL_ADC_Start+0x164>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 031f 	and.w	r3, r3, #31
 8001892:	2b00      	cmp	r3, #0
 8001894:	d010      	beq.n	80018b8 <HAL_ADC_Start+0x138>
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_ADC_Start+0x164>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d00a      	beq.n	80018b8 <HAL_ADC_Start+0x138>
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_ADC_Start+0x164>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	2b09      	cmp	r3, #9
 80018ac:	d004      	beq.n	80018b8 <HAL_ADC_Start+0x138>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018b6:	d10f      	bne.n	80018d8 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0204 	orr.w	r2, r2, #4
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	e006      	b.n	80018d8 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80018d2:	e001      	b.n	80018d8 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018d4:	2302      	movs	r3, #2
 80018d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	50000300 	.word	0x50000300
 80018e8:	50000100 	.word	0x50000100

080018ec <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d102      	bne.n	8001908 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001902:	2308      	movs	r3, #8
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e02e      	b.n	8001966 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001908:	4b5e      	ldr	r3, [pc, #376]	; (8001a84 <HAL_ADC_PollForConversion+0x198>)
 800190a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 031f 	and.w	r3, r3, #31
 8001914:	2b00      	cmp	r3, #0
 8001916:	d112      	bne.n	800193e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b01      	cmp	r3, #1
 8001924:	d11d      	bne.n	8001962 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f043 0220 	orr.w	r2, r3, #32
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e09d      	b.n	8001a7a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f043 0220 	orr.w	r2, r3, #32
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e08b      	b.n	8001a7a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001962:	230c      	movs	r3, #12
 8001964:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001966:	4b47      	ldr	r3, [pc, #284]	; (8001a84 <HAL_ADC_PollForConversion+0x198>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2b00      	cmp	r3, #0
 8001970:	d004      	beq.n	800197c <HAL_ADC_PollForConversion+0x90>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800197a:	d104      	bne.n	8001986 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	e003      	b.n	800198e <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001986:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800198e:	f7ff fd35 	bl	80013fc <HAL_GetTick>
 8001992:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001994:	e021      	b.n	80019da <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800199c:	d01d      	beq.n	80019da <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d007      	beq.n	80019b4 <HAL_ADC_PollForConversion+0xc8>
 80019a4:	f7ff fd2a 	bl	80013fc <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d212      	bcs.n	80019da <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	4013      	ands	r3, r2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10b      	bne.n	80019da <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f043 0204 	orr.w	r2, r3, #4
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e04f      	b.n	8001a7a <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0d6      	beq.n	8001996 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d131      	bne.n	8001a66 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d12c      	bne.n	8001a66 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d125      	bne.n	8001a66 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d112      	bne.n	8001a4e <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d112      	bne.n	8001a66 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f043 0201 	orr.w	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a4c:	e00b      	b.n	8001a66 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f043 0220 	orr.w	r2, r3, #32
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f043 0201 	orr.w	r2, r3, #1
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d103      	bne.n	8001a78 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	50000300 	.word	0x50000300

08001a88 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b09b      	sub	sp, #108	; 0x6c
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x22>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e2a4      	b.n	8002010 <HAL_ADC_ConfigChannel+0x56c>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f040 8288 	bne.w	8001fee <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d81c      	bhi.n	8001b20 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	461a      	mov	r2, r3
 8001afa:	231f      	movs	r3, #31
 8001afc:	4093      	lsls	r3, r2
 8001afe:	43db      	mvns	r3, r3
 8001b00:	4019      	ands	r1, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa00 f203 	lsl.w	r2, r0, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b1e:	e063      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b09      	cmp	r3, #9
 8001b26:	d81e      	bhi.n	8001b66 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	3b1e      	subs	r3, #30
 8001b3c:	221f      	movs	r2, #31
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	4019      	ands	r1, r3
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	6818      	ldr	r0, [r3, #0]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	3b1e      	subs	r3, #30
 8001b58:	fa00 f203 	lsl.w	r2, r0, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	635a      	str	r2, [r3, #52]	; 0x34
 8001b64:	e040      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b0e      	cmp	r3, #14
 8001b6c:	d81e      	bhi.n	8001bac <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	3b3c      	subs	r3, #60	; 0x3c
 8001b82:	221f      	movs	r2, #31
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4019      	ands	r1, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6818      	ldr	r0, [r3, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4413      	add	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	3b3c      	subs	r3, #60	; 0x3c
 8001b9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	639a      	str	r2, [r3, #56]	; 0x38
 8001baa:	e01d      	b.n	8001be8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4413      	add	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	3b5a      	subs	r3, #90	; 0x5a
 8001bc0:	221f      	movs	r2, #31
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	4019      	ands	r1, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	3b5a      	subs	r3, #90	; 0x5a
 8001bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 80e5 	bne.w	8001dc2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b09      	cmp	r3, #9
 8001bfe:	d91c      	bls.n	8001c3a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6999      	ldr	r1, [r3, #24]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	3b1e      	subs	r3, #30
 8001c12:	2207      	movs	r2, #7
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	4019      	ands	r1, r3
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	6898      	ldr	r0, [r3, #8]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4613      	mov	r3, r2
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	4413      	add	r3, r2
 8001c2a:	3b1e      	subs	r3, #30
 8001c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	619a      	str	r2, [r3, #24]
 8001c38:	e019      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6959      	ldr	r1, [r3, #20]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	4019      	ands	r1, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6898      	ldr	r0, [r3, #8]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	fa00 f203 	lsl.w	r2, r0, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	08db      	lsrs	r3, r3, #3
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d84f      	bhi.n	8001d30 <HAL_ADC_ConfigChannel+0x28c>
 8001c90:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <HAL_ADC_ConfigChannel+0x1f4>)
 8001c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c96:	bf00      	nop
 8001c98:	08001ca9 	.word	0x08001ca9
 8001c9c:	08001ccb 	.word	0x08001ccb
 8001ca0:	08001ced 	.word	0x08001ced
 8001ca4:	08001d0f 	.word	0x08001d0f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cae:	4b94      	ldr	r3, [pc, #592]	; (8001f00 <HAL_ADC_ConfigChannel+0x45c>)
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	0691      	lsls	r1, r2, #26
 8001cb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cc6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cc8:	e07e      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cd0:	4b8b      	ldr	r3, [pc, #556]	; (8001f00 <HAL_ADC_ConfigChannel+0x45c>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	0691      	lsls	r1, r2, #26
 8001cda:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ce8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cea:	e06d      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cf2:	4b83      	ldr	r3, [pc, #524]	; (8001f00 <HAL_ADC_ConfigChannel+0x45c>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	0691      	lsls	r1, r2, #26
 8001cfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	431a      	orrs	r2, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d0a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d0c:	e05c      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d14:	4b7a      	ldr	r3, [pc, #488]	; (8001f00 <HAL_ADC_ConfigChannel+0x45c>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	0691      	lsls	r1, r2, #26
 8001d1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001d20:	430a      	orrs	r2, r1
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001d2c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d2e:	e04b      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	069b      	lsls	r3, r3, #26
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d107      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d52:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	069b      	lsls	r3, r3, #26
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d107      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d76:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	069b      	lsls	r3, r3, #26
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d107      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d9a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	069b      	lsls	r3, r3, #26
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d10a      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001dbe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001dc0:	e001      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001dc2:	bf00      	nop
 8001dc4:	e000      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001dc6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d108      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x344>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x344>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_ADC_ConfigChannel+0x346>
 8001de8:	2300      	movs	r3, #0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 810a 	bne.w	8002004 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d00f      	beq.n	8001e18 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2201      	movs	r2, #1
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	400a      	ands	r2, r1
 8001e12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001e16:	e049      	b.n	8001eac <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2201      	movs	r2, #1
 8001e26:	409a      	lsls	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b09      	cmp	r3, #9
 8001e38:	d91c      	bls.n	8001e74 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6999      	ldr	r1, [r3, #24]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b1b      	subs	r3, #27
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	4019      	ands	r1, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	6898      	ldr	r0, [r3, #8]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	3b1b      	subs	r3, #27
 8001e66:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	619a      	str	r2, [r3, #24]
 8001e72:	e01b      	b.n	8001eac <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6959      	ldr	r1, [r3, #20]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	2207      	movs	r2, #7
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4019      	ands	r1, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6898      	ldr	r0, [r3, #8]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_ADC_ConfigChannel+0x460>)
 8001eae:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b10      	cmp	r3, #16
 8001eb6:	d105      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d015      	beq.n	8001ef0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ec8:	2b11      	cmp	r3, #17
 8001eca:	d105      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00b      	beq.n	8001ef0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001edc:	2b12      	cmp	r3, #18
 8001ede:	f040 8091 	bne.w	8002004 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 808a 	bne.w	8002004 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ef8:	d108      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x468>
 8001efa:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <HAL_ADC_ConfigChannel+0x464>)
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	e008      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x46e>
 8001f00:	83fff000 	.word	0x83fff000
 8001f04:	50000300 	.word	0x50000300
 8001f08:	50000100 	.word	0x50000100
 8001f0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f10:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d108      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x48e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x48e>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x490>
 8001f32:	2300      	movs	r3, #0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d150      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f38:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d010      	beq.n	8001f60 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x4b6>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x4b6>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x4b8>
 8001f5a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d13c      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b10      	cmp	r3, #16
 8001f66:	d11d      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x500>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f70:	d118      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f7c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f7e:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_ADC_ConfigChannel+0x578>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a27      	ldr	r2, [pc, #156]	; (8002020 <HAL_ADC_ConfigChannel+0x57c>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0c9a      	lsrs	r2, r3, #18
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f94:	e002      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f9      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fa2:	e02e      	b.n	8002002 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b11      	cmp	r3, #17
 8001faa:	d10b      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x520>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb4:	d106      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fc0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fc2:	e01e      	b.n	8002002 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b12      	cmp	r3, #18
 8001fca:	d11a      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fd6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fd8:	e013      	b.n	8002002 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f043 0220 	orr.w	r2, r3, #32
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001fec:	e00a      	b.n	8002004 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f043 0220 	orr.w	r2, r3, #32
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002000:	e000      	b.n	8002004 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002002:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800200c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002010:	4618      	mov	r0, r3
 8002012:	376c      	adds	r7, #108	; 0x6c
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	20000000 	.word	0x20000000
 8002020:	431bde83 	.word	0x431bde83

08002024 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d108      	bne.n	8002050 <ADC_Enable+0x2c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <ADC_Enable+0x2c>
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <ADC_Enable+0x2e>
 8002050:	2300      	movs	r3, #0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d143      	bne.n	80020de <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <ADC_Enable+0xc4>)
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00d      	beq.n	8002080 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f043 0210 	orr.w	r2, r3, #16
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002074:	f043 0201 	orr.w	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e02f      	b.n	80020e0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002090:	f7ff f9b4 	bl	80013fc <HAL_GetTick>
 8002094:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002096:	e01b      	b.n	80020d0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002098:	f7ff f9b0 	bl	80013fc <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d914      	bls.n	80020d0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d00d      	beq.n	80020d0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	f043 0210 	orr.w	r2, r3, #16
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c4:	f043 0201 	orr.w	r2, r3, #1
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e007      	b.n	80020e0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d1dc      	bne.n	8002098 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	8000003f 	.word	0x8000003f

080020ec <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d108      	bne.n	8002118 <ADC_Disable+0x2c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <ADC_Disable+0x2c>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <ADC_Disable+0x2e>
 8002118:	2300      	movs	r3, #0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d047      	beq.n	80021ae <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 030d 	and.w	r3, r3, #13
 8002128:	2b01      	cmp	r3, #1
 800212a:	d10f      	bne.n	800214c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0202 	orr.w	r2, r2, #2
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2203      	movs	r2, #3
 8002142:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002144:	f7ff f95a 	bl	80013fc <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800214a:	e029      	b.n	80021a0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f043 0210 	orr.w	r2, r3, #16
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e023      	b.n	80021b0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002168:	f7ff f948 	bl	80013fc <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d914      	bls.n	80021a0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d10d      	bne.n	80021a0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f043 0210 	orr.w	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e007      	b.n	80021b0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d0dc      	beq.n	8002168 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4907      	ldr	r1, [pc, #28]	; (8002254 <__NVIC_EnableIRQ+0x38>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	; (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4313      	orrs	r3, r2
         );
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	; 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002324:	d301      	bcc.n	800232a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002326:	2301      	movs	r3, #1
 8002328:	e00f      	b.n	800234a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232a:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <SysTick_Config+0x40>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002332:	210f      	movs	r1, #15
 8002334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002338:	f7ff ff8e 	bl	8002258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <SysTick_Config+0x40>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002342:	4b04      	ldr	r3, [pc, #16]	; (8002354 <SysTick_Config+0x40>)
 8002344:	2207      	movs	r2, #7
 8002346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	e000e010 	.word	0xe000e010

08002358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff29 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002380:	f7ff ff3e 	bl	8002200 <__NVIC_GetPriorityGrouping>
 8002384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f7ff ff8e 	bl	80022ac <NVIC_EncodePriority>
 8002390:	4602      	mov	r2, r0
 8002392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff5d 	bl	8002258 <__NVIC_SetPriority>
}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff31 	bl	800221c <__NVIC_EnableIRQ>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffa2 	bl	8002314 <SysTick_Config>
 80023d0:	4603      	mov	r3, r0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ea:	e14e      	b.n	800268a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	fa01 f303 	lsl.w	r3, r1, r3
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8140 	beq.w	8002684 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b01      	cmp	r3, #1
 800240e:	d005      	beq.n	800241c <HAL_GPIO_Init+0x40>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d130      	bne.n	800247e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002452:	2201      	movs	r2, #1
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	f003 0201 	and.w	r2, r3, #1
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b03      	cmp	r3, #3
 8002488:	d017      	beq.n	80024ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	2203      	movs	r2, #3
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d123      	bne.n	800250e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	08da      	lsrs	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3208      	adds	r2, #8
 80024ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	220f      	movs	r2, #15
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	6939      	ldr	r1, [r7, #16]
 800250a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	2203      	movs	r2, #3
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43db      	mvns	r3, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 0203 	and.w	r2, r3, #3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 809a 	beq.w	8002684 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002550:	4b55      	ldr	r3, [pc, #340]	; (80026a8 <HAL_GPIO_Init+0x2cc>)
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	4a54      	ldr	r2, [pc, #336]	; (80026a8 <HAL_GPIO_Init+0x2cc>)
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	6193      	str	r3, [r2, #24]
 800255c:	4b52      	ldr	r3, [pc, #328]	; (80026a8 <HAL_GPIO_Init+0x2cc>)
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002568:	4a50      	ldr	r2, [pc, #320]	; (80026ac <HAL_GPIO_Init+0x2d0>)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	089b      	lsrs	r3, r3, #2
 800256e:	3302      	adds	r3, #2
 8002570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002574:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	220f      	movs	r2, #15
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002592:	d013      	beq.n	80025bc <HAL_GPIO_Init+0x1e0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a46      	ldr	r2, [pc, #280]	; (80026b0 <HAL_GPIO_Init+0x2d4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00d      	beq.n	80025b8 <HAL_GPIO_Init+0x1dc>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a45      	ldr	r2, [pc, #276]	; (80026b4 <HAL_GPIO_Init+0x2d8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d007      	beq.n	80025b4 <HAL_GPIO_Init+0x1d8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a44      	ldr	r2, [pc, #272]	; (80026b8 <HAL_GPIO_Init+0x2dc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d101      	bne.n	80025b0 <HAL_GPIO_Init+0x1d4>
 80025ac:	2303      	movs	r3, #3
 80025ae:	e006      	b.n	80025be <HAL_GPIO_Init+0x1e2>
 80025b0:	2305      	movs	r3, #5
 80025b2:	e004      	b.n	80025be <HAL_GPIO_Init+0x1e2>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e002      	b.n	80025be <HAL_GPIO_Init+0x1e2>
 80025b8:	2301      	movs	r3, #1
 80025ba:	e000      	b.n	80025be <HAL_GPIO_Init+0x1e2>
 80025bc:	2300      	movs	r3, #0
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	f002 0203 	and.w	r2, r2, #3
 80025c4:	0092      	lsls	r2, r2, #2
 80025c6:	4093      	lsls	r3, r2
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ce:	4937      	ldr	r1, [pc, #220]	; (80026ac <HAL_GPIO_Init+0x2d0>)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	3302      	adds	r3, #2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025dc:	4b37      	ldr	r3, [pc, #220]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002600:	4a2e      	ldr	r2, [pc, #184]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002606:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800262a:	4a24      	ldr	r2, [pc, #144]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002630:	4b22      	ldr	r3, [pc, #136]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	43db      	mvns	r3, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002654:	4a19      	ldr	r2, [pc, #100]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	43db      	mvns	r3, r3
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800267e:	4a0f      	ldr	r2, [pc, #60]	; (80026bc <HAL_GPIO_Init+0x2e0>)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3301      	adds	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	f47f aea9 	bne.w	80023ec <HAL_GPIO_Init+0x10>
  }
}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40010000 	.word	0x40010000
 80026b0:	48000400 	.word	0x48000400
 80026b4:	48000800 	.word	0x48000800
 80026b8:	48000c00 	.word	0x48000c00
 80026bc:	40010400 	.word	0x40010400

080026c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691a      	ldr	r2, [r3, #16]
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e001      	b.n	80026e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
 80026fc:	4613      	mov	r3, r2
 80026fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002700:	787b      	ldrb	r3, [r7, #1]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002706:	887a      	ldrh	r2, [r7, #2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800270c:	e002      	b.n	8002714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800270e:	887a      	ldrh	r2, [r7, #2]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe fbca 	bl	8000ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40010400 	.word	0x40010400

08002750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002756:	af00      	add	r7, sp, #0
 8002758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002760:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002766:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	f001 b823 	b.w	80037bc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 817d 	beq.w	8002a86 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800278c:	4bbc      	ldr	r3, [pc, #752]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	2b04      	cmp	r3, #4
 8002796:	d00c      	beq.n	80027b2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002798:	4bb9      	ldr	r3, [pc, #740]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d15c      	bne.n	800285e <HAL_RCC_OscConfig+0x10e>
 80027a4:	4bb6      	ldr	r3, [pc, #728]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b0:	d155      	bne.n	800285e <HAL_RCC_OscConfig+0x10e>
 80027b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027b6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027c6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d102      	bne.n	80027e4 <HAL_RCC_OscConfig+0x94>
 80027de:	4ba8      	ldr	r3, [pc, #672]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	e015      	b.n	8002810 <HAL_RCC_OscConfig+0xc0>
 80027e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80027f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002800:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800280c:	4b9c      	ldr	r3, [pc, #624]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002814:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002818:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800281c:	fa92 f2a2 	rbit	r2, r2
 8002820:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002824:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002828:	fab2 f282 	clz	r2, r2
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f042 0220 	orr.w	r2, r2, #32
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	f002 021f 	and.w	r2, r2, #31
 8002838:	2101      	movs	r1, #1
 800283a:	fa01 f202 	lsl.w	r2, r1, r2
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 811f 	beq.w	8002a84 <HAL_RCC_OscConfig+0x334>
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f040 8116 	bne.w	8002a84 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	f000 bfaf 	b.w	80037bc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x12e>
 8002870:	4b83      	ldr	r3, [pc, #524]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a82      	ldr	r2, [pc, #520]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e036      	b.n	80028ec <HAL_RCC_OscConfig+0x19c>
 800287e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002882:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10c      	bne.n	80028a8 <HAL_RCC_OscConfig+0x158>
 800288e:	4b7c      	ldr	r3, [pc, #496]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a7b      	ldr	r2, [pc, #492]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 8002894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	4b79      	ldr	r3, [pc, #484]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a78      	ldr	r2, [pc, #480]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 80028a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	e021      	b.n	80028ec <HAL_RCC_OscConfig+0x19c>
 80028a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x184>
 80028ba:	4b71      	ldr	r3, [pc, #452]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a70      	ldr	r2, [pc, #448]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 80028c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	4b6e      	ldr	r3, [pc, #440]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a6d      	ldr	r2, [pc, #436]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 80028cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0x19c>
 80028d4:	4b6a      	ldr	r3, [pc, #424]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a69      	ldr	r2, [pc, #420]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 80028da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	4b67      	ldr	r3, [pc, #412]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a66      	ldr	r2, [pc, #408]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 80028e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ea:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ec:	4b64      	ldr	r3, [pc, #400]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	f023 020f 	bic.w	r2, r3, #15
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	495f      	ldr	r1, [pc, #380]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 8002902:	4313      	orrs	r3, r2
 8002904:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d059      	beq.n	80029ca <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7fe fd71 	bl	80013fc <HAL_GetTick>
 800291a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	e00a      	b.n	8002936 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002920:	f7fe fd6c 	bl	80013fc <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b64      	cmp	r3, #100	; 0x64
 800292e:	d902      	bls.n	8002936 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	f000 bf43 	b.w	80037bc <HAL_RCC_OscConfig+0x106c>
 8002936:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800293a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800294a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	b2db      	uxtb	r3, r3
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d102      	bne.n	8002968 <HAL_RCC_OscConfig+0x218>
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	e015      	b.n	8002994 <HAL_RCC_OscConfig+0x244>
 8002968:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800296c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800297c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002980:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002984:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002990:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002998:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800299c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029a0:	fa92 f2a2 	rbit	r2, r2
 80029a4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80029a8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80029ac:	fab2 f282 	clz	r2, r2
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	f042 0220 	orr.w	r2, r2, #32
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	f002 021f 	and.w	r2, r2, #31
 80029bc:	2101      	movs	r1, #1
 80029be:	fa01 f202 	lsl.w	r2, r1, r2
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ab      	beq.n	8002920 <HAL_RCC_OscConfig+0x1d0>
 80029c8:	e05d      	b.n	8002a86 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7fe fd17 	bl	80013fc <HAL_GetTick>
 80029ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029d4:	f7fe fd12 	bl	80013fc <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b64      	cmp	r3, #100	; 0x64
 80029e2:	d902      	bls.n	80029ea <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	f000 bee9 	b.w	80037bc <HAL_RCC_OscConfig+0x106c>
 80029ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029ee:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80029fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d102      	bne.n	8002a1c <HAL_RCC_OscConfig+0x2cc>
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	e015      	b.n	8002a48 <HAL_RCC_OscConfig+0x2f8>
 8002a1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a20:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a28:	fa93 f3a3 	rbit	r3, r3
 8002a2c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a34:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a38:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_RCC_OscConfig+0x330>)
 8002a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a4c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a50:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a54:	fa92 f2a2 	rbit	r2, r2
 8002a58:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a5c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a60:	fab2 f282 	clz	r2, r2
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	f042 0220 	orr.w	r2, r2, #32
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	f002 021f 	and.w	r2, r2, #31
 8002a70:	2101      	movs	r1, #1
 8002a72:	fa01 f202 	lsl.w	r2, r1, r2
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1ab      	bne.n	80029d4 <HAL_RCC_OscConfig+0x284>
 8002a7c:	e003      	b.n	8002a86 <HAL_RCC_OscConfig+0x336>
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 817d 	beq.w	8002d96 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002a9c:	4ba6      	ldr	r3, [pc, #664]	; (8002d38 <HAL_RCC_OscConfig+0x5e8>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00b      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002aa8:	4ba3      	ldr	r3, [pc, #652]	; (8002d38 <HAL_RCC_OscConfig+0x5e8>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 030c 	and.w	r3, r3, #12
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d172      	bne.n	8002b9a <HAL_RCC_OscConfig+0x44a>
 8002ab4:	4ba0      	ldr	r3, [pc, #640]	; (8002d38 <HAL_RCC_OscConfig+0x5e8>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d16c      	bne.n	8002b9a <HAL_RCC_OscConfig+0x44a>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ad2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	095b      	lsrs	r3, r3, #5
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d102      	bne.n	8002af0 <HAL_RCC_OscConfig+0x3a0>
 8002aea:	4b93      	ldr	r3, [pc, #588]	; (8002d38 <HAL_RCC_OscConfig+0x5e8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	e013      	b.n	8002b18 <HAL_RCC_OscConfig+0x3c8>
 8002af0:	2302      	movs	r3, #2
 8002af2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002afa:	fa93 f3a3 	rbit	r3, r3
 8002afe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b02:	2302      	movs	r3, #2
 8002b04:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b08:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b14:	4b88      	ldr	r3, [pc, #544]	; (8002d38 <HAL_RCC_OscConfig+0x5e8>)
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	2202      	movs	r2, #2
 8002b1a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002b1e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b22:	fa92 f2a2 	rbit	r2, r2
 8002b26:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b2a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b2e:	fab2 f282 	clz	r2, r2
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	f042 0220 	orr.w	r2, r2, #32
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	f002 021f 	and.w	r2, r2, #31
 8002b3e:	2101      	movs	r1, #1
 8002b40:	fa01 f202 	lsl.w	r2, r1, r2
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_RCC_OscConfig+0x410>
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d002      	beq.n	8002b60 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f000 be2e 	b.w	80037bc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b60:	4b75      	ldr	r3, [pc, #468]	; (8002d38 <HAL_RCC_OscConfig+0x5e8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	21f8      	movs	r1, #248	; 0xf8
 8002b76:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b7e:	fa91 f1a1 	rbit	r1, r1
 8002b82:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b86:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002b8a:	fab1 f181 	clz	r1, r1
 8002b8e:	b2c9      	uxtb	r1, r1
 8002b90:	408b      	lsls	r3, r1
 8002b92:	4969      	ldr	r1, [pc, #420]	; (8002d38 <HAL_RCC_OscConfig+0x5e8>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b98:	e0fd      	b.n	8002d96 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8088 	beq.w	8002cbc <HAL_RCC_OscConfig+0x56c>
 8002bac:	2301      	movs	r3, #1
 8002bae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002bb6:	fa93 f3a3 	rbit	r3, r3
 8002bba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002bbe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fc10 	bl	80013fc <HAL_GetTick>
 8002bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	e00a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be2:	f7fe fc0b 	bl	80013fc <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d902      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	f000 bde2 	b.w	80037bc <HAL_RCC_OscConfig+0x106c>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c02:	fa93 f3a3 	rbit	r3, r3
 8002c06:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c0a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d102      	bne.n	8002c28 <HAL_RCC_OscConfig+0x4d8>
 8002c22:	4b45      	ldr	r3, [pc, #276]	; (8002d38 <HAL_RCC_OscConfig+0x5e8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	e013      	b.n	8002c50 <HAL_RCC_OscConfig+0x500>
 8002c28:	2302      	movs	r3, #2
 8002c2a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c40:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c4c:	4b3a      	ldr	r3, [pc, #232]	; (8002d38 <HAL_RCC_OscConfig+0x5e8>)
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	2202      	movs	r2, #2
 8002c52:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c56:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c5a:	fa92 f2a2 	rbit	r2, r2
 8002c5e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c62:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c66:	fab2 f282 	clz	r2, r2
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	f042 0220 	orr.w	r2, r2, #32
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	f002 021f 	and.w	r2, r2, #31
 8002c76:	2101      	movs	r1, #1
 8002c78:	fa01 f202 	lsl.w	r2, r1, r2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0af      	beq.n	8002be2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c82:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <HAL_RCC_OscConfig+0x5e8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	21f8      	movs	r1, #248	; 0xf8
 8002c98:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ca0:	fa91 f1a1 	rbit	r1, r1
 8002ca4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ca8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002cac:	fab1 f181 	clz	r1, r1
 8002cb0:	b2c9      	uxtb	r1, r1
 8002cb2:	408b      	lsls	r3, r1
 8002cb4:	4920      	ldr	r1, [pc, #128]	; (8002d38 <HAL_RCC_OscConfig+0x5e8>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]
 8002cba:	e06c      	b.n	8002d96 <HAL_RCC_OscConfig+0x646>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002cce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fb88 	bl	80013fc <HAL_GetTick>
 8002cec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf2:	f7fe fb83 	bl	80013fc <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d902      	bls.n	8002d08 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	f000 bd5a 	b.w	80037bc <HAL_RCC_OscConfig+0x106c>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	095b      	lsrs	r3, r3, #5
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f043 0301 	orr.w	r3, r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d104      	bne.n	8002d3c <HAL_RCC_OscConfig+0x5ec>
 8002d32:	4b01      	ldr	r3, [pc, #4]	; (8002d38 <HAL_RCC_OscConfig+0x5e8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	e015      	b.n	8002d64 <HAL_RCC_OscConfig+0x614>
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d4e:	2302      	movs	r3, #2
 8002d50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d54:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d60:	4bc8      	ldr	r3, [pc, #800]	; (8003084 <HAL_RCC_OscConfig+0x934>)
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	2202      	movs	r2, #2
 8002d66:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002d6a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d6e:	fa92 f2a2 	rbit	r2, r2
 8002d72:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d76:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d7a:	fab2 f282 	clz	r2, r2
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	f042 0220 	orr.w	r2, r2, #32
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	f002 021f 	and.w	r2, r2, #31
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1ad      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8110 	beq.w	8002fcc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d079      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x760>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4bab      	ldr	r3, [pc, #684]	; (8003088 <HAL_RCC_OscConfig+0x938>)
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	461a      	mov	r2, r3
 8002de2:	2301      	movs	r3, #1
 8002de4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de6:	f7fe fb09 	bl	80013fc <HAL_GetTick>
 8002dea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df0:	f7fe fb04 	bl	80013fc <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d902      	bls.n	8002e06 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	f000 bcdb 	b.w	80037bc <HAL_RCC_OscConfig+0x106c>
 8002e06:	2302      	movs	r3, #2
 8002e08:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e1c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e20:	2202      	movs	r2, #2
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e28:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	fa93 f2a3 	rbit	r2, r3
 8002e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e44:	2202      	movs	r2, #2
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	fa93 f2a3 	rbit	r2, r3
 8002e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e5e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e60:	4b88      	ldr	r3, [pc, #544]	; (8003084 <HAL_RCC_OscConfig+0x934>)
 8002e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e68:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e6c:	2102      	movs	r1, #2
 8002e6e:	6019      	str	r1, [r3, #0]
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	fa93 f1a3 	rbit	r1, r3
 8002e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e82:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e86:	6019      	str	r1, [r3, #0]
  return result;
 8002e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e8c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	f003 031f 	and.w	r3, r3, #31
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0a0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x6a0>
 8002eae:	e08d      	b.n	8002fcc <HAL_RCC_OscConfig+0x87c>
 8002eb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002eb8:	2201      	movs	r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	fa93 f2a3 	rbit	r2, r3
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ed2:	601a      	str	r2, [r3, #0]
  return result;
 8002ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002edc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b68      	ldr	r3, [pc, #416]	; (8003088 <HAL_RCC_OscConfig+0x938>)
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	461a      	mov	r2, r3
 8002eee:	2300      	movs	r3, #0
 8002ef0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7fe fa83 	bl	80013fc <HAL_GetTick>
 8002ef6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efc:	f7fe fa7e 	bl	80013fc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d902      	bls.n	8002f12 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	f000 bc55 	b.w	80037bc <HAL_RCC_OscConfig+0x106c>
 8002f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f16:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f22:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	fa93 f2a3 	rbit	r2, r3
 8002f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f30:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f3e:	2202      	movs	r2, #2
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f46:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	fa93 f2a3 	rbit	r2, r3
 8002f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f62:	2202      	movs	r2, #2
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	fa93 f2a3 	rbit	r2, r3
 8002f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f78:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002f7c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f7e:	4b41      	ldr	r3, [pc, #260]	; (8003084 <HAL_RCC_OscConfig+0x934>)
 8002f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f86:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f8a:	2102      	movs	r1, #2
 8002f8c:	6019      	str	r1, [r3, #0]
 8002f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f92:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	fa93 f1a3 	rbit	r1, r3
 8002f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fa4:	6019      	str	r1, [r3, #0]
  return result;
 8002fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002faa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d197      	bne.n	8002efc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0304 	and.w	r3, r3, #4
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 81a1 	beq.w	8003324 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe8:	4b26      	ldr	r3, [pc, #152]	; (8003084 <HAL_RCC_OscConfig+0x934>)
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d116      	bne.n	8003022 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ff4:	4b23      	ldr	r3, [pc, #140]	; (8003084 <HAL_RCC_OscConfig+0x934>)
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	4a22      	ldr	r2, [pc, #136]	; (8003084 <HAL_RCC_OscConfig+0x934>)
 8002ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	61d3      	str	r3, [r2, #28]
 8003000:	4b20      	ldr	r3, [pc, #128]	; (8003084 <HAL_RCC_OscConfig+0x934>)
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003016:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800301a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003022:	4b1a      	ldr	r3, [pc, #104]	; (800308c <HAL_RCC_OscConfig+0x93c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302a:	2b00      	cmp	r3, #0
 800302c:	d11a      	bne.n	8003064 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <HAL_RCC_OscConfig+0x93c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a16      	ldr	r2, [pc, #88]	; (800308c <HAL_RCC_OscConfig+0x93c>)
 8003034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003038:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303a:	f7fe f9df 	bl	80013fc <HAL_GetTick>
 800303e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003042:	e009      	b.n	8003058 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003044:	f7fe f9da 	bl	80013fc <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b64      	cmp	r3, #100	; 0x64
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e3b1      	b.n	80037bc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <HAL_RCC_OscConfig+0x93c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0ef      	beq.n	8003044 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003068:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d10d      	bne.n	8003090 <HAL_RCC_OscConfig+0x940>
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_RCC_OscConfig+0x934>)
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4a02      	ldr	r2, [pc, #8]	; (8003084 <HAL_RCC_OscConfig+0x934>)
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	6213      	str	r3, [r2, #32]
 8003080:	e03c      	b.n	80030fc <HAL_RCC_OscConfig+0x9ac>
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000
 8003088:	10908120 	.word	0x10908120
 800308c:	40007000 	.word	0x40007000
 8003090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003094:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10c      	bne.n	80030ba <HAL_RCC_OscConfig+0x96a>
 80030a0:	4bc1      	ldr	r3, [pc, #772]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	4ac0      	ldr	r2, [pc, #768]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	6213      	str	r3, [r2, #32]
 80030ac:	4bbe      	ldr	r3, [pc, #760]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	4abd      	ldr	r2, [pc, #756]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 80030b2:	f023 0304 	bic.w	r3, r3, #4
 80030b6:	6213      	str	r3, [r2, #32]
 80030b8:	e020      	b.n	80030fc <HAL_RCC_OscConfig+0x9ac>
 80030ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d10c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x994>
 80030ca:	4bb7      	ldr	r3, [pc, #732]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	4ab6      	ldr	r2, [pc, #728]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	6213      	str	r3, [r2, #32]
 80030d6:	4bb4      	ldr	r3, [pc, #720]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	4ab3      	ldr	r2, [pc, #716]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6213      	str	r3, [r2, #32]
 80030e2:	e00b      	b.n	80030fc <HAL_RCC_OscConfig+0x9ac>
 80030e4:	4bb0      	ldr	r3, [pc, #704]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	4aaf      	ldr	r2, [pc, #700]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	6213      	str	r3, [r2, #32]
 80030f0:	4bad      	ldr	r3, [pc, #692]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	4aac      	ldr	r2, [pc, #688]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 80030f6:	f023 0304 	bic.w	r3, r3, #4
 80030fa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003100:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8081 	beq.w	8003210 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800310e:	f7fe f975 	bl	80013fc <HAL_GetTick>
 8003112:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003116:	e00b      	b.n	8003130 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003118:	f7fe f970 	bl	80013fc <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	f241 3288 	movw	r2, #5000	; 0x1388
 8003128:	4293      	cmp	r3, r2
 800312a:	d901      	bls.n	8003130 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e345      	b.n	80037bc <HAL_RCC_OscConfig+0x106c>
 8003130:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003134:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003138:	2202      	movs	r2, #2
 800313a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003140:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	fa93 f2a3 	rbit	r2, r3
 800314a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003158:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800315c:	2202      	movs	r2, #2
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003164:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	fa93 f2a3 	rbit	r2, r3
 800316e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003172:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003176:	601a      	str	r2, [r3, #0]
  return result;
 8003178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003180:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	b2db      	uxtb	r3, r3
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d102      	bne.n	800319c <HAL_RCC_OscConfig+0xa4c>
 8003196:	4b84      	ldr	r3, [pc, #528]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	e013      	b.n	80031c4 <HAL_RCC_OscConfig+0xa74>
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031a4:	2202      	movs	r2, #2
 80031a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ac:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	fa93 f2a3 	rbit	r2, r3
 80031b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	4b79      	ldr	r3, [pc, #484]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031cc:	2102      	movs	r1, #2
 80031ce:	6011      	str	r1, [r2, #0]
 80031d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031d4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	fa92 f1a2 	rbit	r1, r2
 80031de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031e2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031e6:	6011      	str	r1, [r2, #0]
  return result;
 80031e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80031ec:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	fab2 f282 	clz	r2, r2
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	f002 021f 	and.w	r2, r2, #31
 8003202:	2101      	movs	r1, #1
 8003204:	fa01 f202 	lsl.w	r2, r1, r2
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d084      	beq.n	8003118 <HAL_RCC_OscConfig+0x9c8>
 800320e:	e07f      	b.n	8003310 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003210:	f7fe f8f4 	bl	80013fc <HAL_GetTick>
 8003214:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003218:	e00b      	b.n	8003232 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fe f8ef 	bl	80013fc <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	; 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e2c4      	b.n	80037bc <HAL_RCC_OscConfig+0x106c>
 8003232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003236:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800323a:	2202      	movs	r2, #2
 800323c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003242:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	fa93 f2a3 	rbit	r2, r3
 800324c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003250:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800325e:	2202      	movs	r2, #2
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003266:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	fa93 f2a3 	rbit	r2, r3
 8003270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003274:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003278:	601a      	str	r2, [r3, #0]
  return result;
 800327a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003282:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f043 0302 	orr.w	r3, r3, #2
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d102      	bne.n	800329e <HAL_RCC_OscConfig+0xb4e>
 8003298:	4b43      	ldr	r3, [pc, #268]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	e013      	b.n	80032c6 <HAL_RCC_OscConfig+0xb76>
 800329e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032a6:	2202      	movs	r2, #2
 80032a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ae:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	fa93 f2a3 	rbit	r2, r3
 80032b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032bc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032ce:	2102      	movs	r1, #2
 80032d0:	6011      	str	r1, [r2, #0]
 80032d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032d6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	fa92 f1a2 	rbit	r1, r2
 80032e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032e4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032e8:	6011      	str	r1, [r2, #0]
  return result;
 80032ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032ee:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	fab2 f282 	clz	r2, r2
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	f002 021f 	and.w	r2, r2, #31
 8003304:	2101      	movs	r1, #1
 8003306:	fa01 f202 	lsl.w	r2, r1, r2
 800330a:	4013      	ands	r3, r2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d184      	bne.n	800321a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003310:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003314:	2b01      	cmp	r3, #1
 8003316:	d105      	bne.n	8003324 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003318:	4b23      	ldr	r3, [pc, #140]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 800331e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003322:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 8242 	beq.w	80037ba <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003336:	4b1c      	ldr	r3, [pc, #112]	; (80033a8 <HAL_RCC_OscConfig+0xc58>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b08      	cmp	r3, #8
 8003340:	f000 8213 	beq.w	800376a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003348:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69db      	ldr	r3, [r3, #28]
 8003350:	2b02      	cmp	r3, #2
 8003352:	f040 8162 	bne.w	800361a <HAL_RCC_OscConfig+0xeca>
 8003356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800335e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003362:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	fa93 f2a3 	rbit	r2, r3
 8003372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003376:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800337a:	601a      	str	r2, [r3, #0]
  return result;
 800337c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003380:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003384:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003390:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	461a      	mov	r2, r3
 8003398:	2300      	movs	r3, #0
 800339a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe f82e 	bl	80013fc <HAL_GetTick>
 80033a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a4:	e00c      	b.n	80033c0 <HAL_RCC_OscConfig+0xc70>
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fe f826 	bl	80013fc <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e1fd      	b.n	80037bc <HAL_RCC_OscConfig+0x106c>
 80033c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	fa93 f2a3 	rbit	r2, r3
 80033dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033e4:	601a      	str	r2, [r3, #0]
  return result;
 80033e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ea:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80033ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f0:	fab3 f383 	clz	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d102      	bne.n	800340a <HAL_RCC_OscConfig+0xcba>
 8003404:	4bb0      	ldr	r3, [pc, #704]	; (80036c8 <HAL_RCC_OscConfig+0xf78>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	e027      	b.n	800345a <HAL_RCC_OscConfig+0xd0a>
 800340a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003412:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	fa93 f2a3 	rbit	r2, r3
 8003426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003434:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003442:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	fa93 f2a3 	rbit	r2, r3
 800344c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003450:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	4b9c      	ldr	r3, [pc, #624]	; (80036c8 <HAL_RCC_OscConfig+0xf78>)
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800345e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003462:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003466:	6011      	str	r1, [r2, #0]
 8003468:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800346c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	fa92 f1a2 	rbit	r1, r2
 8003476:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800347a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800347e:	6011      	str	r1, [r2, #0]
  return result;
 8003480:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003484:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	fab2 f282 	clz	r2, r2
 800348e:	b2d2      	uxtb	r2, r2
 8003490:	f042 0220 	orr.w	r2, r2, #32
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	f002 021f 	and.w	r2, r2, #31
 800349a:	2101      	movs	r1, #1
 800349c:	fa01 f202 	lsl.w	r2, r1, r2
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d182      	bne.n	80033ac <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a6:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <HAL_RCC_OscConfig+0xf78>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	430b      	orrs	r3, r1
 80034c8:	497f      	ldr	r1, [pc, #508]	; (80036c8 <HAL_RCC_OscConfig+0xf78>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	604b      	str	r3, [r1, #4]
 80034ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	fa93 f2a3 	rbit	r2, r3
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034f2:	601a      	str	r2, [r3, #0]
  return result;
 80034f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80034fc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034fe:	fab3 f383 	clz	r3, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003508:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	461a      	mov	r2, r3
 8003510:	2301      	movs	r3, #1
 8003512:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fd ff72 	bl	80013fc <HAL_GetTick>
 8003518:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800351c:	e009      	b.n	8003532 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351e:	f7fd ff6d 	bl	80013fc <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e144      	b.n	80037bc <HAL_RCC_OscConfig+0x106c>
 8003532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003536:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800353a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800353e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003544:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	fa93 f2a3 	rbit	r2, r3
 800354e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003552:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003556:	601a      	str	r2, [r3, #0]
  return result;
 8003558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003560:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d102      	bne.n	800357c <HAL_RCC_OscConfig+0xe2c>
 8003576:	4b54      	ldr	r3, [pc, #336]	; (80036c8 <HAL_RCC_OscConfig+0xf78>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	e027      	b.n	80035cc <HAL_RCC_OscConfig+0xe7c>
 800357c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003580:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	fa93 f2a3 	rbit	r2, r3
 8003598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	fa93 f2a3 	rbit	r2, r3
 80035be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	4b3f      	ldr	r3, [pc, #252]	; (80036c8 <HAL_RCC_OscConfig+0xf78>)
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035d0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80035d8:	6011      	str	r1, [r2, #0]
 80035da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035de:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	fa92 f1a2 	rbit	r1, r2
 80035e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ec:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035f0:	6011      	str	r1, [r2, #0]
  return result;
 80035f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035f6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	fab2 f282 	clz	r2, r2
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	f042 0220 	orr.w	r2, r2, #32
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	f002 021f 	and.w	r2, r2, #31
 800360c:	2101      	movs	r1, #1
 800360e:	fa01 f202 	lsl.w	r2, r1, r2
 8003612:	4013      	ands	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d082      	beq.n	800351e <HAL_RCC_OscConfig+0xdce>
 8003618:	e0cf      	b.n	80037ba <HAL_RCC_OscConfig+0x106a>
 800361a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003622:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	fa93 f2a3 	rbit	r2, r3
 8003636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800363e:	601a      	str	r2, [r3, #0]
  return result;
 8003640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003644:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003648:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364a:	fab3 f383 	clz	r3, r3
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003654:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	461a      	mov	r2, r3
 800365c:	2300      	movs	r3, #0
 800365e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003660:	f7fd fecc 	bl	80013fc <HAL_GetTick>
 8003664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003668:	e009      	b.n	800367e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366a:	f7fd fec7 	bl	80013fc <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e09e      	b.n	80037bc <HAL_RCC_OscConfig+0x106c>
 800367e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003682:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003686:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800368a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003690:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	fa93 f2a3 	rbit	r2, r3
 800369a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036a2:	601a      	str	r2, [r3, #0]
  return result;
 80036a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d104      	bne.n	80036cc <HAL_RCC_OscConfig+0xf7c>
 80036c2:	4b01      	ldr	r3, [pc, #4]	; (80036c8 <HAL_RCC_OscConfig+0xf78>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	e029      	b.n	800371c <HAL_RCC_OscConfig+0xfcc>
 80036c8:	40021000 	.word	0x40021000
 80036cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036de:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	fa93 f2a3 	rbit	r2, r3
 80036e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ec:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80036fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003704:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	fa93 f2a3 	rbit	r2, r3
 800370e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003712:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	4b2b      	ldr	r3, [pc, #172]	; (80037c8 <HAL_RCC_OscConfig+0x1078>)
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003720:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003724:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003728:	6011      	str	r1, [r2, #0]
 800372a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800372e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	fa92 f1a2 	rbit	r1, r2
 8003738:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800373c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003740:	6011      	str	r1, [r2, #0]
  return result;
 8003742:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003746:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	fab2 f282 	clz	r2, r2
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	f042 0220 	orr.w	r2, r2, #32
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	f002 021f 	and.w	r2, r2, #31
 800375c:	2101      	movs	r1, #1
 800375e:	fa01 f202 	lsl.w	r2, r1, r2
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d180      	bne.n	800366a <HAL_RCC_OscConfig+0xf1a>
 8003768:	e027      	b.n	80037ba <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d101      	bne.n	800377e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e01e      	b.n	80037bc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800377e:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <HAL_RCC_OscConfig+0x1078>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003786:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800378a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800378e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003792:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	429a      	cmp	r2, r3
 800379c:	d10b      	bne.n	80037b6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800379e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d001      	beq.n	80037ba <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000

080037cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b09e      	sub	sp, #120	; 0x78
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e162      	b.n	8003aaa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e4:	4b90      	ldr	r3, [pc, #576]	; (8003a28 <HAL_RCC_ClockConfig+0x25c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d910      	bls.n	8003814 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b8d      	ldr	r3, [pc, #564]	; (8003a28 <HAL_RCC_ClockConfig+0x25c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 0207 	bic.w	r2, r3, #7
 80037fa:	498b      	ldr	r1, [pc, #556]	; (8003a28 <HAL_RCC_ClockConfig+0x25c>)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	4313      	orrs	r3, r2
 8003800:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	4b89      	ldr	r3, [pc, #548]	; (8003a28 <HAL_RCC_ClockConfig+0x25c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d001      	beq.n	8003814 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e14a      	b.n	8003aaa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003820:	4b82      	ldr	r3, [pc, #520]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	497f      	ldr	r1, [pc, #508]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 80dc 	beq.w	80039f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d13c      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xf6>
 8003848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800384c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003850:	fa93 f3a3 	rbit	r3, r3
 8003854:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003858:	fab3 f383 	clz	r3, r3
 800385c:	b2db      	uxtb	r3, r3
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	b2db      	uxtb	r3, r3
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b01      	cmp	r3, #1
 800386a:	d102      	bne.n	8003872 <HAL_RCC_ClockConfig+0xa6>
 800386c:	4b6f      	ldr	r3, [pc, #444]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	e00f      	b.n	8003892 <HAL_RCC_ClockConfig+0xc6>
 8003872:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003876:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	667b      	str	r3, [r7, #100]	; 0x64
 8003880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003884:	663b      	str	r3, [r7, #96]	; 0x60
 8003886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003888:	fa93 f3a3 	rbit	r3, r3
 800388c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800388e:	4b67      	ldr	r3, [pc, #412]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003896:	65ba      	str	r2, [r7, #88]	; 0x58
 8003898:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800389a:	fa92 f2a2 	rbit	r2, r2
 800389e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038a2:	fab2 f282 	clz	r2, r2
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	f042 0220 	orr.w	r2, r2, #32
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	f002 021f 	and.w	r2, r2, #31
 80038b2:	2101      	movs	r1, #1
 80038b4:	fa01 f202 	lsl.w	r2, r1, r2
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d17b      	bne.n	80039b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e0f3      	b.n	8003aaa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d13c      	bne.n	8003944 <HAL_RCC_ClockConfig+0x178>
 80038ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d2:	fa93 f3a3 	rbit	r3, r3
 80038d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	095b      	lsrs	r3, r3, #5
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d102      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x128>
 80038ee:	4b4f      	ldr	r3, [pc, #316]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	e00f      	b.n	8003914 <HAL_RCC_ClockConfig+0x148>
 80038f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	647b      	str	r3, [r7, #68]	; 0x44
 8003902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003906:	643b      	str	r3, [r7, #64]	; 0x40
 8003908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390a:	fa93 f3a3 	rbit	r3, r3
 800390e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003910:	4b46      	ldr	r3, [pc, #280]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003918:	63ba      	str	r2, [r7, #56]	; 0x38
 800391a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800391c:	fa92 f2a2 	rbit	r2, r2
 8003920:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003924:	fab2 f282 	clz	r2, r2
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	f042 0220 	orr.w	r2, r2, #32
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	f002 021f 	and.w	r2, r2, #31
 8003934:	2101      	movs	r1, #1
 8003936:	fa01 f202 	lsl.w	r2, r1, r2
 800393a:	4013      	ands	r3, r2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d13a      	bne.n	80039b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0b2      	b.n	8003aaa <HAL_RCC_ClockConfig+0x2de>
 8003944:	2302      	movs	r3, #2
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	fa93 f3a3 	rbit	r3, r3
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003952:	fab3 f383 	clz	r3, r3
 8003956:	b2db      	uxtb	r3, r3
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	b2db      	uxtb	r3, r3
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b01      	cmp	r3, #1
 8003964:	d102      	bne.n	800396c <HAL_RCC_ClockConfig+0x1a0>
 8003966:	4b31      	ldr	r3, [pc, #196]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	e00d      	b.n	8003988 <HAL_RCC_ClockConfig+0x1bc>
 800396c:	2302      	movs	r3, #2
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	fa93 f3a3 	rbit	r3, r3
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
 8003978:	2302      	movs	r3, #2
 800397a:	623b      	str	r3, [r7, #32]
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	fa93 f3a3 	rbit	r3, r3
 8003982:	61fb      	str	r3, [r7, #28]
 8003984:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	2202      	movs	r2, #2
 800398a:	61ba      	str	r2, [r7, #24]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	fa92 f2a2 	rbit	r2, r2
 8003992:	617a      	str	r2, [r7, #20]
  return result;
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	fab2 f282 	clz	r2, r2
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	f042 0220 	orr.w	r2, r2, #32
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	f002 021f 	and.w	r2, r2, #31
 80039a6:	2101      	movs	r1, #1
 80039a8:	fa01 f202 	lsl.w	r2, r1, r2
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e079      	b.n	8003aaa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b6:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f023 0203 	bic.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	491a      	ldr	r1, [pc, #104]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c8:	f7fd fd18 	bl	80013fc <HAL_GetTick>
 80039cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fd fd14 	bl	80013fc <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	; 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e061      	b.n	8003aaa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <HAL_RCC_ClockConfig+0x260>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 020c 	and.w	r2, r3, #12
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d1eb      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <HAL_RCC_ClockConfig+0x25c>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d214      	bcs.n	8003a30 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <HAL_RCC_ClockConfig+0x25c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 0207 	bic.w	r2, r3, #7
 8003a0e:	4906      	ldr	r1, [pc, #24]	; (8003a28 <HAL_RCC_ClockConfig+0x25c>)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <HAL_RCC_ClockConfig+0x25c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e040      	b.n	8003aaa <HAL_RCC_ClockConfig+0x2de>
 8003a28:	40022000 	.word	0x40022000
 8003a2c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a3c:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	491a      	ldr	r1, [pc, #104]	; (8003ab4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d009      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a5a:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4912      	ldr	r1, [pc, #72]	; (8003ab4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a6e:	f000 f829 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8003a72:	4601      	mov	r1, r0
 8003a74:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <HAL_RCC_ClockConfig+0x2e8>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a7c:	22f0      	movs	r2, #240	; 0xf0
 8003a7e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	fa92 f2a2 	rbit	r2, r2
 8003a86:	60fa      	str	r2, [r7, #12]
  return result;
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	fab2 f282 	clz	r2, r2
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	40d3      	lsrs	r3, r2
 8003a92:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <HAL_RCC_ClockConfig+0x2ec>)
 8003a94:	5cd3      	ldrb	r3, [r2, r3]
 8003a96:	fa21 f303 	lsr.w	r3, r1, r3
 8003a9a:	4a08      	ldr	r2, [pc, #32]	; (8003abc <HAL_RCC_ClockConfig+0x2f0>)
 8003a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <HAL_RCC_ClockConfig+0x2f4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fd fc66 	bl	8001374 <HAL_InitTick>
  
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3778      	adds	r7, #120	; 0x78
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	08005198 	.word	0x08005198
 8003abc:	20000000 	.word	0x20000000
 8003ac0:	20000004 	.word	0x20000004

08003ac4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b08b      	sub	sp, #44	; 0x2c
 8003ac8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ade:	4b29      	ldr	r3, [pc, #164]	; (8003b84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d002      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x30>
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d003      	beq.n	8003afa <HAL_RCC_GetSysClockFreq+0x36>
 8003af2:	e03c      	b.n	8003b6e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003af4:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003af6:	623b      	str	r3, [r7, #32]
      break;
 8003af8:	e03c      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b00:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b04:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	fa92 f2a2 	rbit	r2, r2
 8003b0c:	607a      	str	r2, [r7, #4]
  return result;
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	fab2 f282 	clz	r2, r2
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	40d3      	lsrs	r3, r2
 8003b18:	4a1c      	ldr	r2, [pc, #112]	; (8003b8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b1a:	5cd3      	ldrb	r3, [r2, r3]
 8003b1c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b1e:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	220f      	movs	r2, #15
 8003b28:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	fa92 f2a2 	rbit	r2, r2
 8003b30:	60fa      	str	r2, [r7, #12]
  return result;
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	fab2 f282 	clz	r2, r2
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	40d3      	lsrs	r3, r2
 8003b3c:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b3e:	5cd3      	ldrb	r3, [r2, r3]
 8003b40:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d008      	beq.n	8003b5e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b4c:	4a0e      	ldr	r2, [pc, #56]	; (8003b88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5c:	e004      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	4a0c      	ldr	r2, [pc, #48]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b62:	fb02 f303 	mul.w	r3, r2, r3
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	623b      	str	r3, [r7, #32]
      break;
 8003b6c:	e002      	b.n	8003b74 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b70:	623b      	str	r3, [r7, #32]
      break;
 8003b72:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b74:	6a3b      	ldr	r3, [r7, #32]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	372c      	adds	r7, #44	; 0x2c
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	007a1200 	.word	0x007a1200
 8003b8c:	080051a8 	.word	0x080051a8
 8003b90:	080051b8 	.word	0x080051b8
 8003b94:	003d0900 	.word	0x003d0900

08003b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b092      	sub	sp, #72	; 0x48
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80cd 	beq.w	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bbc:	4b86      	ldr	r3, [pc, #536]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10e      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc8:	4b83      	ldr	r3, [pc, #524]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	4a82      	ldr	r2, [pc, #520]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	61d3      	str	r3, [r2, #28]
 8003bd4:	4b80      	ldr	r3, [pc, #512]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	60bb      	str	r3, [r7, #8]
 8003bde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b7d      	ldr	r3, [pc, #500]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d118      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf2:	4b7a      	ldr	r3, [pc, #488]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a79      	ldr	r2, [pc, #484]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfe:	f7fd fbfd 	bl	80013fc <HAL_GetTick>
 8003c02:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	e008      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c06:	f7fd fbf9 	bl	80013fc <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b64      	cmp	r3, #100	; 0x64
 8003c12:	d901      	bls.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e0db      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c18:	4b70      	ldr	r3, [pc, #448]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c24:	4b6c      	ldr	r3, [pc, #432]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d07d      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d076      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c42:	4b65      	ldr	r3, [pc, #404]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c50:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	fa93 f3a3 	rbit	r3, r3
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c5c:	fab3 f383 	clz	r3, r3
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	4b5e      	ldr	r3, [pc, #376]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c78:	fa93 f3a3 	rbit	r3, r3
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c80:	fab3 f383 	clz	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	4b55      	ldr	r3, [pc, #340]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2300      	movs	r3, #0
 8003c92:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c94:	4a50      	ldr	r2, [pc, #320]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c98:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d045      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fd fbaa 	bl	80013fc <HAL_GetTick>
 8003ca8:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cac:	f7fd fba6 	bl	80013fc <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e086      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	fa93 f3a3 	rbit	r3, r3
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cce:	2302      	movs	r3, #2
 8003cd0:	623b      	str	r3, [r7, #32]
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	61fb      	str	r3, [r7, #28]
  return result;
 8003cda:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cdc:	fab3 f383 	clz	r3, r3
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	095b      	lsrs	r3, r3, #5
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f043 0302 	orr.w	r3, r3, #2
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d102      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003cf0:	4b39      	ldr	r3, [pc, #228]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	e007      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	fa93 f3a3 	rbit	r3, r3
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2202      	movs	r2, #2
 8003d08:	613a      	str	r2, [r7, #16]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	fa92 f2a2 	rbit	r2, r2
 8003d10:	60fa      	str	r2, [r7, #12]
  return result;
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	fab2 f282 	clz	r2, r2
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	f002 021f 	and.w	r2, r2, #31
 8003d24:	2101      	movs	r1, #1
 8003d26:	fa01 f202 	lsl.w	r2, r1, r2
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0bd      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d30:	4b29      	ldr	r3, [pc, #164]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	4926      	ldr	r1, [pc, #152]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d42:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d105      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d4a:	4b23      	ldr	r3, [pc, #140]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	4a22      	ldr	r2, [pc, #136]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d54:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d008      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d62:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	f023 0203 	bic.w	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	491a      	ldr	r1, [pc, #104]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d80:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	f023 0210 	bic.w	r2, r3, #16
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4912      	ldr	r1, [pc, #72]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d9e:	4b0e      	ldr	r3, [pc, #56]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	490b      	ldr	r1, [pc, #44]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003dbc:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	4903      	ldr	r1, [pc, #12]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3748      	adds	r7, #72	; 0x48
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	10908100 	.word	0x10908100
 8003de4:	00000000 	.word	0x00000000

08003de8 <log>:
 8003de8:	b538      	push	{r3, r4, r5, lr}
 8003dea:	ed2d 8b02 	vpush	{d8}
 8003dee:	ec55 4b10 	vmov	r4, r5, d0
 8003df2:	f000 f839 	bl	8003e68 <__ieee754_log>
 8003df6:	4622      	mov	r2, r4
 8003df8:	462b      	mov	r3, r5
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	4629      	mov	r1, r5
 8003dfe:	eeb0 8a40 	vmov.f32	s16, s0
 8003e02:	eef0 8a60 	vmov.f32	s17, s1
 8003e06:	f7fc fe89 	bl	8000b1c <__aeabi_dcmpun>
 8003e0a:	b998      	cbnz	r0, 8003e34 <log+0x4c>
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2300      	movs	r3, #0
 8003e10:	4620      	mov	r0, r4
 8003e12:	4629      	mov	r1, r5
 8003e14:	f7fc fe78 	bl	8000b08 <__aeabi_dcmpgt>
 8003e18:	b960      	cbnz	r0, 8003e34 <log+0x4c>
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	4620      	mov	r0, r4
 8003e20:	4629      	mov	r1, r5
 8003e22:	f7fc fe49 	bl	8000ab8 <__aeabi_dcmpeq>
 8003e26:	b160      	cbz	r0, 8003e42 <log+0x5a>
 8003e28:	f000 f9e2 	bl	80041f0 <__errno>
 8003e2c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8003e58 <log+0x70>
 8003e30:	2322      	movs	r3, #34	; 0x22
 8003e32:	6003      	str	r3, [r0, #0]
 8003e34:	eeb0 0a48 	vmov.f32	s0, s16
 8003e38:	eef0 0a68 	vmov.f32	s1, s17
 8003e3c:	ecbd 8b02 	vpop	{d8}
 8003e40:	bd38      	pop	{r3, r4, r5, pc}
 8003e42:	f000 f9d5 	bl	80041f0 <__errno>
 8003e46:	ecbd 8b02 	vpop	{d8}
 8003e4a:	2321      	movs	r3, #33	; 0x21
 8003e4c:	6003      	str	r3, [r0, #0]
 8003e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e52:	4803      	ldr	r0, [pc, #12]	; (8003e60 <log+0x78>)
 8003e54:	f000 b9c4 	b.w	80041e0 <nan>
 8003e58:	00000000 	.word	0x00000000
 8003e5c:	fff00000 	.word	0xfff00000
 8003e60:	08005231 	.word	0x08005231
 8003e64:	00000000 	.word	0x00000000

08003e68 <__ieee754_log>:
 8003e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e6c:	ec51 0b10 	vmov	r0, r1, d0
 8003e70:	ed2d 8b04 	vpush	{d8-d9}
 8003e74:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003e78:	b083      	sub	sp, #12
 8003e7a:	460d      	mov	r5, r1
 8003e7c:	da29      	bge.n	8003ed2 <__ieee754_log+0x6a>
 8003e7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003e82:	4303      	orrs	r3, r0
 8003e84:	ee10 2a10 	vmov	r2, s0
 8003e88:	d10c      	bne.n	8003ea4 <__ieee754_log+0x3c>
 8003e8a:	49cf      	ldr	r1, [pc, #828]	; (80041c8 <__ieee754_log+0x360>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2000      	movs	r0, #0
 8003e92:	f7fc fcd3 	bl	800083c <__aeabi_ddiv>
 8003e96:	ec41 0b10 	vmov	d0, r0, r1
 8003e9a:	b003      	add	sp, #12
 8003e9c:	ecbd 8b04 	vpop	{d8-d9}
 8003ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea4:	2900      	cmp	r1, #0
 8003ea6:	da05      	bge.n	8003eb4 <__ieee754_log+0x4c>
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	f7fc f9e5 	bl	8000278 <__aeabi_dsub>
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e7ee      	b.n	8003e92 <__ieee754_log+0x2a>
 8003eb4:	4bc5      	ldr	r3, [pc, #788]	; (80041cc <__ieee754_log+0x364>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f7fc fb96 	bl	80005e8 <__aeabi_dmul>
 8003ebc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8003ec0:	460d      	mov	r5, r1
 8003ec2:	4ac3      	ldr	r2, [pc, #780]	; (80041d0 <__ieee754_log+0x368>)
 8003ec4:	4295      	cmp	r5, r2
 8003ec6:	dd06      	ble.n	8003ed6 <__ieee754_log+0x6e>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	f7fc f9d6 	bl	800027c <__adddf3>
 8003ed0:	e7e1      	b.n	8003e96 <__ieee754_log+0x2e>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e7f5      	b.n	8003ec2 <__ieee754_log+0x5a>
 8003ed6:	152c      	asrs	r4, r5, #20
 8003ed8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003edc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8003ee0:	441c      	add	r4, r3
 8003ee2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8003ee6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8003eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eee:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8003ef2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8003ef6:	ea42 0105 	orr.w	r1, r2, r5
 8003efa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8003efe:	2200      	movs	r2, #0
 8003f00:	4bb4      	ldr	r3, [pc, #720]	; (80041d4 <__ieee754_log+0x36c>)
 8003f02:	f7fc f9b9 	bl	8000278 <__aeabi_dsub>
 8003f06:	1cab      	adds	r3, r5, #2
 8003f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	4682      	mov	sl, r0
 8003f10:	468b      	mov	fp, r1
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	dc53      	bgt.n	8003fc0 <__ieee754_log+0x158>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f7fc fdcd 	bl	8000ab8 <__aeabi_dcmpeq>
 8003f1e:	b1d0      	cbz	r0, 8003f56 <__ieee754_log+0xee>
 8003f20:	2c00      	cmp	r4, #0
 8003f22:	f000 8122 	beq.w	800416a <__ieee754_log+0x302>
 8003f26:	4620      	mov	r0, r4
 8003f28:	f7fc faf4 	bl	8000514 <__aeabi_i2d>
 8003f2c:	a390      	add	r3, pc, #576	; (adr r3, 8004170 <__ieee754_log+0x308>)
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	4606      	mov	r6, r0
 8003f34:	460f      	mov	r7, r1
 8003f36:	f7fc fb57 	bl	80005e8 <__aeabi_dmul>
 8003f3a:	a38f      	add	r3, pc, #572	; (adr r3, 8004178 <__ieee754_log+0x310>)
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	4604      	mov	r4, r0
 8003f42:	460d      	mov	r5, r1
 8003f44:	4630      	mov	r0, r6
 8003f46:	4639      	mov	r1, r7
 8003f48:	f7fc fb4e 	bl	80005e8 <__aeabi_dmul>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4620      	mov	r0, r4
 8003f52:	4629      	mov	r1, r5
 8003f54:	e7ba      	b.n	8003ecc <__ieee754_log+0x64>
 8003f56:	a38a      	add	r3, pc, #552	; (adr r3, 8004180 <__ieee754_log+0x318>)
 8003f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5c:	4650      	mov	r0, sl
 8003f5e:	4659      	mov	r1, fp
 8003f60:	f7fc fb42 	bl	80005e8 <__aeabi_dmul>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	2000      	movs	r0, #0
 8003f6a:	499b      	ldr	r1, [pc, #620]	; (80041d8 <__ieee754_log+0x370>)
 8003f6c:	f7fc f984 	bl	8000278 <__aeabi_dsub>
 8003f70:	4652      	mov	r2, sl
 8003f72:	4606      	mov	r6, r0
 8003f74:	460f      	mov	r7, r1
 8003f76:	465b      	mov	r3, fp
 8003f78:	4650      	mov	r0, sl
 8003f7a:	4659      	mov	r1, fp
 8003f7c:	f7fc fb34 	bl	80005e8 <__aeabi_dmul>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4630      	mov	r0, r6
 8003f86:	4639      	mov	r1, r7
 8003f88:	f7fc fb2e 	bl	80005e8 <__aeabi_dmul>
 8003f8c:	4606      	mov	r6, r0
 8003f8e:	460f      	mov	r7, r1
 8003f90:	b914      	cbnz	r4, 8003f98 <__ieee754_log+0x130>
 8003f92:	4632      	mov	r2, r6
 8003f94:	463b      	mov	r3, r7
 8003f96:	e0a2      	b.n	80040de <__ieee754_log+0x276>
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f7fc fabb 	bl	8000514 <__aeabi_i2d>
 8003f9e:	a374      	add	r3, pc, #464	; (adr r3, 8004170 <__ieee754_log+0x308>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	4680      	mov	r8, r0
 8003fa6:	4689      	mov	r9, r1
 8003fa8:	f7fc fb1e 	bl	80005e8 <__aeabi_dmul>
 8003fac:	a372      	add	r3, pc, #456	; (adr r3, 8004178 <__ieee754_log+0x310>)
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	460d      	mov	r5, r1
 8003fb6:	4640      	mov	r0, r8
 8003fb8:	4649      	mov	r1, r9
 8003fba:	f7fc fb15 	bl	80005e8 <__aeabi_dmul>
 8003fbe:	e0a7      	b.n	8004110 <__ieee754_log+0x2a8>
 8003fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003fc4:	f7fc f95a 	bl	800027c <__adddf3>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4650      	mov	r0, sl
 8003fce:	4659      	mov	r1, fp
 8003fd0:	f7fc fc34 	bl	800083c <__aeabi_ddiv>
 8003fd4:	ec41 0b18 	vmov	d8, r0, r1
 8003fd8:	4620      	mov	r0, r4
 8003fda:	f7fc fa9b 	bl	8000514 <__aeabi_i2d>
 8003fde:	ec53 2b18 	vmov	r2, r3, d8
 8003fe2:	ec41 0b19 	vmov	d9, r0, r1
 8003fe6:	ec51 0b18 	vmov	r0, r1, d8
 8003fea:	f7fc fafd 	bl	80005e8 <__aeabi_dmul>
 8003fee:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8003ff2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4680      	mov	r8, r0
 8003ffe:	4689      	mov	r9, r1
 8004000:	f7fc faf2 	bl	80005e8 <__aeabi_dmul>
 8004004:	a360      	add	r3, pc, #384	; (adr r3, 8004188 <__ieee754_log+0x320>)
 8004006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400a:	4606      	mov	r6, r0
 800400c:	460f      	mov	r7, r1
 800400e:	f7fc faeb 	bl	80005e8 <__aeabi_dmul>
 8004012:	a35f      	add	r3, pc, #380	; (adr r3, 8004190 <__ieee754_log+0x328>)
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f7fc f930 	bl	800027c <__adddf3>
 800401c:	4632      	mov	r2, r6
 800401e:	463b      	mov	r3, r7
 8004020:	f7fc fae2 	bl	80005e8 <__aeabi_dmul>
 8004024:	a35c      	add	r3, pc, #368	; (adr r3, 8004198 <__ieee754_log+0x330>)
 8004026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402a:	f7fc f927 	bl	800027c <__adddf3>
 800402e:	4632      	mov	r2, r6
 8004030:	463b      	mov	r3, r7
 8004032:	f7fc fad9 	bl	80005e8 <__aeabi_dmul>
 8004036:	a35a      	add	r3, pc, #360	; (adr r3, 80041a0 <__ieee754_log+0x338>)
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	f7fc f91e 	bl	800027c <__adddf3>
 8004040:	4642      	mov	r2, r8
 8004042:	464b      	mov	r3, r9
 8004044:	f7fc fad0 	bl	80005e8 <__aeabi_dmul>
 8004048:	a357      	add	r3, pc, #348	; (adr r3, 80041a8 <__ieee754_log+0x340>)
 800404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404e:	4680      	mov	r8, r0
 8004050:	4689      	mov	r9, r1
 8004052:	4630      	mov	r0, r6
 8004054:	4639      	mov	r1, r7
 8004056:	f7fc fac7 	bl	80005e8 <__aeabi_dmul>
 800405a:	a355      	add	r3, pc, #340	; (adr r3, 80041b0 <__ieee754_log+0x348>)
 800405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004060:	f7fc f90c 	bl	800027c <__adddf3>
 8004064:	4632      	mov	r2, r6
 8004066:	463b      	mov	r3, r7
 8004068:	f7fc fabe 	bl	80005e8 <__aeabi_dmul>
 800406c:	a352      	add	r3, pc, #328	; (adr r3, 80041b8 <__ieee754_log+0x350>)
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	f7fc f903 	bl	800027c <__adddf3>
 8004076:	4632      	mov	r2, r6
 8004078:	463b      	mov	r3, r7
 800407a:	f7fc fab5 	bl	80005e8 <__aeabi_dmul>
 800407e:	460b      	mov	r3, r1
 8004080:	4602      	mov	r2, r0
 8004082:	4649      	mov	r1, r9
 8004084:	4640      	mov	r0, r8
 8004086:	f7fc f8f9 	bl	800027c <__adddf3>
 800408a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800408e:	9b01      	ldr	r3, [sp, #4]
 8004090:	3551      	adds	r5, #81	; 0x51
 8004092:	431d      	orrs	r5, r3
 8004094:	2d00      	cmp	r5, #0
 8004096:	4680      	mov	r8, r0
 8004098:	4689      	mov	r9, r1
 800409a:	dd48      	ble.n	800412e <__ieee754_log+0x2c6>
 800409c:	4b4e      	ldr	r3, [pc, #312]	; (80041d8 <__ieee754_log+0x370>)
 800409e:	2200      	movs	r2, #0
 80040a0:	4650      	mov	r0, sl
 80040a2:	4659      	mov	r1, fp
 80040a4:	f7fc faa0 	bl	80005e8 <__aeabi_dmul>
 80040a8:	4652      	mov	r2, sl
 80040aa:	465b      	mov	r3, fp
 80040ac:	f7fc fa9c 	bl	80005e8 <__aeabi_dmul>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4606      	mov	r6, r0
 80040b6:	460f      	mov	r7, r1
 80040b8:	4640      	mov	r0, r8
 80040ba:	4649      	mov	r1, r9
 80040bc:	f7fc f8de 	bl	800027c <__adddf3>
 80040c0:	ec53 2b18 	vmov	r2, r3, d8
 80040c4:	f7fc fa90 	bl	80005e8 <__aeabi_dmul>
 80040c8:	4680      	mov	r8, r0
 80040ca:	4689      	mov	r9, r1
 80040cc:	b964      	cbnz	r4, 80040e8 <__ieee754_log+0x280>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4630      	mov	r0, r6
 80040d4:	4639      	mov	r1, r7
 80040d6:	f7fc f8cf 	bl	8000278 <__aeabi_dsub>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4650      	mov	r0, sl
 80040e0:	4659      	mov	r1, fp
 80040e2:	f7fc f8c9 	bl	8000278 <__aeabi_dsub>
 80040e6:	e6d6      	b.n	8003e96 <__ieee754_log+0x2e>
 80040e8:	a321      	add	r3, pc, #132	; (adr r3, 8004170 <__ieee754_log+0x308>)
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	ec51 0b19 	vmov	r0, r1, d9
 80040f2:	f7fc fa79 	bl	80005e8 <__aeabi_dmul>
 80040f6:	a320      	add	r3, pc, #128	; (adr r3, 8004178 <__ieee754_log+0x310>)
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	4604      	mov	r4, r0
 80040fe:	460d      	mov	r5, r1
 8004100:	ec51 0b19 	vmov	r0, r1, d9
 8004104:	f7fc fa70 	bl	80005e8 <__aeabi_dmul>
 8004108:	4642      	mov	r2, r8
 800410a:	464b      	mov	r3, r9
 800410c:	f7fc f8b6 	bl	800027c <__adddf3>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4630      	mov	r0, r6
 8004116:	4639      	mov	r1, r7
 8004118:	f7fc f8ae 	bl	8000278 <__aeabi_dsub>
 800411c:	4652      	mov	r2, sl
 800411e:	465b      	mov	r3, fp
 8004120:	f7fc f8aa 	bl	8000278 <__aeabi_dsub>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4620      	mov	r0, r4
 800412a:	4629      	mov	r1, r5
 800412c:	e7d9      	b.n	80040e2 <__ieee754_log+0x27a>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4650      	mov	r0, sl
 8004134:	4659      	mov	r1, fp
 8004136:	f7fc f89f 	bl	8000278 <__aeabi_dsub>
 800413a:	ec53 2b18 	vmov	r2, r3, d8
 800413e:	f7fc fa53 	bl	80005e8 <__aeabi_dmul>
 8004142:	4606      	mov	r6, r0
 8004144:	460f      	mov	r7, r1
 8004146:	2c00      	cmp	r4, #0
 8004148:	f43f af23 	beq.w	8003f92 <__ieee754_log+0x12a>
 800414c:	a308      	add	r3, pc, #32	; (adr r3, 8004170 <__ieee754_log+0x308>)
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	ec51 0b19 	vmov	r0, r1, d9
 8004156:	f7fc fa47 	bl	80005e8 <__aeabi_dmul>
 800415a:	a307      	add	r3, pc, #28	; (adr r3, 8004178 <__ieee754_log+0x310>)
 800415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004160:	4604      	mov	r4, r0
 8004162:	460d      	mov	r5, r1
 8004164:	ec51 0b19 	vmov	r0, r1, d9
 8004168:	e727      	b.n	8003fba <__ieee754_log+0x152>
 800416a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80041c0 <__ieee754_log+0x358>
 800416e:	e694      	b.n	8003e9a <__ieee754_log+0x32>
 8004170:	fee00000 	.word	0xfee00000
 8004174:	3fe62e42 	.word	0x3fe62e42
 8004178:	35793c76 	.word	0x35793c76
 800417c:	3dea39ef 	.word	0x3dea39ef
 8004180:	55555555 	.word	0x55555555
 8004184:	3fd55555 	.word	0x3fd55555
 8004188:	df3e5244 	.word	0xdf3e5244
 800418c:	3fc2f112 	.word	0x3fc2f112
 8004190:	96cb03de 	.word	0x96cb03de
 8004194:	3fc74664 	.word	0x3fc74664
 8004198:	94229359 	.word	0x94229359
 800419c:	3fd24924 	.word	0x3fd24924
 80041a0:	55555593 	.word	0x55555593
 80041a4:	3fe55555 	.word	0x3fe55555
 80041a8:	d078c69f 	.word	0xd078c69f
 80041ac:	3fc39a09 	.word	0x3fc39a09
 80041b0:	1d8e78af 	.word	0x1d8e78af
 80041b4:	3fcc71c5 	.word	0x3fcc71c5
 80041b8:	9997fa04 	.word	0x9997fa04
 80041bc:	3fd99999 	.word	0x3fd99999
	...
 80041c8:	c3500000 	.word	0xc3500000
 80041cc:	43500000 	.word	0x43500000
 80041d0:	7fefffff 	.word	0x7fefffff
 80041d4:	3ff00000 	.word	0x3ff00000
 80041d8:	3fe00000 	.word	0x3fe00000
 80041dc:	00000000 	.word	0x00000000

080041e0 <nan>:
 80041e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80041e8 <nan+0x8>
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	00000000 	.word	0x00000000
 80041ec:	7ff80000 	.word	0x7ff80000

080041f0 <__errno>:
 80041f0:	4b01      	ldr	r3, [pc, #4]	; (80041f8 <__errno+0x8>)
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	2000000c 	.word	0x2000000c

080041fc <__libc_init_array>:
 80041fc:	b570      	push	{r4, r5, r6, lr}
 80041fe:	4d0d      	ldr	r5, [pc, #52]	; (8004234 <__libc_init_array+0x38>)
 8004200:	4c0d      	ldr	r4, [pc, #52]	; (8004238 <__libc_init_array+0x3c>)
 8004202:	1b64      	subs	r4, r4, r5
 8004204:	10a4      	asrs	r4, r4, #2
 8004206:	2600      	movs	r6, #0
 8004208:	42a6      	cmp	r6, r4
 800420a:	d109      	bne.n	8004220 <__libc_init_array+0x24>
 800420c:	4d0b      	ldr	r5, [pc, #44]	; (800423c <__libc_init_array+0x40>)
 800420e:	4c0c      	ldr	r4, [pc, #48]	; (8004240 <__libc_init_array+0x44>)
 8004210:	f000 ffae 	bl	8005170 <_init>
 8004214:	1b64      	subs	r4, r4, r5
 8004216:	10a4      	asrs	r4, r4, #2
 8004218:	2600      	movs	r6, #0
 800421a:	42a6      	cmp	r6, r4
 800421c:	d105      	bne.n	800422a <__libc_init_array+0x2e>
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	f855 3b04 	ldr.w	r3, [r5], #4
 8004224:	4798      	blx	r3
 8004226:	3601      	adds	r6, #1
 8004228:	e7ee      	b.n	8004208 <__libc_init_array+0xc>
 800422a:	f855 3b04 	ldr.w	r3, [r5], #4
 800422e:	4798      	blx	r3
 8004230:	3601      	adds	r6, #1
 8004232:	e7f2      	b.n	800421a <__libc_init_array+0x1e>
 8004234:	08005260 	.word	0x08005260
 8004238:	08005260 	.word	0x08005260
 800423c:	08005260 	.word	0x08005260
 8004240:	08005264 	.word	0x08005264

08004244 <memset>:
 8004244:	4402      	add	r2, r0
 8004246:	4603      	mov	r3, r0
 8004248:	4293      	cmp	r3, r2
 800424a:	d100      	bne.n	800424e <memset+0xa>
 800424c:	4770      	bx	lr
 800424e:	f803 1b01 	strb.w	r1, [r3], #1
 8004252:	e7f9      	b.n	8004248 <memset+0x4>

08004254 <iprintf>:
 8004254:	b40f      	push	{r0, r1, r2, r3}
 8004256:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <iprintf+0x2c>)
 8004258:	b513      	push	{r0, r1, r4, lr}
 800425a:	681c      	ldr	r4, [r3, #0]
 800425c:	b124      	cbz	r4, 8004268 <iprintf+0x14>
 800425e:	69a3      	ldr	r3, [r4, #24]
 8004260:	b913      	cbnz	r3, 8004268 <iprintf+0x14>
 8004262:	4620      	mov	r0, r4
 8004264:	f000 f866 	bl	8004334 <__sinit>
 8004268:	ab05      	add	r3, sp, #20
 800426a:	9a04      	ldr	r2, [sp, #16]
 800426c:	68a1      	ldr	r1, [r4, #8]
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	4620      	mov	r0, r4
 8004272:	f000 f9bd 	bl	80045f0 <_vfiprintf_r>
 8004276:	b002      	add	sp, #8
 8004278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800427c:	b004      	add	sp, #16
 800427e:	4770      	bx	lr
 8004280:	2000000c 	.word	0x2000000c

08004284 <std>:
 8004284:	2300      	movs	r3, #0
 8004286:	b510      	push	{r4, lr}
 8004288:	4604      	mov	r4, r0
 800428a:	e9c0 3300 	strd	r3, r3, [r0]
 800428e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004292:	6083      	str	r3, [r0, #8]
 8004294:	8181      	strh	r1, [r0, #12]
 8004296:	6643      	str	r3, [r0, #100]	; 0x64
 8004298:	81c2      	strh	r2, [r0, #14]
 800429a:	6183      	str	r3, [r0, #24]
 800429c:	4619      	mov	r1, r3
 800429e:	2208      	movs	r2, #8
 80042a0:	305c      	adds	r0, #92	; 0x5c
 80042a2:	f7ff ffcf 	bl	8004244 <memset>
 80042a6:	4b05      	ldr	r3, [pc, #20]	; (80042bc <std+0x38>)
 80042a8:	6263      	str	r3, [r4, #36]	; 0x24
 80042aa:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <std+0x3c>)
 80042ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <std+0x40>)
 80042b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042b2:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <std+0x44>)
 80042b4:	6224      	str	r4, [r4, #32]
 80042b6:	6323      	str	r3, [r4, #48]	; 0x30
 80042b8:	bd10      	pop	{r4, pc}
 80042ba:	bf00      	nop
 80042bc:	08004b99 	.word	0x08004b99
 80042c0:	08004bbb 	.word	0x08004bbb
 80042c4:	08004bf3 	.word	0x08004bf3
 80042c8:	08004c17 	.word	0x08004c17

080042cc <_cleanup_r>:
 80042cc:	4901      	ldr	r1, [pc, #4]	; (80042d4 <_cleanup_r+0x8>)
 80042ce:	f000 b8af 	b.w	8004430 <_fwalk_reent>
 80042d2:	bf00      	nop
 80042d4:	08004ef1 	.word	0x08004ef1

080042d8 <__sfmoreglue>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	2268      	movs	r2, #104	; 0x68
 80042dc:	1e4d      	subs	r5, r1, #1
 80042de:	4355      	muls	r5, r2
 80042e0:	460e      	mov	r6, r1
 80042e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80042e6:	f000 f8e5 	bl	80044b4 <_malloc_r>
 80042ea:	4604      	mov	r4, r0
 80042ec:	b140      	cbz	r0, 8004300 <__sfmoreglue+0x28>
 80042ee:	2100      	movs	r1, #0
 80042f0:	e9c0 1600 	strd	r1, r6, [r0]
 80042f4:	300c      	adds	r0, #12
 80042f6:	60a0      	str	r0, [r4, #8]
 80042f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80042fc:	f7ff ffa2 	bl	8004244 <memset>
 8004300:	4620      	mov	r0, r4
 8004302:	bd70      	pop	{r4, r5, r6, pc}

08004304 <__sfp_lock_acquire>:
 8004304:	4801      	ldr	r0, [pc, #4]	; (800430c <__sfp_lock_acquire+0x8>)
 8004306:	f000 b8b3 	b.w	8004470 <__retarget_lock_acquire_recursive>
 800430a:	bf00      	nop
 800430c:	200000e9 	.word	0x200000e9

08004310 <__sfp_lock_release>:
 8004310:	4801      	ldr	r0, [pc, #4]	; (8004318 <__sfp_lock_release+0x8>)
 8004312:	f000 b8ae 	b.w	8004472 <__retarget_lock_release_recursive>
 8004316:	bf00      	nop
 8004318:	200000e9 	.word	0x200000e9

0800431c <__sinit_lock_acquire>:
 800431c:	4801      	ldr	r0, [pc, #4]	; (8004324 <__sinit_lock_acquire+0x8>)
 800431e:	f000 b8a7 	b.w	8004470 <__retarget_lock_acquire_recursive>
 8004322:	bf00      	nop
 8004324:	200000ea 	.word	0x200000ea

08004328 <__sinit_lock_release>:
 8004328:	4801      	ldr	r0, [pc, #4]	; (8004330 <__sinit_lock_release+0x8>)
 800432a:	f000 b8a2 	b.w	8004472 <__retarget_lock_release_recursive>
 800432e:	bf00      	nop
 8004330:	200000ea 	.word	0x200000ea

08004334 <__sinit>:
 8004334:	b510      	push	{r4, lr}
 8004336:	4604      	mov	r4, r0
 8004338:	f7ff fff0 	bl	800431c <__sinit_lock_acquire>
 800433c:	69a3      	ldr	r3, [r4, #24]
 800433e:	b11b      	cbz	r3, 8004348 <__sinit+0x14>
 8004340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004344:	f7ff bff0 	b.w	8004328 <__sinit_lock_release>
 8004348:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800434c:	6523      	str	r3, [r4, #80]	; 0x50
 800434e:	4b13      	ldr	r3, [pc, #76]	; (800439c <__sinit+0x68>)
 8004350:	4a13      	ldr	r2, [pc, #76]	; (80043a0 <__sinit+0x6c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	62a2      	str	r2, [r4, #40]	; 0x28
 8004356:	42a3      	cmp	r3, r4
 8004358:	bf04      	itt	eq
 800435a:	2301      	moveq	r3, #1
 800435c:	61a3      	streq	r3, [r4, #24]
 800435e:	4620      	mov	r0, r4
 8004360:	f000 f820 	bl	80043a4 <__sfp>
 8004364:	6060      	str	r0, [r4, #4]
 8004366:	4620      	mov	r0, r4
 8004368:	f000 f81c 	bl	80043a4 <__sfp>
 800436c:	60a0      	str	r0, [r4, #8]
 800436e:	4620      	mov	r0, r4
 8004370:	f000 f818 	bl	80043a4 <__sfp>
 8004374:	2200      	movs	r2, #0
 8004376:	60e0      	str	r0, [r4, #12]
 8004378:	2104      	movs	r1, #4
 800437a:	6860      	ldr	r0, [r4, #4]
 800437c:	f7ff ff82 	bl	8004284 <std>
 8004380:	68a0      	ldr	r0, [r4, #8]
 8004382:	2201      	movs	r2, #1
 8004384:	2109      	movs	r1, #9
 8004386:	f7ff ff7d 	bl	8004284 <std>
 800438a:	68e0      	ldr	r0, [r4, #12]
 800438c:	2202      	movs	r2, #2
 800438e:	2112      	movs	r1, #18
 8004390:	f7ff ff78 	bl	8004284 <std>
 8004394:	2301      	movs	r3, #1
 8004396:	61a3      	str	r3, [r4, #24]
 8004398:	e7d2      	b.n	8004340 <__sinit+0xc>
 800439a:	bf00      	nop
 800439c:	080051c8 	.word	0x080051c8
 80043a0:	080042cd 	.word	0x080042cd

080043a4 <__sfp>:
 80043a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a6:	4607      	mov	r7, r0
 80043a8:	f7ff ffac 	bl	8004304 <__sfp_lock_acquire>
 80043ac:	4b1e      	ldr	r3, [pc, #120]	; (8004428 <__sfp+0x84>)
 80043ae:	681e      	ldr	r6, [r3, #0]
 80043b0:	69b3      	ldr	r3, [r6, #24]
 80043b2:	b913      	cbnz	r3, 80043ba <__sfp+0x16>
 80043b4:	4630      	mov	r0, r6
 80043b6:	f7ff ffbd 	bl	8004334 <__sinit>
 80043ba:	3648      	adds	r6, #72	; 0x48
 80043bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	d503      	bpl.n	80043cc <__sfp+0x28>
 80043c4:	6833      	ldr	r3, [r6, #0]
 80043c6:	b30b      	cbz	r3, 800440c <__sfp+0x68>
 80043c8:	6836      	ldr	r6, [r6, #0]
 80043ca:	e7f7      	b.n	80043bc <__sfp+0x18>
 80043cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043d0:	b9d5      	cbnz	r5, 8004408 <__sfp+0x64>
 80043d2:	4b16      	ldr	r3, [pc, #88]	; (800442c <__sfp+0x88>)
 80043d4:	60e3      	str	r3, [r4, #12]
 80043d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80043da:	6665      	str	r5, [r4, #100]	; 0x64
 80043dc:	f000 f847 	bl	800446e <__retarget_lock_init_recursive>
 80043e0:	f7ff ff96 	bl	8004310 <__sfp_lock_release>
 80043e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80043e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80043ec:	6025      	str	r5, [r4, #0]
 80043ee:	61a5      	str	r5, [r4, #24]
 80043f0:	2208      	movs	r2, #8
 80043f2:	4629      	mov	r1, r5
 80043f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043f8:	f7ff ff24 	bl	8004244 <memset>
 80043fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004400:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004404:	4620      	mov	r0, r4
 8004406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004408:	3468      	adds	r4, #104	; 0x68
 800440a:	e7d9      	b.n	80043c0 <__sfp+0x1c>
 800440c:	2104      	movs	r1, #4
 800440e:	4638      	mov	r0, r7
 8004410:	f7ff ff62 	bl	80042d8 <__sfmoreglue>
 8004414:	4604      	mov	r4, r0
 8004416:	6030      	str	r0, [r6, #0]
 8004418:	2800      	cmp	r0, #0
 800441a:	d1d5      	bne.n	80043c8 <__sfp+0x24>
 800441c:	f7ff ff78 	bl	8004310 <__sfp_lock_release>
 8004420:	230c      	movs	r3, #12
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	e7ee      	b.n	8004404 <__sfp+0x60>
 8004426:	bf00      	nop
 8004428:	080051c8 	.word	0x080051c8
 800442c:	ffff0001 	.word	0xffff0001

08004430 <_fwalk_reent>:
 8004430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004434:	4606      	mov	r6, r0
 8004436:	4688      	mov	r8, r1
 8004438:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800443c:	2700      	movs	r7, #0
 800443e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004442:	f1b9 0901 	subs.w	r9, r9, #1
 8004446:	d505      	bpl.n	8004454 <_fwalk_reent+0x24>
 8004448:	6824      	ldr	r4, [r4, #0]
 800444a:	2c00      	cmp	r4, #0
 800444c:	d1f7      	bne.n	800443e <_fwalk_reent+0xe>
 800444e:	4638      	mov	r0, r7
 8004450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004454:	89ab      	ldrh	r3, [r5, #12]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d907      	bls.n	800446a <_fwalk_reent+0x3a>
 800445a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800445e:	3301      	adds	r3, #1
 8004460:	d003      	beq.n	800446a <_fwalk_reent+0x3a>
 8004462:	4629      	mov	r1, r5
 8004464:	4630      	mov	r0, r6
 8004466:	47c0      	blx	r8
 8004468:	4307      	orrs	r7, r0
 800446a:	3568      	adds	r5, #104	; 0x68
 800446c:	e7e9      	b.n	8004442 <_fwalk_reent+0x12>

0800446e <__retarget_lock_init_recursive>:
 800446e:	4770      	bx	lr

08004470 <__retarget_lock_acquire_recursive>:
 8004470:	4770      	bx	lr

08004472 <__retarget_lock_release_recursive>:
 8004472:	4770      	bx	lr

08004474 <sbrk_aligned>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	4e0e      	ldr	r6, [pc, #56]	; (80044b0 <sbrk_aligned+0x3c>)
 8004478:	460c      	mov	r4, r1
 800447a:	6831      	ldr	r1, [r6, #0]
 800447c:	4605      	mov	r5, r0
 800447e:	b911      	cbnz	r1, 8004486 <sbrk_aligned+0x12>
 8004480:	f000 fb7a 	bl	8004b78 <_sbrk_r>
 8004484:	6030      	str	r0, [r6, #0]
 8004486:	4621      	mov	r1, r4
 8004488:	4628      	mov	r0, r5
 800448a:	f000 fb75 	bl	8004b78 <_sbrk_r>
 800448e:	1c43      	adds	r3, r0, #1
 8004490:	d00a      	beq.n	80044a8 <sbrk_aligned+0x34>
 8004492:	1cc4      	adds	r4, r0, #3
 8004494:	f024 0403 	bic.w	r4, r4, #3
 8004498:	42a0      	cmp	r0, r4
 800449a:	d007      	beq.n	80044ac <sbrk_aligned+0x38>
 800449c:	1a21      	subs	r1, r4, r0
 800449e:	4628      	mov	r0, r5
 80044a0:	f000 fb6a 	bl	8004b78 <_sbrk_r>
 80044a4:	3001      	adds	r0, #1
 80044a6:	d101      	bne.n	80044ac <sbrk_aligned+0x38>
 80044a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80044ac:	4620      	mov	r0, r4
 80044ae:	bd70      	pop	{r4, r5, r6, pc}
 80044b0:	200000f0 	.word	0x200000f0

080044b4 <_malloc_r>:
 80044b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044b8:	1ccd      	adds	r5, r1, #3
 80044ba:	f025 0503 	bic.w	r5, r5, #3
 80044be:	3508      	adds	r5, #8
 80044c0:	2d0c      	cmp	r5, #12
 80044c2:	bf38      	it	cc
 80044c4:	250c      	movcc	r5, #12
 80044c6:	2d00      	cmp	r5, #0
 80044c8:	4607      	mov	r7, r0
 80044ca:	db01      	blt.n	80044d0 <_malloc_r+0x1c>
 80044cc:	42a9      	cmp	r1, r5
 80044ce:	d905      	bls.n	80044dc <_malloc_r+0x28>
 80044d0:	230c      	movs	r3, #12
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	2600      	movs	r6, #0
 80044d6:	4630      	mov	r0, r6
 80044d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044dc:	4e2e      	ldr	r6, [pc, #184]	; (8004598 <_malloc_r+0xe4>)
 80044de:	f000 fdbb 	bl	8005058 <__malloc_lock>
 80044e2:	6833      	ldr	r3, [r6, #0]
 80044e4:	461c      	mov	r4, r3
 80044e6:	bb34      	cbnz	r4, 8004536 <_malloc_r+0x82>
 80044e8:	4629      	mov	r1, r5
 80044ea:	4638      	mov	r0, r7
 80044ec:	f7ff ffc2 	bl	8004474 <sbrk_aligned>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	4604      	mov	r4, r0
 80044f4:	d14d      	bne.n	8004592 <_malloc_r+0xde>
 80044f6:	6834      	ldr	r4, [r6, #0]
 80044f8:	4626      	mov	r6, r4
 80044fa:	2e00      	cmp	r6, #0
 80044fc:	d140      	bne.n	8004580 <_malloc_r+0xcc>
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	4631      	mov	r1, r6
 8004502:	4638      	mov	r0, r7
 8004504:	eb04 0803 	add.w	r8, r4, r3
 8004508:	f000 fb36 	bl	8004b78 <_sbrk_r>
 800450c:	4580      	cmp	r8, r0
 800450e:	d13a      	bne.n	8004586 <_malloc_r+0xd2>
 8004510:	6821      	ldr	r1, [r4, #0]
 8004512:	3503      	adds	r5, #3
 8004514:	1a6d      	subs	r5, r5, r1
 8004516:	f025 0503 	bic.w	r5, r5, #3
 800451a:	3508      	adds	r5, #8
 800451c:	2d0c      	cmp	r5, #12
 800451e:	bf38      	it	cc
 8004520:	250c      	movcc	r5, #12
 8004522:	4629      	mov	r1, r5
 8004524:	4638      	mov	r0, r7
 8004526:	f7ff ffa5 	bl	8004474 <sbrk_aligned>
 800452a:	3001      	adds	r0, #1
 800452c:	d02b      	beq.n	8004586 <_malloc_r+0xd2>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	442b      	add	r3, r5
 8004532:	6023      	str	r3, [r4, #0]
 8004534:	e00e      	b.n	8004554 <_malloc_r+0xa0>
 8004536:	6822      	ldr	r2, [r4, #0]
 8004538:	1b52      	subs	r2, r2, r5
 800453a:	d41e      	bmi.n	800457a <_malloc_r+0xc6>
 800453c:	2a0b      	cmp	r2, #11
 800453e:	d916      	bls.n	800456e <_malloc_r+0xba>
 8004540:	1961      	adds	r1, r4, r5
 8004542:	42a3      	cmp	r3, r4
 8004544:	6025      	str	r5, [r4, #0]
 8004546:	bf18      	it	ne
 8004548:	6059      	strne	r1, [r3, #4]
 800454a:	6863      	ldr	r3, [r4, #4]
 800454c:	bf08      	it	eq
 800454e:	6031      	streq	r1, [r6, #0]
 8004550:	5162      	str	r2, [r4, r5]
 8004552:	604b      	str	r3, [r1, #4]
 8004554:	4638      	mov	r0, r7
 8004556:	f104 060b 	add.w	r6, r4, #11
 800455a:	f000 fd83 	bl	8005064 <__malloc_unlock>
 800455e:	f026 0607 	bic.w	r6, r6, #7
 8004562:	1d23      	adds	r3, r4, #4
 8004564:	1af2      	subs	r2, r6, r3
 8004566:	d0b6      	beq.n	80044d6 <_malloc_r+0x22>
 8004568:	1b9b      	subs	r3, r3, r6
 800456a:	50a3      	str	r3, [r4, r2]
 800456c:	e7b3      	b.n	80044d6 <_malloc_r+0x22>
 800456e:	6862      	ldr	r2, [r4, #4]
 8004570:	42a3      	cmp	r3, r4
 8004572:	bf0c      	ite	eq
 8004574:	6032      	streq	r2, [r6, #0]
 8004576:	605a      	strne	r2, [r3, #4]
 8004578:	e7ec      	b.n	8004554 <_malloc_r+0xa0>
 800457a:	4623      	mov	r3, r4
 800457c:	6864      	ldr	r4, [r4, #4]
 800457e:	e7b2      	b.n	80044e6 <_malloc_r+0x32>
 8004580:	4634      	mov	r4, r6
 8004582:	6876      	ldr	r6, [r6, #4]
 8004584:	e7b9      	b.n	80044fa <_malloc_r+0x46>
 8004586:	230c      	movs	r3, #12
 8004588:	603b      	str	r3, [r7, #0]
 800458a:	4638      	mov	r0, r7
 800458c:	f000 fd6a 	bl	8005064 <__malloc_unlock>
 8004590:	e7a1      	b.n	80044d6 <_malloc_r+0x22>
 8004592:	6025      	str	r5, [r4, #0]
 8004594:	e7de      	b.n	8004554 <_malloc_r+0xa0>
 8004596:	bf00      	nop
 8004598:	200000ec 	.word	0x200000ec

0800459c <__sfputc_r>:
 800459c:	6893      	ldr	r3, [r2, #8]
 800459e:	3b01      	subs	r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	b410      	push	{r4}
 80045a4:	6093      	str	r3, [r2, #8]
 80045a6:	da08      	bge.n	80045ba <__sfputc_r+0x1e>
 80045a8:	6994      	ldr	r4, [r2, #24]
 80045aa:	42a3      	cmp	r3, r4
 80045ac:	db01      	blt.n	80045b2 <__sfputc_r+0x16>
 80045ae:	290a      	cmp	r1, #10
 80045b0:	d103      	bne.n	80045ba <__sfputc_r+0x1e>
 80045b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045b6:	f000 bb33 	b.w	8004c20 <__swbuf_r>
 80045ba:	6813      	ldr	r3, [r2, #0]
 80045bc:	1c58      	adds	r0, r3, #1
 80045be:	6010      	str	r0, [r2, #0]
 80045c0:	7019      	strb	r1, [r3, #0]
 80045c2:	4608      	mov	r0, r1
 80045c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <__sfputs_r>:
 80045ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045cc:	4606      	mov	r6, r0
 80045ce:	460f      	mov	r7, r1
 80045d0:	4614      	mov	r4, r2
 80045d2:	18d5      	adds	r5, r2, r3
 80045d4:	42ac      	cmp	r4, r5
 80045d6:	d101      	bne.n	80045dc <__sfputs_r+0x12>
 80045d8:	2000      	movs	r0, #0
 80045da:	e007      	b.n	80045ec <__sfputs_r+0x22>
 80045dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045e0:	463a      	mov	r2, r7
 80045e2:	4630      	mov	r0, r6
 80045e4:	f7ff ffda 	bl	800459c <__sfputc_r>
 80045e8:	1c43      	adds	r3, r0, #1
 80045ea:	d1f3      	bne.n	80045d4 <__sfputs_r+0xa>
 80045ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045f0 <_vfiprintf_r>:
 80045f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f4:	460d      	mov	r5, r1
 80045f6:	b09d      	sub	sp, #116	; 0x74
 80045f8:	4614      	mov	r4, r2
 80045fa:	4698      	mov	r8, r3
 80045fc:	4606      	mov	r6, r0
 80045fe:	b118      	cbz	r0, 8004608 <_vfiprintf_r+0x18>
 8004600:	6983      	ldr	r3, [r0, #24]
 8004602:	b90b      	cbnz	r3, 8004608 <_vfiprintf_r+0x18>
 8004604:	f7ff fe96 	bl	8004334 <__sinit>
 8004608:	4b89      	ldr	r3, [pc, #548]	; (8004830 <_vfiprintf_r+0x240>)
 800460a:	429d      	cmp	r5, r3
 800460c:	d11b      	bne.n	8004646 <_vfiprintf_r+0x56>
 800460e:	6875      	ldr	r5, [r6, #4]
 8004610:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004612:	07d9      	lsls	r1, r3, #31
 8004614:	d405      	bmi.n	8004622 <_vfiprintf_r+0x32>
 8004616:	89ab      	ldrh	r3, [r5, #12]
 8004618:	059a      	lsls	r2, r3, #22
 800461a:	d402      	bmi.n	8004622 <_vfiprintf_r+0x32>
 800461c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800461e:	f7ff ff27 	bl	8004470 <__retarget_lock_acquire_recursive>
 8004622:	89ab      	ldrh	r3, [r5, #12]
 8004624:	071b      	lsls	r3, r3, #28
 8004626:	d501      	bpl.n	800462c <_vfiprintf_r+0x3c>
 8004628:	692b      	ldr	r3, [r5, #16]
 800462a:	b9eb      	cbnz	r3, 8004668 <_vfiprintf_r+0x78>
 800462c:	4629      	mov	r1, r5
 800462e:	4630      	mov	r0, r6
 8004630:	f000 fb5a 	bl	8004ce8 <__swsetup_r>
 8004634:	b1c0      	cbz	r0, 8004668 <_vfiprintf_r+0x78>
 8004636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004638:	07dc      	lsls	r4, r3, #31
 800463a:	d50e      	bpl.n	800465a <_vfiprintf_r+0x6a>
 800463c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004640:	b01d      	add	sp, #116	; 0x74
 8004642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004646:	4b7b      	ldr	r3, [pc, #492]	; (8004834 <_vfiprintf_r+0x244>)
 8004648:	429d      	cmp	r5, r3
 800464a:	d101      	bne.n	8004650 <_vfiprintf_r+0x60>
 800464c:	68b5      	ldr	r5, [r6, #8]
 800464e:	e7df      	b.n	8004610 <_vfiprintf_r+0x20>
 8004650:	4b79      	ldr	r3, [pc, #484]	; (8004838 <_vfiprintf_r+0x248>)
 8004652:	429d      	cmp	r5, r3
 8004654:	bf08      	it	eq
 8004656:	68f5      	ldreq	r5, [r6, #12]
 8004658:	e7da      	b.n	8004610 <_vfiprintf_r+0x20>
 800465a:	89ab      	ldrh	r3, [r5, #12]
 800465c:	0598      	lsls	r0, r3, #22
 800465e:	d4ed      	bmi.n	800463c <_vfiprintf_r+0x4c>
 8004660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004662:	f7ff ff06 	bl	8004472 <__retarget_lock_release_recursive>
 8004666:	e7e9      	b.n	800463c <_vfiprintf_r+0x4c>
 8004668:	2300      	movs	r3, #0
 800466a:	9309      	str	r3, [sp, #36]	; 0x24
 800466c:	2320      	movs	r3, #32
 800466e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004672:	f8cd 800c 	str.w	r8, [sp, #12]
 8004676:	2330      	movs	r3, #48	; 0x30
 8004678:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800483c <_vfiprintf_r+0x24c>
 800467c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004680:	f04f 0901 	mov.w	r9, #1
 8004684:	4623      	mov	r3, r4
 8004686:	469a      	mov	sl, r3
 8004688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800468c:	b10a      	cbz	r2, 8004692 <_vfiprintf_r+0xa2>
 800468e:	2a25      	cmp	r2, #37	; 0x25
 8004690:	d1f9      	bne.n	8004686 <_vfiprintf_r+0x96>
 8004692:	ebba 0b04 	subs.w	fp, sl, r4
 8004696:	d00b      	beq.n	80046b0 <_vfiprintf_r+0xc0>
 8004698:	465b      	mov	r3, fp
 800469a:	4622      	mov	r2, r4
 800469c:	4629      	mov	r1, r5
 800469e:	4630      	mov	r0, r6
 80046a0:	f7ff ff93 	bl	80045ca <__sfputs_r>
 80046a4:	3001      	adds	r0, #1
 80046a6:	f000 80aa 	beq.w	80047fe <_vfiprintf_r+0x20e>
 80046aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046ac:	445a      	add	r2, fp
 80046ae:	9209      	str	r2, [sp, #36]	; 0x24
 80046b0:	f89a 3000 	ldrb.w	r3, [sl]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 80a2 	beq.w	80047fe <_vfiprintf_r+0x20e>
 80046ba:	2300      	movs	r3, #0
 80046bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046c4:	f10a 0a01 	add.w	sl, sl, #1
 80046c8:	9304      	str	r3, [sp, #16]
 80046ca:	9307      	str	r3, [sp, #28]
 80046cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046d0:	931a      	str	r3, [sp, #104]	; 0x68
 80046d2:	4654      	mov	r4, sl
 80046d4:	2205      	movs	r2, #5
 80046d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046da:	4858      	ldr	r0, [pc, #352]	; (800483c <_vfiprintf_r+0x24c>)
 80046dc:	f7fb fd78 	bl	80001d0 <memchr>
 80046e0:	9a04      	ldr	r2, [sp, #16]
 80046e2:	b9d8      	cbnz	r0, 800471c <_vfiprintf_r+0x12c>
 80046e4:	06d1      	lsls	r1, r2, #27
 80046e6:	bf44      	itt	mi
 80046e8:	2320      	movmi	r3, #32
 80046ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046ee:	0713      	lsls	r3, r2, #28
 80046f0:	bf44      	itt	mi
 80046f2:	232b      	movmi	r3, #43	; 0x2b
 80046f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046f8:	f89a 3000 	ldrb.w	r3, [sl]
 80046fc:	2b2a      	cmp	r3, #42	; 0x2a
 80046fe:	d015      	beq.n	800472c <_vfiprintf_r+0x13c>
 8004700:	9a07      	ldr	r2, [sp, #28]
 8004702:	4654      	mov	r4, sl
 8004704:	2000      	movs	r0, #0
 8004706:	f04f 0c0a 	mov.w	ip, #10
 800470a:	4621      	mov	r1, r4
 800470c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004710:	3b30      	subs	r3, #48	; 0x30
 8004712:	2b09      	cmp	r3, #9
 8004714:	d94e      	bls.n	80047b4 <_vfiprintf_r+0x1c4>
 8004716:	b1b0      	cbz	r0, 8004746 <_vfiprintf_r+0x156>
 8004718:	9207      	str	r2, [sp, #28]
 800471a:	e014      	b.n	8004746 <_vfiprintf_r+0x156>
 800471c:	eba0 0308 	sub.w	r3, r0, r8
 8004720:	fa09 f303 	lsl.w	r3, r9, r3
 8004724:	4313      	orrs	r3, r2
 8004726:	9304      	str	r3, [sp, #16]
 8004728:	46a2      	mov	sl, r4
 800472a:	e7d2      	b.n	80046d2 <_vfiprintf_r+0xe2>
 800472c:	9b03      	ldr	r3, [sp, #12]
 800472e:	1d19      	adds	r1, r3, #4
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	9103      	str	r1, [sp, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	bfbb      	ittet	lt
 8004738:	425b      	neglt	r3, r3
 800473a:	f042 0202 	orrlt.w	r2, r2, #2
 800473e:	9307      	strge	r3, [sp, #28]
 8004740:	9307      	strlt	r3, [sp, #28]
 8004742:	bfb8      	it	lt
 8004744:	9204      	strlt	r2, [sp, #16]
 8004746:	7823      	ldrb	r3, [r4, #0]
 8004748:	2b2e      	cmp	r3, #46	; 0x2e
 800474a:	d10c      	bne.n	8004766 <_vfiprintf_r+0x176>
 800474c:	7863      	ldrb	r3, [r4, #1]
 800474e:	2b2a      	cmp	r3, #42	; 0x2a
 8004750:	d135      	bne.n	80047be <_vfiprintf_r+0x1ce>
 8004752:	9b03      	ldr	r3, [sp, #12]
 8004754:	1d1a      	adds	r2, r3, #4
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	9203      	str	r2, [sp, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	bfb8      	it	lt
 800475e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004762:	3402      	adds	r4, #2
 8004764:	9305      	str	r3, [sp, #20]
 8004766:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800484c <_vfiprintf_r+0x25c>
 800476a:	7821      	ldrb	r1, [r4, #0]
 800476c:	2203      	movs	r2, #3
 800476e:	4650      	mov	r0, sl
 8004770:	f7fb fd2e 	bl	80001d0 <memchr>
 8004774:	b140      	cbz	r0, 8004788 <_vfiprintf_r+0x198>
 8004776:	2340      	movs	r3, #64	; 0x40
 8004778:	eba0 000a 	sub.w	r0, r0, sl
 800477c:	fa03 f000 	lsl.w	r0, r3, r0
 8004780:	9b04      	ldr	r3, [sp, #16]
 8004782:	4303      	orrs	r3, r0
 8004784:	3401      	adds	r4, #1
 8004786:	9304      	str	r3, [sp, #16]
 8004788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800478c:	482c      	ldr	r0, [pc, #176]	; (8004840 <_vfiprintf_r+0x250>)
 800478e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004792:	2206      	movs	r2, #6
 8004794:	f7fb fd1c 	bl	80001d0 <memchr>
 8004798:	2800      	cmp	r0, #0
 800479a:	d03f      	beq.n	800481c <_vfiprintf_r+0x22c>
 800479c:	4b29      	ldr	r3, [pc, #164]	; (8004844 <_vfiprintf_r+0x254>)
 800479e:	bb1b      	cbnz	r3, 80047e8 <_vfiprintf_r+0x1f8>
 80047a0:	9b03      	ldr	r3, [sp, #12]
 80047a2:	3307      	adds	r3, #7
 80047a4:	f023 0307 	bic.w	r3, r3, #7
 80047a8:	3308      	adds	r3, #8
 80047aa:	9303      	str	r3, [sp, #12]
 80047ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ae:	443b      	add	r3, r7
 80047b0:	9309      	str	r3, [sp, #36]	; 0x24
 80047b2:	e767      	b.n	8004684 <_vfiprintf_r+0x94>
 80047b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80047b8:	460c      	mov	r4, r1
 80047ba:	2001      	movs	r0, #1
 80047bc:	e7a5      	b.n	800470a <_vfiprintf_r+0x11a>
 80047be:	2300      	movs	r3, #0
 80047c0:	3401      	adds	r4, #1
 80047c2:	9305      	str	r3, [sp, #20]
 80047c4:	4619      	mov	r1, r3
 80047c6:	f04f 0c0a 	mov.w	ip, #10
 80047ca:	4620      	mov	r0, r4
 80047cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047d0:	3a30      	subs	r2, #48	; 0x30
 80047d2:	2a09      	cmp	r2, #9
 80047d4:	d903      	bls.n	80047de <_vfiprintf_r+0x1ee>
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0c5      	beq.n	8004766 <_vfiprintf_r+0x176>
 80047da:	9105      	str	r1, [sp, #20]
 80047dc:	e7c3      	b.n	8004766 <_vfiprintf_r+0x176>
 80047de:	fb0c 2101 	mla	r1, ip, r1, r2
 80047e2:	4604      	mov	r4, r0
 80047e4:	2301      	movs	r3, #1
 80047e6:	e7f0      	b.n	80047ca <_vfiprintf_r+0x1da>
 80047e8:	ab03      	add	r3, sp, #12
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	462a      	mov	r2, r5
 80047ee:	4b16      	ldr	r3, [pc, #88]	; (8004848 <_vfiprintf_r+0x258>)
 80047f0:	a904      	add	r1, sp, #16
 80047f2:	4630      	mov	r0, r6
 80047f4:	f3af 8000 	nop.w
 80047f8:	4607      	mov	r7, r0
 80047fa:	1c78      	adds	r0, r7, #1
 80047fc:	d1d6      	bne.n	80047ac <_vfiprintf_r+0x1bc>
 80047fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004800:	07d9      	lsls	r1, r3, #31
 8004802:	d405      	bmi.n	8004810 <_vfiprintf_r+0x220>
 8004804:	89ab      	ldrh	r3, [r5, #12]
 8004806:	059a      	lsls	r2, r3, #22
 8004808:	d402      	bmi.n	8004810 <_vfiprintf_r+0x220>
 800480a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800480c:	f7ff fe31 	bl	8004472 <__retarget_lock_release_recursive>
 8004810:	89ab      	ldrh	r3, [r5, #12]
 8004812:	065b      	lsls	r3, r3, #25
 8004814:	f53f af12 	bmi.w	800463c <_vfiprintf_r+0x4c>
 8004818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800481a:	e711      	b.n	8004640 <_vfiprintf_r+0x50>
 800481c:	ab03      	add	r3, sp, #12
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	462a      	mov	r2, r5
 8004822:	4b09      	ldr	r3, [pc, #36]	; (8004848 <_vfiprintf_r+0x258>)
 8004824:	a904      	add	r1, sp, #16
 8004826:	4630      	mov	r0, r6
 8004828:	f000 f880 	bl	800492c <_printf_i>
 800482c:	e7e4      	b.n	80047f8 <_vfiprintf_r+0x208>
 800482e:	bf00      	nop
 8004830:	080051ec 	.word	0x080051ec
 8004834:	0800520c 	.word	0x0800520c
 8004838:	080051cc 	.word	0x080051cc
 800483c:	0800522c 	.word	0x0800522c
 8004840:	08005236 	.word	0x08005236
 8004844:	00000000 	.word	0x00000000
 8004848:	080045cb 	.word	0x080045cb
 800484c:	08005232 	.word	0x08005232

08004850 <_printf_common>:
 8004850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004854:	4616      	mov	r6, r2
 8004856:	4699      	mov	r9, r3
 8004858:	688a      	ldr	r2, [r1, #8]
 800485a:	690b      	ldr	r3, [r1, #16]
 800485c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004860:	4293      	cmp	r3, r2
 8004862:	bfb8      	it	lt
 8004864:	4613      	movlt	r3, r2
 8004866:	6033      	str	r3, [r6, #0]
 8004868:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800486c:	4607      	mov	r7, r0
 800486e:	460c      	mov	r4, r1
 8004870:	b10a      	cbz	r2, 8004876 <_printf_common+0x26>
 8004872:	3301      	adds	r3, #1
 8004874:	6033      	str	r3, [r6, #0]
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	0699      	lsls	r1, r3, #26
 800487a:	bf42      	ittt	mi
 800487c:	6833      	ldrmi	r3, [r6, #0]
 800487e:	3302      	addmi	r3, #2
 8004880:	6033      	strmi	r3, [r6, #0]
 8004882:	6825      	ldr	r5, [r4, #0]
 8004884:	f015 0506 	ands.w	r5, r5, #6
 8004888:	d106      	bne.n	8004898 <_printf_common+0x48>
 800488a:	f104 0a19 	add.w	sl, r4, #25
 800488e:	68e3      	ldr	r3, [r4, #12]
 8004890:	6832      	ldr	r2, [r6, #0]
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	42ab      	cmp	r3, r5
 8004896:	dc26      	bgt.n	80048e6 <_printf_common+0x96>
 8004898:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800489c:	1e13      	subs	r3, r2, #0
 800489e:	6822      	ldr	r2, [r4, #0]
 80048a0:	bf18      	it	ne
 80048a2:	2301      	movne	r3, #1
 80048a4:	0692      	lsls	r2, r2, #26
 80048a6:	d42b      	bmi.n	8004900 <_printf_common+0xb0>
 80048a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048ac:	4649      	mov	r1, r9
 80048ae:	4638      	mov	r0, r7
 80048b0:	47c0      	blx	r8
 80048b2:	3001      	adds	r0, #1
 80048b4:	d01e      	beq.n	80048f4 <_printf_common+0xa4>
 80048b6:	6823      	ldr	r3, [r4, #0]
 80048b8:	68e5      	ldr	r5, [r4, #12]
 80048ba:	6832      	ldr	r2, [r6, #0]
 80048bc:	f003 0306 	and.w	r3, r3, #6
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	bf08      	it	eq
 80048c4:	1aad      	subeq	r5, r5, r2
 80048c6:	68a3      	ldr	r3, [r4, #8]
 80048c8:	6922      	ldr	r2, [r4, #16]
 80048ca:	bf0c      	ite	eq
 80048cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048d0:	2500      	movne	r5, #0
 80048d2:	4293      	cmp	r3, r2
 80048d4:	bfc4      	itt	gt
 80048d6:	1a9b      	subgt	r3, r3, r2
 80048d8:	18ed      	addgt	r5, r5, r3
 80048da:	2600      	movs	r6, #0
 80048dc:	341a      	adds	r4, #26
 80048de:	42b5      	cmp	r5, r6
 80048e0:	d11a      	bne.n	8004918 <_printf_common+0xc8>
 80048e2:	2000      	movs	r0, #0
 80048e4:	e008      	b.n	80048f8 <_printf_common+0xa8>
 80048e6:	2301      	movs	r3, #1
 80048e8:	4652      	mov	r2, sl
 80048ea:	4649      	mov	r1, r9
 80048ec:	4638      	mov	r0, r7
 80048ee:	47c0      	blx	r8
 80048f0:	3001      	adds	r0, #1
 80048f2:	d103      	bne.n	80048fc <_printf_common+0xac>
 80048f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048fc:	3501      	adds	r5, #1
 80048fe:	e7c6      	b.n	800488e <_printf_common+0x3e>
 8004900:	18e1      	adds	r1, r4, r3
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	2030      	movs	r0, #48	; 0x30
 8004906:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800490a:	4422      	add	r2, r4
 800490c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004910:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004914:	3302      	adds	r3, #2
 8004916:	e7c7      	b.n	80048a8 <_printf_common+0x58>
 8004918:	2301      	movs	r3, #1
 800491a:	4622      	mov	r2, r4
 800491c:	4649      	mov	r1, r9
 800491e:	4638      	mov	r0, r7
 8004920:	47c0      	blx	r8
 8004922:	3001      	adds	r0, #1
 8004924:	d0e6      	beq.n	80048f4 <_printf_common+0xa4>
 8004926:	3601      	adds	r6, #1
 8004928:	e7d9      	b.n	80048de <_printf_common+0x8e>
	...

0800492c <_printf_i>:
 800492c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004930:	7e0f      	ldrb	r7, [r1, #24]
 8004932:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004934:	2f78      	cmp	r7, #120	; 0x78
 8004936:	4691      	mov	r9, r2
 8004938:	4680      	mov	r8, r0
 800493a:	460c      	mov	r4, r1
 800493c:	469a      	mov	sl, r3
 800493e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004942:	d807      	bhi.n	8004954 <_printf_i+0x28>
 8004944:	2f62      	cmp	r7, #98	; 0x62
 8004946:	d80a      	bhi.n	800495e <_printf_i+0x32>
 8004948:	2f00      	cmp	r7, #0
 800494a:	f000 80d8 	beq.w	8004afe <_printf_i+0x1d2>
 800494e:	2f58      	cmp	r7, #88	; 0x58
 8004950:	f000 80a3 	beq.w	8004a9a <_printf_i+0x16e>
 8004954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004958:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800495c:	e03a      	b.n	80049d4 <_printf_i+0xa8>
 800495e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004962:	2b15      	cmp	r3, #21
 8004964:	d8f6      	bhi.n	8004954 <_printf_i+0x28>
 8004966:	a101      	add	r1, pc, #4	; (adr r1, 800496c <_printf_i+0x40>)
 8004968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800496c:	080049c5 	.word	0x080049c5
 8004970:	080049d9 	.word	0x080049d9
 8004974:	08004955 	.word	0x08004955
 8004978:	08004955 	.word	0x08004955
 800497c:	08004955 	.word	0x08004955
 8004980:	08004955 	.word	0x08004955
 8004984:	080049d9 	.word	0x080049d9
 8004988:	08004955 	.word	0x08004955
 800498c:	08004955 	.word	0x08004955
 8004990:	08004955 	.word	0x08004955
 8004994:	08004955 	.word	0x08004955
 8004998:	08004ae5 	.word	0x08004ae5
 800499c:	08004a09 	.word	0x08004a09
 80049a0:	08004ac7 	.word	0x08004ac7
 80049a4:	08004955 	.word	0x08004955
 80049a8:	08004955 	.word	0x08004955
 80049ac:	08004b07 	.word	0x08004b07
 80049b0:	08004955 	.word	0x08004955
 80049b4:	08004a09 	.word	0x08004a09
 80049b8:	08004955 	.word	0x08004955
 80049bc:	08004955 	.word	0x08004955
 80049c0:	08004acf 	.word	0x08004acf
 80049c4:	682b      	ldr	r3, [r5, #0]
 80049c6:	1d1a      	adds	r2, r3, #4
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	602a      	str	r2, [r5, #0]
 80049cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0a3      	b.n	8004b20 <_printf_i+0x1f4>
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	6829      	ldr	r1, [r5, #0]
 80049dc:	0606      	lsls	r6, r0, #24
 80049de:	f101 0304 	add.w	r3, r1, #4
 80049e2:	d50a      	bpl.n	80049fa <_printf_i+0xce>
 80049e4:	680e      	ldr	r6, [r1, #0]
 80049e6:	602b      	str	r3, [r5, #0]
 80049e8:	2e00      	cmp	r6, #0
 80049ea:	da03      	bge.n	80049f4 <_printf_i+0xc8>
 80049ec:	232d      	movs	r3, #45	; 0x2d
 80049ee:	4276      	negs	r6, r6
 80049f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f4:	485e      	ldr	r0, [pc, #376]	; (8004b70 <_printf_i+0x244>)
 80049f6:	230a      	movs	r3, #10
 80049f8:	e019      	b.n	8004a2e <_printf_i+0x102>
 80049fa:	680e      	ldr	r6, [r1, #0]
 80049fc:	602b      	str	r3, [r5, #0]
 80049fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a02:	bf18      	it	ne
 8004a04:	b236      	sxthne	r6, r6
 8004a06:	e7ef      	b.n	80049e8 <_printf_i+0xbc>
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	6820      	ldr	r0, [r4, #0]
 8004a0c:	1d19      	adds	r1, r3, #4
 8004a0e:	6029      	str	r1, [r5, #0]
 8004a10:	0601      	lsls	r1, r0, #24
 8004a12:	d501      	bpl.n	8004a18 <_printf_i+0xec>
 8004a14:	681e      	ldr	r6, [r3, #0]
 8004a16:	e002      	b.n	8004a1e <_printf_i+0xf2>
 8004a18:	0646      	lsls	r6, r0, #25
 8004a1a:	d5fb      	bpl.n	8004a14 <_printf_i+0xe8>
 8004a1c:	881e      	ldrh	r6, [r3, #0]
 8004a1e:	4854      	ldr	r0, [pc, #336]	; (8004b70 <_printf_i+0x244>)
 8004a20:	2f6f      	cmp	r7, #111	; 0x6f
 8004a22:	bf0c      	ite	eq
 8004a24:	2308      	moveq	r3, #8
 8004a26:	230a      	movne	r3, #10
 8004a28:	2100      	movs	r1, #0
 8004a2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a2e:	6865      	ldr	r5, [r4, #4]
 8004a30:	60a5      	str	r5, [r4, #8]
 8004a32:	2d00      	cmp	r5, #0
 8004a34:	bfa2      	ittt	ge
 8004a36:	6821      	ldrge	r1, [r4, #0]
 8004a38:	f021 0104 	bicge.w	r1, r1, #4
 8004a3c:	6021      	strge	r1, [r4, #0]
 8004a3e:	b90e      	cbnz	r6, 8004a44 <_printf_i+0x118>
 8004a40:	2d00      	cmp	r5, #0
 8004a42:	d04d      	beq.n	8004ae0 <_printf_i+0x1b4>
 8004a44:	4615      	mov	r5, r2
 8004a46:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a4a:	fb03 6711 	mls	r7, r3, r1, r6
 8004a4e:	5dc7      	ldrb	r7, [r0, r7]
 8004a50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a54:	4637      	mov	r7, r6
 8004a56:	42bb      	cmp	r3, r7
 8004a58:	460e      	mov	r6, r1
 8004a5a:	d9f4      	bls.n	8004a46 <_printf_i+0x11a>
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d10b      	bne.n	8004a78 <_printf_i+0x14c>
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	07de      	lsls	r6, r3, #31
 8004a64:	d508      	bpl.n	8004a78 <_printf_i+0x14c>
 8004a66:	6923      	ldr	r3, [r4, #16]
 8004a68:	6861      	ldr	r1, [r4, #4]
 8004a6a:	4299      	cmp	r1, r3
 8004a6c:	bfde      	ittt	le
 8004a6e:	2330      	movle	r3, #48	; 0x30
 8004a70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a78:	1b52      	subs	r2, r2, r5
 8004a7a:	6122      	str	r2, [r4, #16]
 8004a7c:	f8cd a000 	str.w	sl, [sp]
 8004a80:	464b      	mov	r3, r9
 8004a82:	aa03      	add	r2, sp, #12
 8004a84:	4621      	mov	r1, r4
 8004a86:	4640      	mov	r0, r8
 8004a88:	f7ff fee2 	bl	8004850 <_printf_common>
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d14c      	bne.n	8004b2a <_printf_i+0x1fe>
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a94:	b004      	add	sp, #16
 8004a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a9a:	4835      	ldr	r0, [pc, #212]	; (8004b70 <_printf_i+0x244>)
 8004a9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004aa0:	6829      	ldr	r1, [r5, #0]
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004aa8:	6029      	str	r1, [r5, #0]
 8004aaa:	061d      	lsls	r5, r3, #24
 8004aac:	d514      	bpl.n	8004ad8 <_printf_i+0x1ac>
 8004aae:	07df      	lsls	r7, r3, #31
 8004ab0:	bf44      	itt	mi
 8004ab2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ab6:	6023      	strmi	r3, [r4, #0]
 8004ab8:	b91e      	cbnz	r6, 8004ac2 <_printf_i+0x196>
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	f023 0320 	bic.w	r3, r3, #32
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	2310      	movs	r3, #16
 8004ac4:	e7b0      	b.n	8004a28 <_printf_i+0xfc>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	f043 0320 	orr.w	r3, r3, #32
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	2378      	movs	r3, #120	; 0x78
 8004ad0:	4828      	ldr	r0, [pc, #160]	; (8004b74 <_printf_i+0x248>)
 8004ad2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ad6:	e7e3      	b.n	8004aa0 <_printf_i+0x174>
 8004ad8:	0659      	lsls	r1, r3, #25
 8004ada:	bf48      	it	mi
 8004adc:	b2b6      	uxthmi	r6, r6
 8004ade:	e7e6      	b.n	8004aae <_printf_i+0x182>
 8004ae0:	4615      	mov	r5, r2
 8004ae2:	e7bb      	b.n	8004a5c <_printf_i+0x130>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	6826      	ldr	r6, [r4, #0]
 8004ae8:	6961      	ldr	r1, [r4, #20]
 8004aea:	1d18      	adds	r0, r3, #4
 8004aec:	6028      	str	r0, [r5, #0]
 8004aee:	0635      	lsls	r5, r6, #24
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	d501      	bpl.n	8004af8 <_printf_i+0x1cc>
 8004af4:	6019      	str	r1, [r3, #0]
 8004af6:	e002      	b.n	8004afe <_printf_i+0x1d2>
 8004af8:	0670      	lsls	r0, r6, #25
 8004afa:	d5fb      	bpl.n	8004af4 <_printf_i+0x1c8>
 8004afc:	8019      	strh	r1, [r3, #0]
 8004afe:	2300      	movs	r3, #0
 8004b00:	6123      	str	r3, [r4, #16]
 8004b02:	4615      	mov	r5, r2
 8004b04:	e7ba      	b.n	8004a7c <_printf_i+0x150>
 8004b06:	682b      	ldr	r3, [r5, #0]
 8004b08:	1d1a      	adds	r2, r3, #4
 8004b0a:	602a      	str	r2, [r5, #0]
 8004b0c:	681d      	ldr	r5, [r3, #0]
 8004b0e:	6862      	ldr	r2, [r4, #4]
 8004b10:	2100      	movs	r1, #0
 8004b12:	4628      	mov	r0, r5
 8004b14:	f7fb fb5c 	bl	80001d0 <memchr>
 8004b18:	b108      	cbz	r0, 8004b1e <_printf_i+0x1f2>
 8004b1a:	1b40      	subs	r0, r0, r5
 8004b1c:	6060      	str	r0, [r4, #4]
 8004b1e:	6863      	ldr	r3, [r4, #4]
 8004b20:	6123      	str	r3, [r4, #16]
 8004b22:	2300      	movs	r3, #0
 8004b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b28:	e7a8      	b.n	8004a7c <_printf_i+0x150>
 8004b2a:	6923      	ldr	r3, [r4, #16]
 8004b2c:	462a      	mov	r2, r5
 8004b2e:	4649      	mov	r1, r9
 8004b30:	4640      	mov	r0, r8
 8004b32:	47d0      	blx	sl
 8004b34:	3001      	adds	r0, #1
 8004b36:	d0ab      	beq.n	8004a90 <_printf_i+0x164>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	079b      	lsls	r3, r3, #30
 8004b3c:	d413      	bmi.n	8004b66 <_printf_i+0x23a>
 8004b3e:	68e0      	ldr	r0, [r4, #12]
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	4298      	cmp	r0, r3
 8004b44:	bfb8      	it	lt
 8004b46:	4618      	movlt	r0, r3
 8004b48:	e7a4      	b.n	8004a94 <_printf_i+0x168>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	4632      	mov	r2, r6
 8004b4e:	4649      	mov	r1, r9
 8004b50:	4640      	mov	r0, r8
 8004b52:	47d0      	blx	sl
 8004b54:	3001      	adds	r0, #1
 8004b56:	d09b      	beq.n	8004a90 <_printf_i+0x164>
 8004b58:	3501      	adds	r5, #1
 8004b5a:	68e3      	ldr	r3, [r4, #12]
 8004b5c:	9903      	ldr	r1, [sp, #12]
 8004b5e:	1a5b      	subs	r3, r3, r1
 8004b60:	42ab      	cmp	r3, r5
 8004b62:	dcf2      	bgt.n	8004b4a <_printf_i+0x21e>
 8004b64:	e7eb      	b.n	8004b3e <_printf_i+0x212>
 8004b66:	2500      	movs	r5, #0
 8004b68:	f104 0619 	add.w	r6, r4, #25
 8004b6c:	e7f5      	b.n	8004b5a <_printf_i+0x22e>
 8004b6e:	bf00      	nop
 8004b70:	0800523d 	.word	0x0800523d
 8004b74:	0800524e 	.word	0x0800524e

08004b78 <_sbrk_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	4d06      	ldr	r5, [pc, #24]	; (8004b94 <_sbrk_r+0x1c>)
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	4604      	mov	r4, r0
 8004b80:	4608      	mov	r0, r1
 8004b82:	602b      	str	r3, [r5, #0]
 8004b84:	f7fc fb6e 	bl	8001264 <_sbrk>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d102      	bne.n	8004b92 <_sbrk_r+0x1a>
 8004b8c:	682b      	ldr	r3, [r5, #0]
 8004b8e:	b103      	cbz	r3, 8004b92 <_sbrk_r+0x1a>
 8004b90:	6023      	str	r3, [r4, #0]
 8004b92:	bd38      	pop	{r3, r4, r5, pc}
 8004b94:	200000f4 	.word	0x200000f4

08004b98 <__sread>:
 8004b98:	b510      	push	{r4, lr}
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba0:	f000 fab2 	bl	8005108 <_read_r>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	bfab      	itete	ge
 8004ba8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004baa:	89a3      	ldrhlt	r3, [r4, #12]
 8004bac:	181b      	addge	r3, r3, r0
 8004bae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bb2:	bfac      	ite	ge
 8004bb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bb6:	81a3      	strhlt	r3, [r4, #12]
 8004bb8:	bd10      	pop	{r4, pc}

08004bba <__swrite>:
 8004bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bbe:	461f      	mov	r7, r3
 8004bc0:	898b      	ldrh	r3, [r1, #12]
 8004bc2:	05db      	lsls	r3, r3, #23
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	4616      	mov	r6, r2
 8004bca:	d505      	bpl.n	8004bd8 <__swrite+0x1e>
 8004bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f000 f9c8 	bl	8004f68 <_lseek_r>
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	4632      	mov	r2, r6
 8004be6:	463b      	mov	r3, r7
 8004be8:	4628      	mov	r0, r5
 8004bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bee:	f000 b869 	b.w	8004cc4 <_write_r>

08004bf2 <__sseek>:
 8004bf2:	b510      	push	{r4, lr}
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bfa:	f000 f9b5 	bl	8004f68 <_lseek_r>
 8004bfe:	1c43      	adds	r3, r0, #1
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	bf15      	itete	ne
 8004c04:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c0e:	81a3      	strheq	r3, [r4, #12]
 8004c10:	bf18      	it	ne
 8004c12:	81a3      	strhne	r3, [r4, #12]
 8004c14:	bd10      	pop	{r4, pc}

08004c16 <__sclose>:
 8004c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c1a:	f000 b8d3 	b.w	8004dc4 <_close_r>
	...

08004c20 <__swbuf_r>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	460e      	mov	r6, r1
 8004c24:	4614      	mov	r4, r2
 8004c26:	4605      	mov	r5, r0
 8004c28:	b118      	cbz	r0, 8004c32 <__swbuf_r+0x12>
 8004c2a:	6983      	ldr	r3, [r0, #24]
 8004c2c:	b90b      	cbnz	r3, 8004c32 <__swbuf_r+0x12>
 8004c2e:	f7ff fb81 	bl	8004334 <__sinit>
 8004c32:	4b21      	ldr	r3, [pc, #132]	; (8004cb8 <__swbuf_r+0x98>)
 8004c34:	429c      	cmp	r4, r3
 8004c36:	d12b      	bne.n	8004c90 <__swbuf_r+0x70>
 8004c38:	686c      	ldr	r4, [r5, #4]
 8004c3a:	69a3      	ldr	r3, [r4, #24]
 8004c3c:	60a3      	str	r3, [r4, #8]
 8004c3e:	89a3      	ldrh	r3, [r4, #12]
 8004c40:	071a      	lsls	r2, r3, #28
 8004c42:	d52f      	bpl.n	8004ca4 <__swbuf_r+0x84>
 8004c44:	6923      	ldr	r3, [r4, #16]
 8004c46:	b36b      	cbz	r3, 8004ca4 <__swbuf_r+0x84>
 8004c48:	6923      	ldr	r3, [r4, #16]
 8004c4a:	6820      	ldr	r0, [r4, #0]
 8004c4c:	1ac0      	subs	r0, r0, r3
 8004c4e:	6963      	ldr	r3, [r4, #20]
 8004c50:	b2f6      	uxtb	r6, r6
 8004c52:	4283      	cmp	r3, r0
 8004c54:	4637      	mov	r7, r6
 8004c56:	dc04      	bgt.n	8004c62 <__swbuf_r+0x42>
 8004c58:	4621      	mov	r1, r4
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	f000 f948 	bl	8004ef0 <_fflush_r>
 8004c60:	bb30      	cbnz	r0, 8004cb0 <__swbuf_r+0x90>
 8004c62:	68a3      	ldr	r3, [r4, #8]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	60a3      	str	r3, [r4, #8]
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	6022      	str	r2, [r4, #0]
 8004c6e:	701e      	strb	r6, [r3, #0]
 8004c70:	6963      	ldr	r3, [r4, #20]
 8004c72:	3001      	adds	r0, #1
 8004c74:	4283      	cmp	r3, r0
 8004c76:	d004      	beq.n	8004c82 <__swbuf_r+0x62>
 8004c78:	89a3      	ldrh	r3, [r4, #12]
 8004c7a:	07db      	lsls	r3, r3, #31
 8004c7c:	d506      	bpl.n	8004c8c <__swbuf_r+0x6c>
 8004c7e:	2e0a      	cmp	r6, #10
 8004c80:	d104      	bne.n	8004c8c <__swbuf_r+0x6c>
 8004c82:	4621      	mov	r1, r4
 8004c84:	4628      	mov	r0, r5
 8004c86:	f000 f933 	bl	8004ef0 <_fflush_r>
 8004c8a:	b988      	cbnz	r0, 8004cb0 <__swbuf_r+0x90>
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c90:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <__swbuf_r+0x9c>)
 8004c92:	429c      	cmp	r4, r3
 8004c94:	d101      	bne.n	8004c9a <__swbuf_r+0x7a>
 8004c96:	68ac      	ldr	r4, [r5, #8]
 8004c98:	e7cf      	b.n	8004c3a <__swbuf_r+0x1a>
 8004c9a:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <__swbuf_r+0xa0>)
 8004c9c:	429c      	cmp	r4, r3
 8004c9e:	bf08      	it	eq
 8004ca0:	68ec      	ldreq	r4, [r5, #12]
 8004ca2:	e7ca      	b.n	8004c3a <__swbuf_r+0x1a>
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f000 f81e 	bl	8004ce8 <__swsetup_r>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d0cb      	beq.n	8004c48 <__swbuf_r+0x28>
 8004cb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004cb4:	e7ea      	b.n	8004c8c <__swbuf_r+0x6c>
 8004cb6:	bf00      	nop
 8004cb8:	080051ec 	.word	0x080051ec
 8004cbc:	0800520c 	.word	0x0800520c
 8004cc0:	080051cc 	.word	0x080051cc

08004cc4 <_write_r>:
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	4d07      	ldr	r5, [pc, #28]	; (8004ce4 <_write_r+0x20>)
 8004cc8:	4604      	mov	r4, r0
 8004cca:	4608      	mov	r0, r1
 8004ccc:	4611      	mov	r1, r2
 8004cce:	2200      	movs	r2, #0
 8004cd0:	602a      	str	r2, [r5, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f7fc fa75 	bl	80011c2 <_write>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_write_r+0x1e>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_write_r+0x1e>
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	200000f4 	.word	0x200000f4

08004ce8 <__swsetup_r>:
 8004ce8:	4b32      	ldr	r3, [pc, #200]	; (8004db4 <__swsetup_r+0xcc>)
 8004cea:	b570      	push	{r4, r5, r6, lr}
 8004cec:	681d      	ldr	r5, [r3, #0]
 8004cee:	4606      	mov	r6, r0
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	b125      	cbz	r5, 8004cfe <__swsetup_r+0x16>
 8004cf4:	69ab      	ldr	r3, [r5, #24]
 8004cf6:	b913      	cbnz	r3, 8004cfe <__swsetup_r+0x16>
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	f7ff fb1b 	bl	8004334 <__sinit>
 8004cfe:	4b2e      	ldr	r3, [pc, #184]	; (8004db8 <__swsetup_r+0xd0>)
 8004d00:	429c      	cmp	r4, r3
 8004d02:	d10f      	bne.n	8004d24 <__swsetup_r+0x3c>
 8004d04:	686c      	ldr	r4, [r5, #4]
 8004d06:	89a3      	ldrh	r3, [r4, #12]
 8004d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d0c:	0719      	lsls	r1, r3, #28
 8004d0e:	d42c      	bmi.n	8004d6a <__swsetup_r+0x82>
 8004d10:	06dd      	lsls	r5, r3, #27
 8004d12:	d411      	bmi.n	8004d38 <__swsetup_r+0x50>
 8004d14:	2309      	movs	r3, #9
 8004d16:	6033      	str	r3, [r6, #0]
 8004d18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d1c:	81a3      	strh	r3, [r4, #12]
 8004d1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d22:	e03e      	b.n	8004da2 <__swsetup_r+0xba>
 8004d24:	4b25      	ldr	r3, [pc, #148]	; (8004dbc <__swsetup_r+0xd4>)
 8004d26:	429c      	cmp	r4, r3
 8004d28:	d101      	bne.n	8004d2e <__swsetup_r+0x46>
 8004d2a:	68ac      	ldr	r4, [r5, #8]
 8004d2c:	e7eb      	b.n	8004d06 <__swsetup_r+0x1e>
 8004d2e:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <__swsetup_r+0xd8>)
 8004d30:	429c      	cmp	r4, r3
 8004d32:	bf08      	it	eq
 8004d34:	68ec      	ldreq	r4, [r5, #12]
 8004d36:	e7e6      	b.n	8004d06 <__swsetup_r+0x1e>
 8004d38:	0758      	lsls	r0, r3, #29
 8004d3a:	d512      	bpl.n	8004d62 <__swsetup_r+0x7a>
 8004d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d3e:	b141      	cbz	r1, 8004d52 <__swsetup_r+0x6a>
 8004d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d44:	4299      	cmp	r1, r3
 8004d46:	d002      	beq.n	8004d4e <__swsetup_r+0x66>
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f000 f991 	bl	8005070 <_free_r>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	6363      	str	r3, [r4, #52]	; 0x34
 8004d52:	89a3      	ldrh	r3, [r4, #12]
 8004d54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d58:	81a3      	strh	r3, [r4, #12]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	6063      	str	r3, [r4, #4]
 8004d5e:	6923      	ldr	r3, [r4, #16]
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	f043 0308 	orr.w	r3, r3, #8
 8004d68:	81a3      	strh	r3, [r4, #12]
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	b94b      	cbnz	r3, 8004d82 <__swsetup_r+0x9a>
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d78:	d003      	beq.n	8004d82 <__swsetup_r+0x9a>
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	f000 f92b 	bl	8004fd8 <__smakebuf_r>
 8004d82:	89a0      	ldrh	r0, [r4, #12]
 8004d84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d88:	f010 0301 	ands.w	r3, r0, #1
 8004d8c:	d00a      	beq.n	8004da4 <__swsetup_r+0xbc>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60a3      	str	r3, [r4, #8]
 8004d92:	6963      	ldr	r3, [r4, #20]
 8004d94:	425b      	negs	r3, r3
 8004d96:	61a3      	str	r3, [r4, #24]
 8004d98:	6923      	ldr	r3, [r4, #16]
 8004d9a:	b943      	cbnz	r3, 8004dae <__swsetup_r+0xc6>
 8004d9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004da0:	d1ba      	bne.n	8004d18 <__swsetup_r+0x30>
 8004da2:	bd70      	pop	{r4, r5, r6, pc}
 8004da4:	0781      	lsls	r1, r0, #30
 8004da6:	bf58      	it	pl
 8004da8:	6963      	ldrpl	r3, [r4, #20]
 8004daa:	60a3      	str	r3, [r4, #8]
 8004dac:	e7f4      	b.n	8004d98 <__swsetup_r+0xb0>
 8004dae:	2000      	movs	r0, #0
 8004db0:	e7f7      	b.n	8004da2 <__swsetup_r+0xba>
 8004db2:	bf00      	nop
 8004db4:	2000000c 	.word	0x2000000c
 8004db8:	080051ec 	.word	0x080051ec
 8004dbc:	0800520c 	.word	0x0800520c
 8004dc0:	080051cc 	.word	0x080051cc

08004dc4 <_close_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4d06      	ldr	r5, [pc, #24]	; (8004de0 <_close_r+0x1c>)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	f7fc fa13 	bl	80011fa <_close>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_close_r+0x1a>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_close_r+0x1a>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	200000f4 	.word	0x200000f4

08004de4 <__sflush_r>:
 8004de4:	898a      	ldrh	r2, [r1, #12]
 8004de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dea:	4605      	mov	r5, r0
 8004dec:	0710      	lsls	r0, r2, #28
 8004dee:	460c      	mov	r4, r1
 8004df0:	d458      	bmi.n	8004ea4 <__sflush_r+0xc0>
 8004df2:	684b      	ldr	r3, [r1, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	dc05      	bgt.n	8004e04 <__sflush_r+0x20>
 8004df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	dc02      	bgt.n	8004e04 <__sflush_r+0x20>
 8004dfe:	2000      	movs	r0, #0
 8004e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e06:	2e00      	cmp	r6, #0
 8004e08:	d0f9      	beq.n	8004dfe <__sflush_r+0x1a>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e10:	682f      	ldr	r7, [r5, #0]
 8004e12:	602b      	str	r3, [r5, #0]
 8004e14:	d032      	beq.n	8004e7c <__sflush_r+0x98>
 8004e16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e18:	89a3      	ldrh	r3, [r4, #12]
 8004e1a:	075a      	lsls	r2, r3, #29
 8004e1c:	d505      	bpl.n	8004e2a <__sflush_r+0x46>
 8004e1e:	6863      	ldr	r3, [r4, #4]
 8004e20:	1ac0      	subs	r0, r0, r3
 8004e22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e24:	b10b      	cbz	r3, 8004e2a <__sflush_r+0x46>
 8004e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e28:	1ac0      	subs	r0, r0, r3
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e30:	6a21      	ldr	r1, [r4, #32]
 8004e32:	4628      	mov	r0, r5
 8004e34:	47b0      	blx	r6
 8004e36:	1c43      	adds	r3, r0, #1
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	d106      	bne.n	8004e4a <__sflush_r+0x66>
 8004e3c:	6829      	ldr	r1, [r5, #0]
 8004e3e:	291d      	cmp	r1, #29
 8004e40:	d82c      	bhi.n	8004e9c <__sflush_r+0xb8>
 8004e42:	4a2a      	ldr	r2, [pc, #168]	; (8004eec <__sflush_r+0x108>)
 8004e44:	40ca      	lsrs	r2, r1
 8004e46:	07d6      	lsls	r6, r2, #31
 8004e48:	d528      	bpl.n	8004e9c <__sflush_r+0xb8>
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	6062      	str	r2, [r4, #4]
 8004e4e:	04d9      	lsls	r1, r3, #19
 8004e50:	6922      	ldr	r2, [r4, #16]
 8004e52:	6022      	str	r2, [r4, #0]
 8004e54:	d504      	bpl.n	8004e60 <__sflush_r+0x7c>
 8004e56:	1c42      	adds	r2, r0, #1
 8004e58:	d101      	bne.n	8004e5e <__sflush_r+0x7a>
 8004e5a:	682b      	ldr	r3, [r5, #0]
 8004e5c:	b903      	cbnz	r3, 8004e60 <__sflush_r+0x7c>
 8004e5e:	6560      	str	r0, [r4, #84]	; 0x54
 8004e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e62:	602f      	str	r7, [r5, #0]
 8004e64:	2900      	cmp	r1, #0
 8004e66:	d0ca      	beq.n	8004dfe <__sflush_r+0x1a>
 8004e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e6c:	4299      	cmp	r1, r3
 8004e6e:	d002      	beq.n	8004e76 <__sflush_r+0x92>
 8004e70:	4628      	mov	r0, r5
 8004e72:	f000 f8fd 	bl	8005070 <_free_r>
 8004e76:	2000      	movs	r0, #0
 8004e78:	6360      	str	r0, [r4, #52]	; 0x34
 8004e7a:	e7c1      	b.n	8004e00 <__sflush_r+0x1c>
 8004e7c:	6a21      	ldr	r1, [r4, #32]
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4628      	mov	r0, r5
 8004e82:	47b0      	blx	r6
 8004e84:	1c41      	adds	r1, r0, #1
 8004e86:	d1c7      	bne.n	8004e18 <__sflush_r+0x34>
 8004e88:	682b      	ldr	r3, [r5, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0c4      	beq.n	8004e18 <__sflush_r+0x34>
 8004e8e:	2b1d      	cmp	r3, #29
 8004e90:	d001      	beq.n	8004e96 <__sflush_r+0xb2>
 8004e92:	2b16      	cmp	r3, #22
 8004e94:	d101      	bne.n	8004e9a <__sflush_r+0xb6>
 8004e96:	602f      	str	r7, [r5, #0]
 8004e98:	e7b1      	b.n	8004dfe <__sflush_r+0x1a>
 8004e9a:	89a3      	ldrh	r3, [r4, #12]
 8004e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ea0:	81a3      	strh	r3, [r4, #12]
 8004ea2:	e7ad      	b.n	8004e00 <__sflush_r+0x1c>
 8004ea4:	690f      	ldr	r7, [r1, #16]
 8004ea6:	2f00      	cmp	r7, #0
 8004ea8:	d0a9      	beq.n	8004dfe <__sflush_r+0x1a>
 8004eaa:	0793      	lsls	r3, r2, #30
 8004eac:	680e      	ldr	r6, [r1, #0]
 8004eae:	bf08      	it	eq
 8004eb0:	694b      	ldreq	r3, [r1, #20]
 8004eb2:	600f      	str	r7, [r1, #0]
 8004eb4:	bf18      	it	ne
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	eba6 0807 	sub.w	r8, r6, r7
 8004ebc:	608b      	str	r3, [r1, #8]
 8004ebe:	f1b8 0f00 	cmp.w	r8, #0
 8004ec2:	dd9c      	ble.n	8004dfe <__sflush_r+0x1a>
 8004ec4:	6a21      	ldr	r1, [r4, #32]
 8004ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ec8:	4643      	mov	r3, r8
 8004eca:	463a      	mov	r2, r7
 8004ecc:	4628      	mov	r0, r5
 8004ece:	47b0      	blx	r6
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	dc06      	bgt.n	8004ee2 <__sflush_r+0xfe>
 8004ed4:	89a3      	ldrh	r3, [r4, #12]
 8004ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eda:	81a3      	strh	r3, [r4, #12]
 8004edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ee0:	e78e      	b.n	8004e00 <__sflush_r+0x1c>
 8004ee2:	4407      	add	r7, r0
 8004ee4:	eba8 0800 	sub.w	r8, r8, r0
 8004ee8:	e7e9      	b.n	8004ebe <__sflush_r+0xda>
 8004eea:	bf00      	nop
 8004eec:	20400001 	.word	0x20400001

08004ef0 <_fflush_r>:
 8004ef0:	b538      	push	{r3, r4, r5, lr}
 8004ef2:	690b      	ldr	r3, [r1, #16]
 8004ef4:	4605      	mov	r5, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	b913      	cbnz	r3, 8004f00 <_fflush_r+0x10>
 8004efa:	2500      	movs	r5, #0
 8004efc:	4628      	mov	r0, r5
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
 8004f00:	b118      	cbz	r0, 8004f0a <_fflush_r+0x1a>
 8004f02:	6983      	ldr	r3, [r0, #24]
 8004f04:	b90b      	cbnz	r3, 8004f0a <_fflush_r+0x1a>
 8004f06:	f7ff fa15 	bl	8004334 <__sinit>
 8004f0a:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <_fflush_r+0x6c>)
 8004f0c:	429c      	cmp	r4, r3
 8004f0e:	d11b      	bne.n	8004f48 <_fflush_r+0x58>
 8004f10:	686c      	ldr	r4, [r5, #4]
 8004f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0ef      	beq.n	8004efa <_fflush_r+0xa>
 8004f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f1c:	07d0      	lsls	r0, r2, #31
 8004f1e:	d404      	bmi.n	8004f2a <_fflush_r+0x3a>
 8004f20:	0599      	lsls	r1, r3, #22
 8004f22:	d402      	bmi.n	8004f2a <_fflush_r+0x3a>
 8004f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f26:	f7ff faa3 	bl	8004470 <__retarget_lock_acquire_recursive>
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	4621      	mov	r1, r4
 8004f2e:	f7ff ff59 	bl	8004de4 <__sflush_r>
 8004f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f34:	07da      	lsls	r2, r3, #31
 8004f36:	4605      	mov	r5, r0
 8004f38:	d4e0      	bmi.n	8004efc <_fflush_r+0xc>
 8004f3a:	89a3      	ldrh	r3, [r4, #12]
 8004f3c:	059b      	lsls	r3, r3, #22
 8004f3e:	d4dd      	bmi.n	8004efc <_fflush_r+0xc>
 8004f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f42:	f7ff fa96 	bl	8004472 <__retarget_lock_release_recursive>
 8004f46:	e7d9      	b.n	8004efc <_fflush_r+0xc>
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <_fflush_r+0x70>)
 8004f4a:	429c      	cmp	r4, r3
 8004f4c:	d101      	bne.n	8004f52 <_fflush_r+0x62>
 8004f4e:	68ac      	ldr	r4, [r5, #8]
 8004f50:	e7df      	b.n	8004f12 <_fflush_r+0x22>
 8004f52:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <_fflush_r+0x74>)
 8004f54:	429c      	cmp	r4, r3
 8004f56:	bf08      	it	eq
 8004f58:	68ec      	ldreq	r4, [r5, #12]
 8004f5a:	e7da      	b.n	8004f12 <_fflush_r+0x22>
 8004f5c:	080051ec 	.word	0x080051ec
 8004f60:	0800520c 	.word	0x0800520c
 8004f64:	080051cc 	.word	0x080051cc

08004f68 <_lseek_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4d07      	ldr	r5, [pc, #28]	; (8004f88 <_lseek_r+0x20>)
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	4608      	mov	r0, r1
 8004f70:	4611      	mov	r1, r2
 8004f72:	2200      	movs	r2, #0
 8004f74:	602a      	str	r2, [r5, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f7fc f966 	bl	8001248 <_lseek>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d102      	bne.n	8004f86 <_lseek_r+0x1e>
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	b103      	cbz	r3, 8004f86 <_lseek_r+0x1e>
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
 8004f88:	200000f4 	.word	0x200000f4

08004f8c <__swhatbuf_r>:
 8004f8c:	b570      	push	{r4, r5, r6, lr}
 8004f8e:	460e      	mov	r6, r1
 8004f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f94:	2900      	cmp	r1, #0
 8004f96:	b096      	sub	sp, #88	; 0x58
 8004f98:	4614      	mov	r4, r2
 8004f9a:	461d      	mov	r5, r3
 8004f9c:	da08      	bge.n	8004fb0 <__swhatbuf_r+0x24>
 8004f9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	602a      	str	r2, [r5, #0]
 8004fa6:	061a      	lsls	r2, r3, #24
 8004fa8:	d410      	bmi.n	8004fcc <__swhatbuf_r+0x40>
 8004faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fae:	e00e      	b.n	8004fce <__swhatbuf_r+0x42>
 8004fb0:	466a      	mov	r2, sp
 8004fb2:	f000 f8bb 	bl	800512c <_fstat_r>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	dbf1      	blt.n	8004f9e <__swhatbuf_r+0x12>
 8004fba:	9a01      	ldr	r2, [sp, #4]
 8004fbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fc4:	425a      	negs	r2, r3
 8004fc6:	415a      	adcs	r2, r3
 8004fc8:	602a      	str	r2, [r5, #0]
 8004fca:	e7ee      	b.n	8004faa <__swhatbuf_r+0x1e>
 8004fcc:	2340      	movs	r3, #64	; 0x40
 8004fce:	2000      	movs	r0, #0
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	b016      	add	sp, #88	; 0x58
 8004fd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004fd8 <__smakebuf_r>:
 8004fd8:	898b      	ldrh	r3, [r1, #12]
 8004fda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004fdc:	079d      	lsls	r5, r3, #30
 8004fde:	4606      	mov	r6, r0
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	d507      	bpl.n	8004ff4 <__smakebuf_r+0x1c>
 8004fe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	6123      	str	r3, [r4, #16]
 8004fec:	2301      	movs	r3, #1
 8004fee:	6163      	str	r3, [r4, #20]
 8004ff0:	b002      	add	sp, #8
 8004ff2:	bd70      	pop	{r4, r5, r6, pc}
 8004ff4:	ab01      	add	r3, sp, #4
 8004ff6:	466a      	mov	r2, sp
 8004ff8:	f7ff ffc8 	bl	8004f8c <__swhatbuf_r>
 8004ffc:	9900      	ldr	r1, [sp, #0]
 8004ffe:	4605      	mov	r5, r0
 8005000:	4630      	mov	r0, r6
 8005002:	f7ff fa57 	bl	80044b4 <_malloc_r>
 8005006:	b948      	cbnz	r0, 800501c <__smakebuf_r+0x44>
 8005008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800500c:	059a      	lsls	r2, r3, #22
 800500e:	d4ef      	bmi.n	8004ff0 <__smakebuf_r+0x18>
 8005010:	f023 0303 	bic.w	r3, r3, #3
 8005014:	f043 0302 	orr.w	r3, r3, #2
 8005018:	81a3      	strh	r3, [r4, #12]
 800501a:	e7e3      	b.n	8004fe4 <__smakebuf_r+0xc>
 800501c:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <__smakebuf_r+0x7c>)
 800501e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	6020      	str	r0, [r4, #0]
 8005024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005028:	81a3      	strh	r3, [r4, #12]
 800502a:	9b00      	ldr	r3, [sp, #0]
 800502c:	6163      	str	r3, [r4, #20]
 800502e:	9b01      	ldr	r3, [sp, #4]
 8005030:	6120      	str	r0, [r4, #16]
 8005032:	b15b      	cbz	r3, 800504c <__smakebuf_r+0x74>
 8005034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005038:	4630      	mov	r0, r6
 800503a:	f000 f889 	bl	8005150 <_isatty_r>
 800503e:	b128      	cbz	r0, 800504c <__smakebuf_r+0x74>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	f023 0303 	bic.w	r3, r3, #3
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	81a3      	strh	r3, [r4, #12]
 800504c:	89a0      	ldrh	r0, [r4, #12]
 800504e:	4305      	orrs	r5, r0
 8005050:	81a5      	strh	r5, [r4, #12]
 8005052:	e7cd      	b.n	8004ff0 <__smakebuf_r+0x18>
 8005054:	080042cd 	.word	0x080042cd

08005058 <__malloc_lock>:
 8005058:	4801      	ldr	r0, [pc, #4]	; (8005060 <__malloc_lock+0x8>)
 800505a:	f7ff ba09 	b.w	8004470 <__retarget_lock_acquire_recursive>
 800505e:	bf00      	nop
 8005060:	200000e8 	.word	0x200000e8

08005064 <__malloc_unlock>:
 8005064:	4801      	ldr	r0, [pc, #4]	; (800506c <__malloc_unlock+0x8>)
 8005066:	f7ff ba04 	b.w	8004472 <__retarget_lock_release_recursive>
 800506a:	bf00      	nop
 800506c:	200000e8 	.word	0x200000e8

08005070 <_free_r>:
 8005070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005072:	2900      	cmp	r1, #0
 8005074:	d044      	beq.n	8005100 <_free_r+0x90>
 8005076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800507a:	9001      	str	r0, [sp, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	f1a1 0404 	sub.w	r4, r1, #4
 8005082:	bfb8      	it	lt
 8005084:	18e4      	addlt	r4, r4, r3
 8005086:	f7ff ffe7 	bl	8005058 <__malloc_lock>
 800508a:	4a1e      	ldr	r2, [pc, #120]	; (8005104 <_free_r+0x94>)
 800508c:	9801      	ldr	r0, [sp, #4]
 800508e:	6813      	ldr	r3, [r2, #0]
 8005090:	b933      	cbnz	r3, 80050a0 <_free_r+0x30>
 8005092:	6063      	str	r3, [r4, #4]
 8005094:	6014      	str	r4, [r2, #0]
 8005096:	b003      	add	sp, #12
 8005098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800509c:	f7ff bfe2 	b.w	8005064 <__malloc_unlock>
 80050a0:	42a3      	cmp	r3, r4
 80050a2:	d908      	bls.n	80050b6 <_free_r+0x46>
 80050a4:	6825      	ldr	r5, [r4, #0]
 80050a6:	1961      	adds	r1, r4, r5
 80050a8:	428b      	cmp	r3, r1
 80050aa:	bf01      	itttt	eq
 80050ac:	6819      	ldreq	r1, [r3, #0]
 80050ae:	685b      	ldreq	r3, [r3, #4]
 80050b0:	1949      	addeq	r1, r1, r5
 80050b2:	6021      	streq	r1, [r4, #0]
 80050b4:	e7ed      	b.n	8005092 <_free_r+0x22>
 80050b6:	461a      	mov	r2, r3
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	b10b      	cbz	r3, 80050c0 <_free_r+0x50>
 80050bc:	42a3      	cmp	r3, r4
 80050be:	d9fa      	bls.n	80050b6 <_free_r+0x46>
 80050c0:	6811      	ldr	r1, [r2, #0]
 80050c2:	1855      	adds	r5, r2, r1
 80050c4:	42a5      	cmp	r5, r4
 80050c6:	d10b      	bne.n	80050e0 <_free_r+0x70>
 80050c8:	6824      	ldr	r4, [r4, #0]
 80050ca:	4421      	add	r1, r4
 80050cc:	1854      	adds	r4, r2, r1
 80050ce:	42a3      	cmp	r3, r4
 80050d0:	6011      	str	r1, [r2, #0]
 80050d2:	d1e0      	bne.n	8005096 <_free_r+0x26>
 80050d4:	681c      	ldr	r4, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	6053      	str	r3, [r2, #4]
 80050da:	4421      	add	r1, r4
 80050dc:	6011      	str	r1, [r2, #0]
 80050de:	e7da      	b.n	8005096 <_free_r+0x26>
 80050e0:	d902      	bls.n	80050e8 <_free_r+0x78>
 80050e2:	230c      	movs	r3, #12
 80050e4:	6003      	str	r3, [r0, #0]
 80050e6:	e7d6      	b.n	8005096 <_free_r+0x26>
 80050e8:	6825      	ldr	r5, [r4, #0]
 80050ea:	1961      	adds	r1, r4, r5
 80050ec:	428b      	cmp	r3, r1
 80050ee:	bf04      	itt	eq
 80050f0:	6819      	ldreq	r1, [r3, #0]
 80050f2:	685b      	ldreq	r3, [r3, #4]
 80050f4:	6063      	str	r3, [r4, #4]
 80050f6:	bf04      	itt	eq
 80050f8:	1949      	addeq	r1, r1, r5
 80050fa:	6021      	streq	r1, [r4, #0]
 80050fc:	6054      	str	r4, [r2, #4]
 80050fe:	e7ca      	b.n	8005096 <_free_r+0x26>
 8005100:	b003      	add	sp, #12
 8005102:	bd30      	pop	{r4, r5, pc}
 8005104:	200000ec 	.word	0x200000ec

08005108 <_read_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4d07      	ldr	r5, [pc, #28]	; (8005128 <_read_r+0x20>)
 800510c:	4604      	mov	r4, r0
 800510e:	4608      	mov	r0, r1
 8005110:	4611      	mov	r1, r2
 8005112:	2200      	movs	r2, #0
 8005114:	602a      	str	r2, [r5, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	f7fc f836 	bl	8001188 <_read>
 800511c:	1c43      	adds	r3, r0, #1
 800511e:	d102      	bne.n	8005126 <_read_r+0x1e>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	b103      	cbz	r3, 8005126 <_read_r+0x1e>
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	bd38      	pop	{r3, r4, r5, pc}
 8005128:	200000f4 	.word	0x200000f4

0800512c <_fstat_r>:
 800512c:	b538      	push	{r3, r4, r5, lr}
 800512e:	4d07      	ldr	r5, [pc, #28]	; (800514c <_fstat_r+0x20>)
 8005130:	2300      	movs	r3, #0
 8005132:	4604      	mov	r4, r0
 8005134:	4608      	mov	r0, r1
 8005136:	4611      	mov	r1, r2
 8005138:	602b      	str	r3, [r5, #0]
 800513a:	f7fc f86a 	bl	8001212 <_fstat>
 800513e:	1c43      	adds	r3, r0, #1
 8005140:	d102      	bne.n	8005148 <_fstat_r+0x1c>
 8005142:	682b      	ldr	r3, [r5, #0]
 8005144:	b103      	cbz	r3, 8005148 <_fstat_r+0x1c>
 8005146:	6023      	str	r3, [r4, #0]
 8005148:	bd38      	pop	{r3, r4, r5, pc}
 800514a:	bf00      	nop
 800514c:	200000f4 	.word	0x200000f4

08005150 <_isatty_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	4d06      	ldr	r5, [pc, #24]	; (800516c <_isatty_r+0x1c>)
 8005154:	2300      	movs	r3, #0
 8005156:	4604      	mov	r4, r0
 8005158:	4608      	mov	r0, r1
 800515a:	602b      	str	r3, [r5, #0]
 800515c:	f7fc f869 	bl	8001232 <_isatty>
 8005160:	1c43      	adds	r3, r0, #1
 8005162:	d102      	bne.n	800516a <_isatty_r+0x1a>
 8005164:	682b      	ldr	r3, [r5, #0]
 8005166:	b103      	cbz	r3, 800516a <_isatty_r+0x1a>
 8005168:	6023      	str	r3, [r4, #0]
 800516a:	bd38      	pop	{r3, r4, r5, pc}
 800516c:	200000f4 	.word	0x200000f4

08005170 <_init>:
 8005170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005172:	bf00      	nop
 8005174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005176:	bc08      	pop	{r3}
 8005178:	469e      	mov	lr, r3
 800517a:	4770      	bx	lr

0800517c <_fini>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	bf00      	nop
 8005180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005182:	bc08      	pop	{r3}
 8005184:	469e      	mov	lr, r3
 8005186:	4770      	bx	lr
