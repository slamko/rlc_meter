
tlc_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005014  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800519c  0800519c  0001519c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051d0  080051d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080051d0  080051d0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051d0  080051d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051d0  080051d0  000151d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051d4  080051d4  000151d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000c0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127e6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b89  00000000  00000000  00032886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  00035410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bb0  00000000  00000000  000360c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d3db  00000000  00000000  00036c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010097  00000000  00000000  0005404b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adb27  00000000  00000000  000640e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00111c09  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036c0  00000000  00000000  00111c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005184 	.word	0x08005184

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005184 	.word	0x08005184

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <HAL_GPIO_EXTI_Callback>:
#include "outils.h"
}

bool adc_ready = false;

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	80fb      	strh	r3, [r7, #6]
	if (pin == START_BUTTON_PIN) {
 8000aaa:	88fb      	ldrh	r3, [r7, #6]
 8000aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ab0:	d102      	bne.n	8000ab8 <HAL_GPIO_EXTI_Callback+0x18>
		adc_ready = true;
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x24>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
	}
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	2000008c 	.word	0x2000008c

08000ac8 <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000000EEE5countEv>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	{ return __r; }
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <_Z7measureP19__ADC_HandleTypeDeftNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEEPtS6_>:

int measure(ADC_HandleTypeDef *adc, uint16_t supply_pin,
		std::chrono::microseconds sample_delay,
		uint16_t *v0, uint16_t *v) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	e9c7 2300 	strd	r2, r3, [r7]
 8000af0:	460b      	mov	r3, r1
 8000af2:	817b      	strh	r3, [r7, #10]

	  HAL_GPIO_WritePin(GPIOB, supply_pin, GPIO_PIN_SET);
 8000af4:	897b      	ldrh	r3, [r7, #10]
 8000af6:	2201      	movs	r2, #1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4825      	ldr	r0, [pc, #148]	; (8000b90 <_Z7measureP19__ADC_HandleTypeDeftNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEEPtS6_+0xac>)
 8000afc:	f001 ff1a 	bl	8002934 <HAL_GPIO_WritePin>
	  HAL_ADC_Start(adc);
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f000 ff05 	bl	8001910 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(adc, 1000) != HAL_OK) return 1;
 8000b06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f000 ffb6 	bl	8001a7c <HAL_ADC_PollForConversion>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	bf14      	ite	ne
 8000b16:	2301      	movne	r3, #1
 8000b18:	2300      	moveq	r3, #0
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <_Z7measureP19__ADC_HandleTypeDeftNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEEPtS6_+0x40>
 8000b20:	2301      	movs	r3, #1
 8000b22:	e030      	b.n	8000b86 <_Z7measureP19__ADC_HandleTypeDeftNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEEPtS6_+0xa2>
	  *v0 = HAL_ADC_GetValue(adc);
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f001 f877 	bl	8001c18 <HAL_ADC_GetValue>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	801a      	strh	r2, [r3, #0]

	  wait_us(sample_delay.count());
 8000b32:	463b      	mov	r3, r7
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ffc7 	bl	8000ac8 <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000000EEE5countEv>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	4613      	mov	r3, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fa0e 	bl	8000f62 <wait_us>

	  HAL_ADC_Start(adc);
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f000 fee2 	bl	8001910 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(adc, 1000) != HAL_OK) return 1;
 8000b4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f000 ff93 	bl	8001a7c <HAL_ADC_PollForConversion>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	bf14      	ite	ne
 8000b5c:	2301      	movne	r3, #1
 8000b5e:	2300      	moveq	r3, #0
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <_Z7measureP19__ADC_HandleTypeDeftNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEEPtS6_+0x86>
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00d      	b.n	8000b86 <_Z7measureP19__ADC_HandleTypeDeftNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEEPtS6_+0xa2>

	  *v = HAL_ADC_GetValue(adc);
 8000b6a:	68f8      	ldr	r0, [r7, #12]
 8000b6c:	f001 f854 	bl	8001c18 <HAL_ADC_GetValue>
 8000b70:	4603      	mov	r3, r0
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB, supply_pin, GPIO_PIN_RESET);
 8000b78:	897b      	ldrh	r3, [r7, #10]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4804      	ldr	r0, [pc, #16]	; (8000b90 <_Z7measureP19__ADC_HandleTypeDeftNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEEPtS6_+0xac>)
 8000b80:	f001 fed8 	bl	8002934 <HAL_GPIO_WritePin>

	  return 0;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	48000400 	.word	0x48000400

08000b94 <_ZN4UnitIyEcvyEv>:

template <class Data>
struct Unit {
	Data val;

	operator Data() {
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
		return val;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
	}
 8000ba2:	4610      	mov	r0, r2
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb4:	f000 fcb4 	bl	8001520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb8:	f000 f814 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbc:	f000 f93e 	bl	8000e3c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000bc0:	f000 f86a 	bl	8000c98 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000bc4:	f000 f8c6 	bl	8000d54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <main+0x2c>)
 8000bca:	f003 fa85 	bl	80040d8 <HAL_TIM_Base_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4803      	ldr	r0, [pc, #12]	; (8000be0 <main+0x30>)
 8000bd2:	f001 f82e 	bl	8001c32 <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //capameter();
	  selfmeter();
 8000bd6:	f000 fa77 	bl	80010c8 <selfmeter>
 8000bda:	e7fc      	b.n	8000bd6 <main+0x26>
 8000bdc:	200000e0 	.word	0x200000e0
 8000be0:	20000090 	.word	0x20000090

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b096      	sub	sp, #88	; 0x58
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bee:	2228      	movs	r2, #40	; 0x28
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f004 fabe 	bl	8005174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]
 8000c16:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c20:	2310      	movs	r3, #16
 8000c22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c24:	2302      	movs	r3, #2
 8000c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c2c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c30:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c36:	4618      	mov	r0, r3
 8000c38:	f001 feac 	bl	8002994 <HAL_RCC_OscConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c42:	f000 f989 	bl	8000f58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c46:	230f      	movs	r3, #15
 8000c48:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	2102      	movs	r1, #2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 fed4 	bl	8003a10 <HAL_RCC_ClockConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c6e:	f000 f973 	bl	8000f58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7a:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f003 f8ac 	bl	8003ddc <HAL_RCCEx_PeriphCLKConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c8a:	f000 f965 	bl	8000f58 <Error_Handler>
  }
}
 8000c8e:	bf00      	nop
 8000c90:	3758      	adds	r7, #88	; 0x58
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
 8000cac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cb0:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <MX_ADC2_Init+0xb8>)
 8000cb2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cf6:	2204      	movs	r2, #4
 8000cf8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d06:	4811      	ldr	r0, [pc, #68]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d08:	f000 fc70 	bl	80015ec <HAL_ADC_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000d12:	f000 f921 	bl	8000f58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d16:	2301      	movs	r3, #1
 8000d18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_ADC2_Init+0xb4>)
 8000d34:	f000 fff0 	bl	8001d18 <HAL_ADC_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000d3e:	f000 f90b 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000090 	.word	0x20000090
 8000d50:	50000100 	.word	0x50000100

08000d54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08e      	sub	sp, #56	; 0x38
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d74:	463b      	mov	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]
 8000d82:	615a      	str	r2, [r3, #20]
 8000d84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d86:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <MX_TIM2_Init+0xe4>)
 8000d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000d8e:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <MX_TIM2_Init+0xe4>)
 8000d90:	223f      	movs	r2, #63	; 0x3f
 8000d92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <MX_TIM2_Init+0xe4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <MX_TIM2_Init+0xe4>)
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da2:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <MX_TIM2_Init+0xe4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <MX_TIM2_Init+0xe4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dae:	4822      	ldr	r0, [pc, #136]	; (8000e38 <MX_TIM2_Init+0xe4>)
 8000db0:	f003 f93a 	bl	8004028 <HAL_TIM_Base_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000dba:	f000 f8cd 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481b      	ldr	r0, [pc, #108]	; (8000e38 <MX_TIM2_Init+0xe4>)
 8000dcc:	f003 fab4 	bl	8004338 <HAL_TIM_ConfigClockSource>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000dd6:	f000 f8bf 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000dda:	4817      	ldr	r0, [pc, #92]	; (8000e38 <MX_TIM2_Init+0xe4>)
 8000ddc:	f003 f9d0 	bl	8004180 <HAL_TIM_OC_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000de6:	f000 f8b7 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	480f      	ldr	r0, [pc, #60]	; (8000e38 <MX_TIM2_Init+0xe4>)
 8000dfa:	f003 ff1f 	bl	8004c3c <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e04:	f000 f8a8 	bl	8000f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <MX_TIM2_Init+0xe4>)
 8000e20:	f003 fa10 	bl	8004244 <HAL_TIM_OC_ConfigChannel>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000e2a:	f000 f895 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	3738      	adds	r7, #56	; 0x38
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000e0 	.word	0x200000e0

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e52:	4b3e      	ldr	r3, [pc, #248]	; (8000f4c <MX_GPIO_Init+0x110>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	4a3d      	ldr	r2, [pc, #244]	; (8000f4c <MX_GPIO_Init+0x110>)
 8000e58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e5c:	6153      	str	r3, [r2, #20]
 8000e5e:	4b3b      	ldr	r3, [pc, #236]	; (8000f4c <MX_GPIO_Init+0x110>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b38      	ldr	r3, [pc, #224]	; (8000f4c <MX_GPIO_Init+0x110>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a37      	ldr	r2, [pc, #220]	; (8000f4c <MX_GPIO_Init+0x110>)
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	6153      	str	r3, [r2, #20]
 8000e76:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <MX_GPIO_Init+0x110>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <MX_GPIO_Init+0x110>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	4a31      	ldr	r2, [pc, #196]	; (8000f4c <MX_GPIO_Init+0x110>)
 8000e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e8c:	6153      	str	r3, [r2, #20]
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <MX_GPIO_Init+0x110>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	482c      	ldr	r0, [pc, #176]	; (8000f50 <MX_GPIO_Init+0x114>)
 8000ea0:	f001 fd48 	bl	8002934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_8
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f640 110b 	movw	r1, #2315	; 0x90b
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f001 fd41 	bl	8002934 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2130      	movs	r1, #48	; 0x30
 8000eb6:	4827      	ldr	r0, [pc, #156]	; (8000f54 <MX_GPIO_Init+0x118>)
 8000eb8:	f001 fd3c 	bl	8002934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	481f      	ldr	r0, [pc, #124]	; (8000f50 <MX_GPIO_Init+0x114>)
 8000ed4:	f001 fbbc 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA3 PA8
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_8
 8000ed8:	f640 130b 	movw	r3, #2315	; 0x90b
 8000edc:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eea:	f107 030c 	add.w	r3, r7, #12
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef4:	f001 fbac 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000efe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f001 fb9d 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f16:	2330      	movs	r3, #48	; 0x30
 8000f18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <MX_GPIO_Init+0x118>)
 8000f2e:	f001 fb8f 	bl	8002650 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2028      	movs	r0, #40	; 0x28
 8000f38:	f001 fb53 	bl	80025e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f3c:	2028      	movs	r0, #40	; 0x28
 8000f3e:	f001 fb6c 	bl	800261a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f42:	bf00      	nop
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	48001400 	.word	0x48001400
 8000f54:	48000400 	.word	0x48000400

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>

08000f62 <wait_us>:


#include "main.h"
#include "outils.h"

void wait_us(unsigned long delay) {
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	TIM2->CNT = 0;
 8000f6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24

	while(TIM2->CNT < delay);
 8000f72:	bf00      	nop
 8000f74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f9      	bhi.n	8000f74 <wait_us+0x12>
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <_Z9self_calcNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEE3Restt>:
	#include "lcd.h"
}

using namespace std::chrono;

Self self_calc(microseconds charge_time, Res res, uint16_t vc0, uint16_t vc) {
 8000f8e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8000f9a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double ln = log((double)vc0 / (double)vc);
 8000f9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fa52 	bl	800044c <__aeabi_ui2d>
 8000fa8:	4680      	mov	r8, r0
 8000faa:	4689      	mov	r9, r1
 8000fac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fa4b 	bl	800044c <__aeabi_ui2d>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4640      	mov	r0, r8
 8000fbc:	4649      	mov	r1, r9
 8000fbe:	f7ff fbe9 	bl	8000794 <__aeabi_ddiv>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	ec43 2b17 	vmov	d7, r2, r3
 8000fca:	eeb0 0a47 	vmov.f32	s0, s14
 8000fce:	eef0 0a67 	vmov.f32	s1, s15
 8000fd2:	f003 fea1 	bl	8004d18 <log>
 8000fd6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	return Self::h(((charge_time.count() * 1000 * 1000 * res) / ln));
 8000fda:	f107 0320 	add.w	r3, r7, #32
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fd72 	bl	8000ac8 <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000000EEE5countEv>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4690      	mov	r8, r2
 8000fea:	4699      	mov	r9, r3
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fdcf 	bl	8000b94 <_ZN4UnitIyEcvyEv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	fb02 f009 	mul.w	r0, r2, r9
 8000ffe:	fb08 f103 	mul.w	r1, r8, r3
 8001002:	4401      	add	r1, r0
 8001004:	fba8 4502 	umull	r4, r5, r8, r2
 8001008:	194b      	adds	r3, r1, r5
 800100a:	461d      	mov	r5, r3
 800100c:	4622      	mov	r2, r4
 800100e:	462b      	mov	r3, r5
 8001010:	f04f 0000 	mov.w	r0, #0
 8001014:	f04f 0100 	mov.w	r1, #0
 8001018:	0159      	lsls	r1, r3, #5
 800101a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800101e:	0150      	lsls	r0, r2, #5
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	ebb2 0a04 	subs.w	sl, r2, r4
 8001028:	eb63 0b05 	sbc.w	fp, r3, r5
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	ea4f 234b 	mov.w	r3, fp, lsl #9
 8001038:	ea43 53da 	orr.w	r3, r3, sl, lsr #23
 800103c:	ea4f 224a 	mov.w	r2, sl, lsl #9
 8001040:	4692      	mov	sl, r2
 8001042:	469b      	mov	fp, r3
 8001044:	eb1a 0304 	adds.w	r3, sl, r4
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	eb4b 0305 	adc.w	r3, fp, r5
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800105c:	4649      	mov	r1, r9
 800105e:	018b      	lsls	r3, r1, #6
 8001060:	4641      	mov	r1, r8
 8001062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001066:	4641      	mov	r1, r8
 8001068:	018a      	lsls	r2, r1, #6
 800106a:	4641      	mov	r1, r8
 800106c:	1a51      	subs	r1, r2, r1
 800106e:	6039      	str	r1, [r7, #0]
 8001070:	4649      	mov	r1, r9
 8001072:	eb63 0301 	sbc.w	r3, r3, r1
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	e9d7 1200 	ldrd	r1, r2, [r7]
 800107c:	460b      	mov	r3, r1
 800107e:	191b      	adds	r3, r3, r4
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	4613      	mov	r3, r2
 8001084:	eb45 0303 	adc.w	r3, r5, r3
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800108e:	f7ff fa21 	bl	80004d4 <__aeabi_ul2d>
 8001092:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001096:	f7ff fb7d 	bl	8000794 <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	ec43 2b17 	vmov	d7, r2, r3
 80010a2:	eeb0 0a47 	vmov.f32	s0, s14
 80010a6:	eef0 0a67 	vmov.f32	s1, s15
 80010aa:	f000 f9bb 	bl	8001424 <_ZN4Self1hEe>
 80010ae:	eeb0 7a40 	vmov.f32	s14, s0
 80010b2:	eef0 7a60 	vmov.f32	s15, s1
}
 80010b6:	eeb0 0a47 	vmov.f32	s0, s14
 80010ba:	eef0 0a67 	vmov.f32	s1, s15
 80010be:	3730      	adds	r7, #48	; 0x30
 80010c0:	46bd      	mov	sp, r7
 80010c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080010c8 <selfmeter>:

extern "C" void selfmeter(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08c      	sub	sp, #48	; 0x30
 80010cc:	af02      	add	r7, sp, #8
	  if (adc_ready) {
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <selfmeter+0x7c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d031      	beq.n	800113a <selfmeter+0x72>
		  uint16_t init_val, val;

		  measure(&hadc2, GPIO_PIN_4, 10000us, &init_val, &val);
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f836 	bl	800114c <_ZNSt8literals15chrono_literalsli2usIJLc49ELc48ELc48ELc48ELc48EEEENSt6chrono8durationIxSt5ratioILx1ELx1000000EEEEv>
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	f107 030e 	add.w	r3, r7, #14
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010f0:	2110      	movs	r1, #16
 80010f2:	4815      	ldr	r0, [pc, #84]	; (8001148 <selfmeter+0x80>)
 80010f4:	f7ff fcf6 	bl	8000ae4 <_Z7measureP19__ADC_HandleTypeDeftNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEEPtS6_>

		  Self self = self_calc(10000us, 10_Ohm, init_val, val);
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f825 	bl	800114c <_ZNSt8literals15chrono_literalsli2usIJLc49ELc48ELc48ELc48ELc48EEEENSt6chrono8durationIxSt5ratioILx1ELx1000000EEEEv>
 8001102:	f107 0120 	add.w	r1, r7, #32
 8001106:	f04f 020a 	mov.w	r2, #10
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	4608      	mov	r0, r1
 8001110:	f000 f963 	bl	80013da <_Zli4_Ohmy>
 8001114:	89fb      	ldrh	r3, [r7, #14]
 8001116:	89ba      	ldrh	r2, [r7, #12]
 8001118:	9201      	str	r2, [sp, #4]
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001120:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001124:	f7ff ff33 	bl	8000f8e <_Z9self_calcNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEE3Restt>
 8001128:	eeb0 7a40 	vmov.f32	s14, s0
 800112c:	eef0 7a60 	vmov.f32	s15, s1
 8001130:	ed87 7b00 	vstr	d7, [r7]

		 // lcd_clear();
		 // lcd_ret_home();
		 // print_num(capa.val / 1000000);
		  adc_ready = false;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <selfmeter+0x7c>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
	  }
}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000008c 	.word	0x2000008c
 8001148:	20000090 	.word	0x20000090

0800114c <_ZNSt8literals15chrono_literalsli2usIJLc49ELc48ELc48ELc48ELc48EEEENSt6chrono8durationIxSt5ratioILx1ELx1000000EEEEv>:
    { return chrono::duration<long double, micro>{__usecs}; }

    /// Literal suffix for durations of type `std::chrono::microseconds`
    template <char... _Digits>
      constexpr chrono::microseconds
      operator""us()
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::microseconds, _Digits...>(); }
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f805 	bl	8001166 <_ZNSt8literals15chrono_literals16__check_overflowINSt6chrono8durationIxSt5ratioILx1ELx1000000EEEEJLc49ELc48ELc48ELc48ELc48EEEET_v>
 800115c:	bf00      	nop
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_ZNSt8literals15chrono_literals16__check_overflowINSt6chrono8durationIxSt5ratioILx1ELx1000000EEEEJLc49ELc48ELc48ELc48ELc48EEEET_v>:
      constexpr _Dur __check_overflow()
 8001166:	b580      	push	{r7, lr}
 8001168:	b084      	sub	sp, #16
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
 800116e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001172:	f04f 0300 	mov.w	r3, #0
 8001176:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	4619      	mov	r1, r3
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f804 	bl	800118e <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEC1IxvEERKT_>
      }
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000000EEEC1IxvEERKT_>:
	  constexpr explicit duration(const _Rep2& __rep)
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	6879      	ldr	r1, [r7, #4]
 80011a0:	e9c1 2300 	strd	r2, r3, [r1]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <HAL_MspInit+0x44>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <HAL_MspInit+0x44>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6193      	str	r3, [r2, #24]
 80011c6:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <HAL_MspInit+0x44>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_MspInit+0x44>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <HAL_MspInit+0x44>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	61d3      	str	r3, [r2, #28]
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_MspInit+0x44>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000

080011fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a15      	ldr	r2, [pc, #84]	; (8001270 <HAL_ADC_MspInit+0x74>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d124      	bne.n	8001268 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_ADC_MspInit+0x78>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	4a14      	ldr	r2, [pc, #80]	; (8001274 <HAL_ADC_MspInit+0x78>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6153      	str	r3, [r2, #20]
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_ADC_MspInit+0x78>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <HAL_ADC_MspInit+0x78>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4a0e      	ldr	r2, [pc, #56]	; (8001274 <HAL_ADC_MspInit+0x78>)
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	6153      	str	r3, [r2, #20]
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_ADC_MspInit+0x78>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800124e:	2310      	movs	r3, #16
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001252:	2303      	movs	r3, #3
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001264:	f001 f9f4 	bl	8002650 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	50000100 	.word	0x50000100
 8001274:	40021000 	.word	0x40021000

08001278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001288:	d10b      	bne.n	80012a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_TIM_Base_MspInit+0x38>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_TIM_Base_MspInit+0x38>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	61d3      	str	r3, [r2, #28]
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_TIM_Base_MspInit+0x38>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <NMI_Handler+0x4>

080012ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012be:	e7fe      	b.n	80012be <HardFault_Handler+0x4>

080012c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <MemManage_Handler+0x4>

080012c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001300:	f000 f954 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800130c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001310:	f001 fb28 	bl	8002964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <_ZN3ResCI14UnitIyEEy>:
protected:
	explicit Unit(Data val);
};

struct Res : public Unit<unsigned long long> {
	using Unit::Unit;
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	e9c7 2300 	strd	r2, r3, [r7]
 8001348:	68f9      	ldr	r1, [r7, #12]
 800134a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800134e:	4608      	mov	r0, r1
 8001350:	f000 f898 	bl	8001484 <_ZN4UnitIyEC1Ey>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <_ZN3Res4kohmEy>:
#include "units.h"

template <class Data>
Unit<Data>::Unit(Data val) : val(val) {}

Res Res::kohm(unsigned long long val) {
 800135e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	e9c7 2300 	strd	r2, r3, [r7]
	return Res(val * 1000);
 800136c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	f04f 0a00 	mov.w	sl, #0
 8001378:	f04f 0b00 	mov.w	fp, #0
 800137c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001380:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001384:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001388:	4652      	mov	r2, sl
 800138a:	465b      	mov	r3, fp
 800138c:	1a14      	subs	r4, r2, r0
 800138e:	eb63 0501 	sbc.w	r5, r3, r1
 8001392:	f04f 0200 	mov.w	r2, #0
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	00ab      	lsls	r3, r5, #2
 800139c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80013a0:	00a2      	lsls	r2, r4, #2
 80013a2:	4614      	mov	r4, r2
 80013a4:	461d      	mov	r5, r3
 80013a6:	eb14 0800 	adds.w	r8, r4, r0
 80013aa:	eb45 0901 	adc.w	r9, r5, r1
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013c2:	4690      	mov	r8, r2
 80013c4:	4699      	mov	r9, r3
 80013c6:	4642      	mov	r2, r8
 80013c8:	464b      	mov	r3, r9
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff ffb6 	bl	800133c <_ZN3ResCI14UnitIyEEy>
}
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080013da <_Zli4_Ohmy>:

Capa Capa::pf(long double val) {
	return Capa(val);
}

Res operator ""_Ohm(unsigned long long val) {
 80013da:	b580      	push	{r7, lr}
 80013dc:	b084      	sub	sp, #16
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	e9c7 2300 	strd	r2, r3, [r7]
	return Res::kohm(val);
 80013e6:	68f9      	ldr	r1, [r7, #12]
 80013e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013ec:	4608      	mov	r0, r1
 80013ee:	f7ff ffb6 	bl	800135e <_ZN3Res4kohmEy>
}
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_ZN4SelfCI14UnitIeEEe>:
	static Capa nf(long double);
	static Capa pf(long double);
};

struct Self : public Unit<long double>{
	using Unit::Unit;
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	ed87 0b00 	vstr	d0, [r7]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	ed97 7b00 	vldr	d7, [r7]
 800140c:	eeb0 0a47 	vmov.f32	s0, s14
 8001410:	eef0 0a67 	vmov.f32	s1, s15
 8001414:	4618      	mov	r0, r3
 8001416:	f000 f847 	bl	80014a8 <_ZN4UnitIeEC1Ee>
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_ZN4Self1hEe>:

Capa operator ""_pF(long double val) {
	return Capa::pf(val);
}

Self Self::h(long double val) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	ed87 0b00 	vstr	d0, [r7]
	return Self(val * 1000 * 1000);
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <_ZN4Self1hEe+0x5c>)
 8001434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001438:	f7ff f882 	bl	8000540 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <_ZN4Self1hEe+0x5c>)
 800144a:	f7ff f879 	bl	8000540 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	ec43 2b17 	vmov	d7, r2, r3
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	eeb0 0a47 	vmov.f32	s0, s14
 800145e:	eef0 0a67 	vmov.f32	s1, s15
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ffc9 	bl	80013fa <_ZN4SelfCI14UnitIeEEe>
 8001468:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800146c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001470:	eeb0 0a47 	vmov.f32	s0, s14
 8001474:	eef0 0a67 	vmov.f32	s1, s15
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	408f4000 	.word	0x408f4000

08001484 <_ZN4UnitIyEC1Ey>:
Unit<Data>::Unit(Data val) : val(val) {}
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	e9c7 2300 	strd	r2, r3, [r7]
 8001490:	68f9      	ldr	r1, [r7, #12]
 8001492:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001496:	e9c1 2300 	strd	r2, r3, [r1]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN4UnitIeEC1Ee>:
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	ed87 0b00 	vstr	d0, [r7]
 80014b4:	68f9      	ldr	r1, [r7, #12]
 80014b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014ba:	e9c1 2300 	strd	r2, r3, [r1]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001504 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d0:	f7ff ff22 	bl	8001318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <LoopForever+0x6>)
  ldr r1, =_edata
 80014d6:	490d      	ldr	r1, [pc, #52]	; (800150c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d8:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <LoopForever+0xe>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014ec:	4c0a      	ldr	r4, [pc, #40]	; (8001518 <LoopForever+0x16>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fa:	f003 fe17 	bl	800512c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014fe:	f7ff fb57 	bl	8000bb0 <main>

08001502 <LoopForever>:

LoopForever:
    b LoopForever
 8001502:	e7fe      	b.n	8001502 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001504:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800150c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001510:	080051d8 	.word	0x080051d8
  ldr r2, =_sbss
 8001514:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001518:	20000130 	.word	0x20000130

0800151c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC1_2_IRQHandler>
	...

08001520 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <HAL_Init+0x28>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a07      	ldr	r2, [pc, #28]	; (8001548 <HAL_Init+0x28>)
 800152a:	f043 0310 	orr.w	r3, r3, #16
 800152e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001530:	2003      	movs	r0, #3
 8001532:	f001 f84b 	bl	80025cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001536:	200f      	movs	r0, #15
 8001538:	f000 f808 	bl	800154c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800153c:	f7ff fe3a 	bl	80011b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40022000 	.word	0x40022000

0800154c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_InitTick+0x54>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <HAL_InitTick+0x58>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001562:	fbb3 f3f1 	udiv	r3, r3, r1
 8001566:	fbb2 f3f3 	udiv	r3, r2, r3
 800156a:	4618      	mov	r0, r3
 800156c:	f001 f863 	bl	8002636 <HAL_SYSTICK_Config>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e00e      	b.n	8001598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d80a      	bhi.n	8001596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001580:	2200      	movs	r2, #0
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001588:	f001 f82b 	bl	80025e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800158c:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <HAL_InitTick+0x5c>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e000      	b.n	8001598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000000 	.word	0x20000000
 80015a4:	20000008 	.word	0x20000008
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000008 	.word	0x20000008
 80015d0:	2000012c 	.word	0x2000012c

080015d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	2000012c 	.word	0x2000012c

080015ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b09a      	sub	sp, #104	; 0x68
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e172      	b.n	80018f2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	2b00      	cmp	r3, #0
 800161c:	d176      	bne.n	800170c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	2b00      	cmp	r3, #0
 8001624:	d152      	bne.n	80016cc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff fddb 	bl	80011fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d13b      	bne.n	80016cc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 fe83 	bl	8002360 <ADC_Disable>
 800165a:	4603      	mov	r3, r0
 800165c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f003 0310 	and.w	r3, r3, #16
 8001668:	2b00      	cmp	r3, #0
 800166a:	d12f      	bne.n	80016cc <HAL_ADC_Init+0xe0>
 800166c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001670:	2b00      	cmp	r3, #0
 8001672:	d12b      	bne.n	80016cc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800167c:	f023 0302 	bic.w	r3, r3, #2
 8001680:	f043 0202 	orr.w	r2, r3, #2
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001696:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016a8:	4b94      	ldr	r3, [pc, #592]	; (80018fc <HAL_ADC_Init+0x310>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a94      	ldr	r2, [pc, #592]	; (8001900 <HAL_ADC_Init+0x314>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	0c9a      	lsrs	r2, r3, #18
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016be:	e002      	b.n	80016c6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1f9      	bne.n	80016c0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d007      	beq.n	80016ea <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016e8:	d110      	bne.n	800170c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f023 0312 	bic.w	r3, r3, #18
 80016f2:	f043 0210 	orr.w	r2, r3, #16
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f043 0201 	orr.w	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f003 0310 	and.w	r3, r3, #16
 8001714:	2b00      	cmp	r3, #0
 8001716:	f040 80df 	bne.w	80018d8 <HAL_ADC_Init+0x2ec>
 800171a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 80da 	bne.w	80018d8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800172e:	2b00      	cmp	r3, #0
 8001730:	f040 80d2 	bne.w	80018d8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800173c:	f043 0202 	orr.w	r2, r3, #2
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001744:	4b6f      	ldr	r3, [pc, #444]	; (8001904 <HAL_ADC_Init+0x318>)
 8001746:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001750:	d102      	bne.n	8001758 <HAL_ADC_Init+0x16c>
 8001752:	4b6d      	ldr	r3, [pc, #436]	; (8001908 <HAL_ADC_Init+0x31c>)
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	e002      	b.n	800175e <HAL_ADC_Init+0x172>
 8001758:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800175c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b01      	cmp	r3, #1
 800176a:	d108      	bne.n	800177e <HAL_ADC_Init+0x192>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_ADC_Init+0x192>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_ADC_Init+0x194>
 800177e:	2300      	movs	r3, #0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d11c      	bne.n	80017be <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001784:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001786:	2b00      	cmp	r3, #0
 8001788:	d010      	beq.n	80017ac <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d107      	bne.n	80017a6 <HAL_ADC_Init+0x1ba>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_ADC_Init+0x1ba>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <HAL_ADC_Init+0x1bc>
 80017a6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d108      	bne.n	80017be <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80017ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	431a      	orrs	r2, r3
 80017ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017bc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7e5b      	ldrb	r3, [r3, #25]
 80017c2:	035b      	lsls	r3, r3, #13
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017c8:	2a01      	cmp	r2, #1
 80017ca:	d002      	beq.n	80017d2 <HAL_ADC_Init+0x1e6>
 80017cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017d0:	e000      	b.n	80017d4 <HAL_ADC_Init+0x1e8>
 80017d2:	2200      	movs	r2, #0
 80017d4:	431a      	orrs	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017e4:	4313      	orrs	r3, r2
 80017e6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d11b      	bne.n	800182a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7e5b      	ldrb	r3, [r3, #25]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	3b01      	subs	r3, #1
 8001800:	045a      	lsls	r2, r3, #17
 8001802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001804:	4313      	orrs	r3, r2
 8001806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180a:	663b      	str	r3, [r7, #96]	; 0x60
 800180c:	e00d      	b.n	800182a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001816:	f043 0220 	orr.w	r2, r3, #32
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f043 0201 	orr.w	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	2b01      	cmp	r3, #1
 8001830:	d007      	beq.n	8001842 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	4313      	orrs	r3, r2
 800183c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800183e:	4313      	orrs	r3, r2
 8001840:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b00      	cmp	r3, #0
 800184e:	d114      	bne.n	800187a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800185e:	f023 0302 	bic.w	r3, r3, #2
 8001862:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	7e1b      	ldrb	r3, [r3, #24]
 8001868:	039a      	lsls	r2, r3, #14
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4313      	orrs	r3, r2
 8001874:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001876:	4313      	orrs	r3, r2
 8001878:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <HAL_ADC_Init+0x320>)
 8001882:	4013      	ands	r3, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800188a:	430b      	orrs	r3, r1
 800188c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d10c      	bne.n	80018b0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	f023 010f 	bic.w	r1, r3, #15
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	1e5a      	subs	r2, r3, #1
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	631a      	str	r2, [r3, #48]	; 0x30
 80018ae:	e007      	b.n	80018c0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 020f 	bic.w	r2, r2, #15
 80018be:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f023 0303 	bic.w	r3, r3, #3
 80018ce:	f043 0201 	orr.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
 80018d6:	e00a      	b.n	80018ee <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f023 0312 	bic.w	r3, r3, #18
 80018e0:	f043 0210 	orr.w	r2, r3, #16
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80018e8:	2301      	movs	r3, #1
 80018ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80018ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3768      	adds	r7, #104	; 0x68
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000000 	.word	0x20000000
 8001900:	431bde83 	.word	0x431bde83
 8001904:	50000300 	.word	0x50000300
 8001908:	50000100 	.word	0x50000100
 800190c:	fff0c007 	.word	0xfff0c007

08001910 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 809c 	bne.w	8001a64 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_ADC_Start+0x2a>
 8001936:	2302      	movs	r3, #2
 8001938:	e097      	b.n	8001a6a <HAL_ADC_Start+0x15a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 fca8 	bl	8002298 <ADC_Enable>
 8001948:	4603      	mov	r3, r0
 800194a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 8083 	bne.w	8001a5a <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800195c:	f023 0301 	bic.w	r3, r3, #1
 8001960:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001968:	4b42      	ldr	r3, [pc, #264]	; (8001a74 <HAL_ADC_Start+0x164>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	2b00      	cmp	r3, #0
 8001972:	d004      	beq.n	800197e <HAL_ADC_Start+0x6e>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800197c:	d115      	bne.n	80019aa <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d027      	beq.n	80019e8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019a8:	e01e      	b.n	80019e8 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019be:	d004      	beq.n	80019ca <HAL_ADC_Start+0xba>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a2c      	ldr	r2, [pc, #176]	; (8001a78 <HAL_ADC_Start+0x168>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d10e      	bne.n	80019e8 <HAL_ADC_Start+0xd8>
 80019ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d007      	beq.n	80019e8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f4:	d106      	bne.n	8001a04 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f023 0206 	bic.w	r2, r3, #6
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	645a      	str	r2, [r3, #68]	; 0x44
 8001a02:	e002      	b.n	8001a0a <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	221c      	movs	r2, #28
 8001a18:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <HAL_ADC_Start+0x164>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d010      	beq.n	8001a48 <HAL_ADC_Start+0x138>
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <HAL_ADC_Start+0x164>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d00a      	beq.n	8001a48 <HAL_ADC_Start+0x138>
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <HAL_ADC_Start+0x164>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	2b09      	cmp	r3, #9
 8001a3c:	d004      	beq.n	8001a48 <HAL_ADC_Start+0x138>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a46:	d10f      	bne.n	8001a68 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0204 	orr.w	r2, r2, #4
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	e006      	b.n	8001a68 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001a62:	e001      	b.n	8001a68 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a64:	2302      	movs	r3, #2
 8001a66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	50000300 	.word	0x50000300
 8001a78:	50000100 	.word	0x50000100

08001a7c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	2b08      	cmp	r3, #8
 8001a90:	d102      	bne.n	8001a98 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001a92:	2308      	movs	r3, #8
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e02e      	b.n	8001af6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a98:	4b5e      	ldr	r3, [pc, #376]	; (8001c14 <HAL_ADC_PollForConversion+0x198>)
 8001a9a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d112      	bne.n	8001ace <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d11d      	bne.n	8001af2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f043 0220 	orr.w	r2, r3, #32
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e09d      	b.n	8001c0a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00b      	beq.n	8001af2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f043 0220 	orr.w	r2, r3, #32
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e08b      	b.n	8001c0a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001af2:	230c      	movs	r3, #12
 8001af4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_ADC_PollForConversion+0x198>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <HAL_ADC_PollForConversion+0x90>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b0a:	d104      	bne.n	8001b16 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	613b      	str	r3, [r7, #16]
 8001b14:	e003      	b.n	8001b1e <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001b16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001b1e:	f7ff fd59 	bl	80015d4 <HAL_GetTick>
 8001b22:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b24:	e021      	b.n	8001b6a <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b2c:	d01d      	beq.n	8001b6a <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <HAL_ADC_PollForConversion+0xc8>
 8001b34:	f7ff fd4e 	bl	80015d4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d212      	bcs.n	8001b6a <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10b      	bne.n	8001b6a <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f043 0204 	orr.w	r2, r3, #4
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e04f      	b.n	8001c0a <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0d6      	beq.n	8001b26 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d131      	bne.n	8001bf6 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d12c      	bne.n	8001bf6 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d125      	bne.n	8001bf6 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d112      	bne.n	8001bde <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d112      	bne.n	8001bf6 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f043 0201 	orr.w	r2, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
 8001bdc:	e00b      	b.n	8001bf6 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f043 0220 	orr.w	r2, r3, #32
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f043 0201 	orr.w	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d103      	bne.n	8001c08 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	50000300 	.word	0x50000300

08001c18 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_ADCEx_Calibration_Start+0x1c>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e05f      	b.n	8001d0e <HAL_ADCEx_Calibration_Start+0xdc>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fb82 	bl	8002360 <ADC_Disable>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d14e      	bne.n	8001d04 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001c7a:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d107      	bne.n	8001c92 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c90:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ca0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001ca2:	f7ff fc97 	bl	80015d4 <HAL_GetTick>
 8001ca6:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001ca8:	e01c      	b.n	8001ce4 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001caa:	f7ff fc93 	bl	80015d4 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b0a      	cmp	r3, #10
 8001cb6:	d915      	bls.n	8001ce4 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cc6:	d10d      	bne.n	8001ce4 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f023 0312 	bic.w	r3, r3, #18
 8001cd0:	f043 0210 	orr.w	r2, r3, #16
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e014      	b.n	8001d0e <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cf2:	d0da      	beq.n	8001caa <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	f023 0303 	bic.w	r3, r3, #3
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b09b      	sub	sp, #108	; 0x6c
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x22>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e2a4      	b.n	8002284 <HAL_ADC_ConfigChannel+0x56c>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f040 8288 	bne.w	8002262 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d81c      	bhi.n	8001d94 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	231f      	movs	r3, #31
 8001d70:	4093      	lsls	r3, r2
 8001d72:	43db      	mvns	r3, r3
 8001d74:	4019      	ands	r1, r3
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
 8001d92:	e063      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b09      	cmp	r3, #9
 8001d9a:	d81e      	bhi.n	8001dda <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	3b1e      	subs	r3, #30
 8001db0:	221f      	movs	r2, #31
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	4019      	ands	r1, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	3b1e      	subs	r3, #30
 8001dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	635a      	str	r2, [r3, #52]	; 0x34
 8001dd8:	e040      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b0e      	cmp	r3, #14
 8001de0:	d81e      	bhi.n	8001e20 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	3b3c      	subs	r3, #60	; 0x3c
 8001df6:	221f      	movs	r2, #31
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	4019      	ands	r1, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	3b3c      	subs	r3, #60	; 0x3c
 8001e12:	fa00 f203 	lsl.w	r2, r0, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e1e:	e01d      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	3b5a      	subs	r3, #90	; 0x5a
 8001e34:	221f      	movs	r2, #31
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	4019      	ands	r1, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	3b5a      	subs	r3, #90	; 0x5a
 8001e50:	fa00 f203 	lsl.w	r2, r0, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 80e5 	bne.w	8002036 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b09      	cmp	r3, #9
 8001e72:	d91c      	bls.n	8001eae <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6999      	ldr	r1, [r3, #24]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	3b1e      	subs	r3, #30
 8001e86:	2207      	movs	r2, #7
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4019      	ands	r1, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6898      	ldr	r0, [r3, #8]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b1e      	subs	r3, #30
 8001ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	619a      	str	r2, [r3, #24]
 8001eac:	e019      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6959      	ldr	r1, [r3, #20]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4413      	add	r3, r2
 8001ebe:	2207      	movs	r2, #7
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	4019      	ands	r1, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6898      	ldr	r0, [r3, #8]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	08db      	lsrs	r3, r3, #3
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d84f      	bhi.n	8001fa4 <HAL_ADC_ConfigChannel+0x28c>
 8001f04:	a201      	add	r2, pc, #4	; (adr r2, 8001f0c <HAL_ADC_ConfigChannel+0x1f4>)
 8001f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0a:	bf00      	nop
 8001f0c:	08001f1d 	.word	0x08001f1d
 8001f10:	08001f3f 	.word	0x08001f3f
 8001f14:	08001f61 	.word	0x08001f61
 8001f18:	08001f83 	.word	0x08001f83
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f22:	4b94      	ldr	r3, [pc, #592]	; (8002174 <HAL_ADC_ConfigChannel+0x45c>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	0691      	lsls	r1, r2, #26
 8001f2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f3a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f3c:	e07e      	b.n	800203c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f44:	4b8b      	ldr	r3, [pc, #556]	; (8002174 <HAL_ADC_ConfigChannel+0x45c>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	0691      	lsls	r1, r2, #26
 8001f4e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f50:	430a      	orrs	r2, r1
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f5c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f5e:	e06d      	b.n	800203c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f66:	4b83      	ldr	r3, [pc, #524]	; (8002174 <HAL_ADC_ConfigChannel+0x45c>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	683a      	ldr	r2, [r7, #0]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	0691      	lsls	r1, r2, #26
 8001f70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f72:	430a      	orrs	r2, r1
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f7e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f80:	e05c      	b.n	800203c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f88:	4b7a      	ldr	r3, [pc, #488]	; (8002174 <HAL_ADC_ConfigChannel+0x45c>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	0691      	lsls	r1, r2, #26
 8001f92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f94:	430a      	orrs	r2, r1
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fa0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fa2:	e04b      	b.n	800203c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001faa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	069b      	lsls	r3, r3, #26
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fc6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	069b      	lsls	r3, r3, #26
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d107      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fea:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ff2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	069b      	lsls	r3, r3, #26
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d107      	bne.n	8002010 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800200e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002016:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	069b      	lsls	r3, r3, #26
 8002020:	429a      	cmp	r2, r3
 8002022:	d10a      	bne.n	800203a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002032:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002034:	e001      	b.n	800203a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002036:	bf00      	nop
 8002038:	e000      	b.n	800203c <HAL_ADC_ConfigChannel+0x324>
      break;
 800203a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d108      	bne.n	800205c <HAL_ADC_ConfigChannel+0x344>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_ADC_ConfigChannel+0x344>
 8002058:	2301      	movs	r3, #1
 800205a:	e000      	b.n	800205e <HAL_ADC_ConfigChannel+0x346>
 800205c:	2300      	movs	r3, #0
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 810a 	bne.w	8002278 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d00f      	beq.n	800208c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2201      	movs	r2, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43da      	mvns	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	400a      	ands	r2, r1
 8002086:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800208a:	e049      	b.n	8002120 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2201      	movs	r2, #1
 800209a:	409a      	lsls	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b09      	cmp	r3, #9
 80020ac:	d91c      	bls.n	80020e8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6999      	ldr	r1, [r3, #24]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	3b1b      	subs	r3, #27
 80020c0:	2207      	movs	r2, #7
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	4019      	ands	r1, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6898      	ldr	r0, [r3, #8]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	3b1b      	subs	r3, #27
 80020da:	fa00 f203 	lsl.w	r2, r0, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	619a      	str	r2, [r3, #24]
 80020e6:	e01b      	b.n	8002120 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6959      	ldr	r1, [r3, #20]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	4613      	mov	r3, r2
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4413      	add	r3, r2
 80020fa:	2207      	movs	r2, #7
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	4019      	ands	r1, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6898      	ldr	r0, [r3, #8]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	fa00 f203 	lsl.w	r2, r0, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002120:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_ADC_ConfigChannel+0x460>)
 8002122:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b10      	cmp	r3, #16
 800212a:	d105      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800212c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002134:	2b00      	cmp	r3, #0
 8002136:	d015      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800213c:	2b11      	cmp	r3, #17
 800213e:	d105      	bne.n	800214c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00b      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002150:	2b12      	cmp	r3, #18
 8002152:	f040 8091 	bne.w	8002278 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 808a 	bne.w	8002278 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800216c:	d108      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x468>
 800216e:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_ADC_ConfigChannel+0x464>)
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	e008      	b.n	8002186 <HAL_ADC_ConfigChannel+0x46e>
 8002174:	83fff000 	.word	0x83fff000
 8002178:	50000300 	.word	0x50000300
 800217c:	50000100 	.word	0x50000100
 8002180:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002184:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d108      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x48e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x48e>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x490>
 80021a6:	2300      	movs	r3, #0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d150      	bne.n	800224e <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021ac:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d010      	beq.n	80021d4 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d107      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x4b6>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x4b6>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x4b8>
 80021ce:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d13c      	bne.n	800224e <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b10      	cmp	r3, #16
 80021da:	d11d      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x500>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021e4:	d118      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80021e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021f2:	4b27      	ldr	r3, [pc, #156]	; (8002290 <HAL_ADC_ConfigChannel+0x578>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a27      	ldr	r2, [pc, #156]	; (8002294 <HAL_ADC_ConfigChannel+0x57c>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	0c9a      	lsrs	r2, r3, #18
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002208:	e002      	b.n	8002210 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	3b01      	subs	r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f9      	bne.n	800220a <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002216:	e02e      	b.n	8002276 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b11      	cmp	r3, #17
 800221e:	d10b      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x520>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002228:	d106      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800222a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002234:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002236:	e01e      	b.n	8002276 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b12      	cmp	r3, #18
 800223e:	d11a      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002240:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002248:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800224a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800224c:	e013      	b.n	8002276 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f043 0220 	orr.w	r2, r3, #32
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002260:	e00a      	b.n	8002278 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f043 0220 	orr.w	r2, r3, #32
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002274:	e000      	b.n	8002278 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002276:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002280:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002284:	4618      	mov	r0, r3
 8002286:	376c      	adds	r7, #108	; 0x6c
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	20000000 	.word	0x20000000
 8002294:	431bde83 	.word	0x431bde83

08002298 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d108      	bne.n	80022c4 <ADC_Enable+0x2c>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <ADC_Enable+0x2c>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <ADC_Enable+0x2e>
 80022c4:	2300      	movs	r3, #0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d143      	bne.n	8002352 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	4b22      	ldr	r3, [pc, #136]	; (800235c <ADC_Enable+0xc4>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00d      	beq.n	80022f4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f043 0210 	orr.w	r2, r3, #16
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e8:	f043 0201 	orr.w	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e02f      	b.n	8002354 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002304:	f7ff f966 	bl	80015d4 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800230a:	e01b      	b.n	8002344 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800230c:	f7ff f962 	bl	80015d4 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d914      	bls.n	8002344 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d00d      	beq.n	8002344 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	f043 0210 	orr.w	r2, r3, #16
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f043 0201 	orr.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e007      	b.n	8002354 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b01      	cmp	r3, #1
 8002350:	d1dc      	bne.n	800230c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	8000003f 	.word	0x8000003f

08002360 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b01      	cmp	r3, #1
 8002378:	d108      	bne.n	800238c <ADC_Disable+0x2c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <ADC_Disable+0x2c>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <ADC_Disable+0x2e>
 800238c:	2300      	movs	r3, #0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d047      	beq.n	8002422 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 030d 	and.w	r3, r3, #13
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10f      	bne.n	80023c0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0202 	orr.w	r2, r2, #2
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2203      	movs	r2, #3
 80023b6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80023b8:	f7ff f90c 	bl	80015d4 <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023be:	e029      	b.n	8002414 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	f043 0210 	orr.w	r2, r3, #16
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	f043 0201 	orr.w	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e023      	b.n	8002424 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023dc:	f7ff f8fa 	bl	80015d4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d914      	bls.n	8002414 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d10d      	bne.n	8002414 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f043 0210 	orr.w	r2, r3, #16
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002408:	f043 0201 	orr.w	r2, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e007      	b.n	8002424 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b01      	cmp	r3, #1
 8002420:	d0dc      	beq.n	80023dc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	; (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	; (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4907      	ldr	r1, [pc, #28]	; (80024c8 <__NVIC_EnableIRQ+0x38>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000e100 	.word	0xe000e100

080024cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db0a      	blt.n	80024f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	490c      	ldr	r1, [pc, #48]	; (8002518 <__NVIC_SetPriority+0x4c>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f4:	e00a      	b.n	800250c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4908      	ldr	r1, [pc, #32]	; (800251c <__NVIC_SetPriority+0x50>)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	3b04      	subs	r3, #4
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	440b      	add	r3, r1
 800250a:	761a      	strb	r2, [r3, #24]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000e100 	.word	0xe000e100
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f1c3 0307 	rsb	r3, r3, #7
 800253a:	2b04      	cmp	r3, #4
 800253c:	bf28      	it	cs
 800253e:	2304      	movcs	r3, #4
 8002540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3304      	adds	r3, #4
 8002546:	2b06      	cmp	r3, #6
 8002548:	d902      	bls.n	8002550 <NVIC_EncodePriority+0x30>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3b03      	subs	r3, #3
 800254e:	e000      	b.n	8002552 <NVIC_EncodePriority+0x32>
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002568:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43d9      	mvns	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	4313      	orrs	r3, r2
         );
}
 800257a:	4618      	mov	r0, r3
 800257c:	3724      	adds	r7, #36	; 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002598:	d301      	bcc.n	800259e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259a:	2301      	movs	r3, #1
 800259c:	e00f      	b.n	80025be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259e:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <SysTick_Config+0x40>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a6:	210f      	movs	r1, #15
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ac:	f7ff ff8e 	bl	80024cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <SysTick_Config+0x40>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <SysTick_Config+0x40>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	e000e010 	.word	0xe000e010

080025cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff29 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f4:	f7ff ff3e 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	6978      	ldr	r0, [r7, #20]
 8002600:	f7ff ff8e 	bl	8002520 <NVIC_EncodePriority>
 8002604:	4602      	mov	r2, r0
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff5d 	bl	80024cc <__NVIC_SetPriority>
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff31 	bl	8002490 <__NVIC_EnableIRQ>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffa2 	bl	8002588 <SysTick_Config>
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265e:	e14e      	b.n	80028fe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2101      	movs	r1, #1
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	4013      	ands	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8140 	beq.w	80028f8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d005      	beq.n	8002690 <HAL_GPIO_Init+0x40>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d130      	bne.n	80026f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c6:	2201      	movs	r2, #1
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	f003 0201 	and.w	r2, r3, #1
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d017      	beq.n	800272e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d123      	bne.n	8002782 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	08da      	lsrs	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3208      	adds	r2, #8
 8002742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	220f      	movs	r2, #15
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	08da      	lsrs	r2, r3, #3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3208      	adds	r2, #8
 800277c:	6939      	ldr	r1, [r7, #16]
 800277e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	2203      	movs	r2, #3
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f003 0203 	and.w	r2, r3, #3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 809a 	beq.w	80028f8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c4:	4b55      	ldr	r3, [pc, #340]	; (800291c <HAL_GPIO_Init+0x2cc>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	4a54      	ldr	r2, [pc, #336]	; (800291c <HAL_GPIO_Init+0x2cc>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6193      	str	r3, [r2, #24]
 80027d0:	4b52      	ldr	r3, [pc, #328]	; (800291c <HAL_GPIO_Init+0x2cc>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027dc:	4a50      	ldr	r2, [pc, #320]	; (8002920 <HAL_GPIO_Init+0x2d0>)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	3302      	adds	r3, #2
 80027e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	220f      	movs	r2, #15
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002806:	d013      	beq.n	8002830 <HAL_GPIO_Init+0x1e0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a46      	ldr	r2, [pc, #280]	; (8002924 <HAL_GPIO_Init+0x2d4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00d      	beq.n	800282c <HAL_GPIO_Init+0x1dc>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a45      	ldr	r2, [pc, #276]	; (8002928 <HAL_GPIO_Init+0x2d8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d007      	beq.n	8002828 <HAL_GPIO_Init+0x1d8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a44      	ldr	r2, [pc, #272]	; (800292c <HAL_GPIO_Init+0x2dc>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d101      	bne.n	8002824 <HAL_GPIO_Init+0x1d4>
 8002820:	2303      	movs	r3, #3
 8002822:	e006      	b.n	8002832 <HAL_GPIO_Init+0x1e2>
 8002824:	2305      	movs	r3, #5
 8002826:	e004      	b.n	8002832 <HAL_GPIO_Init+0x1e2>
 8002828:	2302      	movs	r3, #2
 800282a:	e002      	b.n	8002832 <HAL_GPIO_Init+0x1e2>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <HAL_GPIO_Init+0x1e2>
 8002830:	2300      	movs	r3, #0
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	f002 0203 	and.w	r2, r2, #3
 8002838:	0092      	lsls	r2, r2, #2
 800283a:	4093      	lsls	r3, r2
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002842:	4937      	ldr	r1, [pc, #220]	; (8002920 <HAL_GPIO_Init+0x2d0>)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	089b      	lsrs	r3, r3, #2
 8002848:	3302      	adds	r3, #2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002850:	4b37      	ldr	r3, [pc, #220]	; (8002930 <HAL_GPIO_Init+0x2e0>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002874:	4a2e      	ldr	r2, [pc, #184]	; (8002930 <HAL_GPIO_Init+0x2e0>)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800287a:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <HAL_GPIO_Init+0x2e0>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800289e:	4a24      	ldr	r2, [pc, #144]	; (8002930 <HAL_GPIO_Init+0x2e0>)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028a4:	4b22      	ldr	r3, [pc, #136]	; (8002930 <HAL_GPIO_Init+0x2e0>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028c8:	4a19      	ldr	r2, [pc, #100]	; (8002930 <HAL_GPIO_Init+0x2e0>)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_GPIO_Init+0x2e0>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028f2:	4a0f      	ldr	r2, [pc, #60]	; (8002930 <HAL_GPIO_Init+0x2e0>)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3301      	adds	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	f47f aea9 	bne.w	8002660 <HAL_GPIO_Init+0x10>
  }
}
 800290e:	bf00      	nop
 8002910:	bf00      	nop
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	40021000 	.word	0x40021000
 8002920:	40010000 	.word	0x40010000
 8002924:	48000400 	.word	0x48000400
 8002928:	48000800 	.word	0x48000800
 800292c:	48000c00 	.word	0x48000c00
 8002930:	40010400 	.word	0x40010400

08002934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	807b      	strh	r3, [r7, #2]
 8002940:	4613      	mov	r3, r2
 8002942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002944:	787b      	ldrb	r3, [r7, #1]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800294a:	887a      	ldrh	r2, [r7, #2]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002950:	e002      	b.n	8002958 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002952:	887a      	ldrh	r2, [r7, #2]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800297a:	4a05      	ldr	r2, [pc, #20]	; (8002990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800297c:	88fb      	ldrh	r3, [r7, #6]
 800297e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe f88c 	bl	8000aa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40010400 	.word	0x40010400

08002994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800299a:	af00      	add	r7, sp, #0
 800299c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f001 b823 	b.w	8003a00 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 817d 	beq.w	8002cca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029d0:	4bbc      	ldr	r3, [pc, #752]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d00c      	beq.n	80029f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029dc:	4bb9      	ldr	r3, [pc, #740]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d15c      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x10e>
 80029e8:	4bb6      	ldr	r3, [pc, #728]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f4:	d155      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x10e>
 80029f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029fa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	095b      	lsrs	r3, r3, #5
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d102      	bne.n	8002a28 <HAL_RCC_OscConfig+0x94>
 8002a22:	4ba8      	ldr	r3, [pc, #672]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	e015      	b.n	8002a54 <HAL_RCC_OscConfig+0xc0>
 8002a28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a2c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a30:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a40:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a44:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a50:	4b9c      	ldr	r3, [pc, #624]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a58:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a5c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a60:	fa92 f2a2 	rbit	r2, r2
 8002a64:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a68:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a6c:	fab2 f282 	clz	r2, r2
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	f042 0220 	orr.w	r2, r2, #32
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	f002 021f 	and.w	r2, r2, #31
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 811f 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x334>
 8002a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f040 8116 	bne.w	8002cc8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f000 bfaf 	b.w	8003a00 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab2:	d106      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x12e>
 8002ab4:	4b83      	ldr	r3, [pc, #524]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a82      	ldr	r2, [pc, #520]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	e036      	b.n	8002b30 <HAL_RCC_OscConfig+0x19c>
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCC_OscConfig+0x158>
 8002ad2:	4b7c      	ldr	r3, [pc, #496]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a7b      	ldr	r2, [pc, #492]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b79      	ldr	r3, [pc, #484]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a78      	ldr	r2, [pc, #480]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e021      	b.n	8002b30 <HAL_RCC_OscConfig+0x19c>
 8002aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x184>
 8002afe:	4b71      	ldr	r3, [pc, #452]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a70      	ldr	r2, [pc, #448]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	4b6e      	ldr	r3, [pc, #440]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a6d      	ldr	r2, [pc, #436]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e00b      	b.n	8002b30 <HAL_RCC_OscConfig+0x19c>
 8002b18:	4b6a      	ldr	r3, [pc, #424]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a69      	ldr	r2, [pc, #420]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b67      	ldr	r3, [pc, #412]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a66      	ldr	r2, [pc, #408]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b2e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b30:	4b64      	ldr	r3, [pc, #400]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	f023 020f 	bic.w	r2, r3, #15
 8002b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	495f      	ldr	r1, [pc, #380]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d059      	beq.n	8002c0e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fd3b 	bl	80015d4 <HAL_GetTick>
 8002b5e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b64:	f7fe fd36 	bl	80015d4 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b64      	cmp	r3, #100	; 0x64
 8002b72:	d902      	bls.n	8002b7a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	f000 bf43 	b.w	8003a00 <HAL_RCC_OscConfig+0x106c>
 8002b7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b7e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b86:	fa93 f3a3 	rbit	r3, r3
 8002b8a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	095b      	lsrs	r3, r3, #5
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d102      	bne.n	8002bac <HAL_RCC_OscConfig+0x218>
 8002ba6:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	e015      	b.n	8002bd8 <HAL_RCC_OscConfig+0x244>
 8002bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002bc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bc4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bc8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bd4:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bdc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002be0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002be4:	fa92 f2a2 	rbit	r2, r2
 8002be8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002bec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002bf0:	fab2 f282 	clz	r2, r2
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	f042 0220 	orr.w	r2, r2, #32
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	f002 021f 	and.w	r2, r2, #31
 8002c00:	2101      	movs	r1, #1
 8002c02:	fa01 f202 	lsl.w	r2, r1, r2
 8002c06:	4013      	ands	r3, r2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ab      	beq.n	8002b64 <HAL_RCC_OscConfig+0x1d0>
 8002c0c:	e05d      	b.n	8002cca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0e:	f7fe fce1 	bl	80015d4 <HAL_GetTick>
 8002c12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fe fcdc 	bl	80015d4 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b64      	cmp	r3, #100	; 0x64
 8002c26:	d902      	bls.n	8002c2e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	f000 bee9 	b.w	8003a00 <HAL_RCC_OscConfig+0x106c>
 8002c2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c32:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c42:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_OscConfig+0x2cc>
 8002c5a:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	e015      	b.n	8002c8c <HAL_RCC_OscConfig+0x2f8>
 8002c60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c64:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c78:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c7c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c88:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <HAL_RCC_OscConfig+0x330>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c90:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c94:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c98:	fa92 f2a2 	rbit	r2, r2
 8002c9c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002ca0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002ca4:	fab2 f282 	clz	r2, r2
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	f042 0220 	orr.w	r2, r2, #32
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	f002 021f 	and.w	r2, r2, #31
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1ab      	bne.n	8002c18 <HAL_RCC_OscConfig+0x284>
 8002cc0:	e003      	b.n	8002cca <HAL_RCC_OscConfig+0x336>
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 817d 	beq.w	8002fda <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ce0:	4ba6      	ldr	r3, [pc, #664]	; (8002f7c <HAL_RCC_OscConfig+0x5e8>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 030c 	and.w	r3, r3, #12
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00b      	beq.n	8002d04 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cec:	4ba3      	ldr	r3, [pc, #652]	; (8002f7c <HAL_RCC_OscConfig+0x5e8>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d172      	bne.n	8002dde <HAL_RCC_OscConfig+0x44a>
 8002cf8:	4ba0      	ldr	r3, [pc, #640]	; (8002f7c <HAL_RCC_OscConfig+0x5e8>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d16c      	bne.n	8002dde <HAL_RCC_OscConfig+0x44a>
 8002d04:	2302      	movs	r3, #2
 8002d06:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d0e:	fa93 f3a3 	rbit	r3, r3
 8002d12:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d16:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d102      	bne.n	8002d34 <HAL_RCC_OscConfig+0x3a0>
 8002d2e:	4b93      	ldr	r3, [pc, #588]	; (8002f7c <HAL_RCC_OscConfig+0x5e8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	e013      	b.n	8002d5c <HAL_RCC_OscConfig+0x3c8>
 8002d34:	2302      	movs	r3, #2
 8002d36:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d46:	2302      	movs	r3, #2
 8002d48:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d4c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d58:	4b88      	ldr	r3, [pc, #544]	; (8002f7c <HAL_RCC_OscConfig+0x5e8>)
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d62:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d66:	fa92 f2a2 	rbit	r2, r2
 8002d6a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d6e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d72:	fab2 f282 	clz	r2, r2
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f042 0220 	orr.w	r2, r2, #32
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f002 021f 	and.w	r2, r2, #31
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCC_OscConfig+0x410>
 8002d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d002      	beq.n	8002da4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f000 be2e 	b.w	8003a00 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da4:	4b75      	ldr	r3, [pc, #468]	; (8002f7c <HAL_RCC_OscConfig+0x5e8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	21f8      	movs	r1, #248	; 0xf8
 8002dba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002dc2:	fa91 f1a1 	rbit	r1, r1
 8002dc6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002dca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002dce:	fab1 f181 	clz	r1, r1
 8002dd2:	b2c9      	uxtb	r1, r1
 8002dd4:	408b      	lsls	r3, r1
 8002dd6:	4969      	ldr	r1, [pc, #420]	; (8002f7c <HAL_RCC_OscConfig+0x5e8>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ddc:	e0fd      	b.n	8002fda <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8088 	beq.w	8002f00 <HAL_RCC_OscConfig+0x56c>
 8002df0:	2301      	movs	r3, #1
 8002df2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e02:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	461a      	mov	r2, r3
 8002e18:	2301      	movs	r3, #1
 8002e1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fbda 	bl	80015d4 <HAL_GetTick>
 8002e20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e24:	e00a      	b.n	8002e3c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e26:	f7fe fbd5 	bl	80015d4 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d902      	bls.n	8002e3c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	f000 bde2 	b.w	8003a00 <HAL_RCC_OscConfig+0x106c>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d102      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4d8>
 8002e66:	4b45      	ldr	r3, [pc, #276]	; (8002f7c <HAL_RCC_OscConfig+0x5e8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	e013      	b.n	8002e94 <HAL_RCC_OscConfig+0x500>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e7e:	2302      	movs	r3, #2
 8002e80:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e84:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e90:	4b3a      	ldr	r3, [pc, #232]	; (8002f7c <HAL_RCC_OscConfig+0x5e8>)
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	2202      	movs	r2, #2
 8002e96:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e9a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e9e:	fa92 f2a2 	rbit	r2, r2
 8002ea2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002ea6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002eaa:	fab2 f282 	clz	r2, r2
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	f042 0220 	orr.w	r2, r2, #32
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	f002 021f 	and.w	r2, r2, #31
 8002eba:	2101      	movs	r1, #1
 8002ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0af      	beq.n	8002e26 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec6:	4b2d      	ldr	r3, [pc, #180]	; (8002f7c <HAL_RCC_OscConfig+0x5e8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	21f8      	movs	r1, #248	; 0xf8
 8002edc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ee4:	fa91 f1a1 	rbit	r1, r1
 8002ee8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002eec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ef0:	fab1 f181 	clz	r1, r1
 8002ef4:	b2c9      	uxtb	r1, r1
 8002ef6:	408b      	lsls	r3, r1
 8002ef8:	4920      	ldr	r1, [pc, #128]	; (8002f7c <HAL_RCC_OscConfig+0x5e8>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]
 8002efe:	e06c      	b.n	8002fda <HAL_RCC_OscConfig+0x646>
 8002f00:	2301      	movs	r3, #1
 8002f02:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f06:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f0a:	fa93 f3a3 	rbit	r3, r3
 8002f0e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	461a      	mov	r2, r3
 8002f28:	2300      	movs	r3, #0
 8002f2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2c:	f7fe fb52 	bl	80015d4 <HAL_GetTick>
 8002f30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f36:	f7fe fb4d 	bl	80015d4 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d902      	bls.n	8002f4c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	f000 bd5a 	b.w	8003a00 <HAL_RCC_OscConfig+0x106c>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	095b      	lsrs	r3, r3, #5
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d104      	bne.n	8002f80 <HAL_RCC_OscConfig+0x5ec>
 8002f76:	4b01      	ldr	r3, [pc, #4]	; (8002f7c <HAL_RCC_OscConfig+0x5e8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	e015      	b.n	8002fa8 <HAL_RCC_OscConfig+0x614>
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	2302      	movs	r3, #2
 8002f82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f92:	2302      	movs	r3, #2
 8002f94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f9c:	fa93 f3a3 	rbit	r3, r3
 8002fa0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002fa4:	4bc8      	ldr	r3, [pc, #800]	; (80032c8 <HAL_RCC_OscConfig+0x934>)
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002fae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002fb2:	fa92 f2a2 	rbit	r2, r2
 8002fb6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002fba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002fbe:	fab2 f282 	clz	r2, r2
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	f042 0220 	orr.w	r2, r2, #32
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	f002 021f 	and.w	r2, r2, #31
 8002fce:	2101      	movs	r1, #1
 8002fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1ad      	bne.n	8002f36 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8110 	beq.w	8003210 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d079      	beq.n	80030f4 <HAL_RCC_OscConfig+0x760>
 8003000:	2301      	movs	r3, #1
 8003002:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003006:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800300a:	fa93 f3a3 	rbit	r3, r3
 800300e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	4bab      	ldr	r3, [pc, #684]	; (80032cc <HAL_RCC_OscConfig+0x938>)
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	461a      	mov	r2, r3
 8003026:	2301      	movs	r3, #1
 8003028:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800302a:	f7fe fad3 	bl	80015d4 <HAL_GetTick>
 800302e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	e00a      	b.n	800304a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003034:	f7fe face 	bl	80015d4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d902      	bls.n	800304a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	f000 bcdb 	b.w	8003a00 <HAL_RCC_OscConfig+0x106c>
 800304a:	2302      	movs	r3, #2
 800304c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003050:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003064:	2202      	movs	r2, #2
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	fa93 f2a3 	rbit	r2, r3
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003088:	2202      	movs	r2, #2
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	fa93 f2a3 	rbit	r2, r3
 800309a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a4:	4b88      	ldr	r3, [pc, #544]	; (80032c8 <HAL_RCC_OscConfig+0x934>)
 80030a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80030b0:	2102      	movs	r1, #2
 80030b2:	6019      	str	r1, [r3, #0]
 80030b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	fa93 f1a3 	rbit	r1, r3
 80030c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030ca:	6019      	str	r1, [r3, #0]
  return result;
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f003 031f 	and.w	r3, r3, #31
 80030e6:	2101      	movs	r1, #1
 80030e8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d0a0      	beq.n	8003034 <HAL_RCC_OscConfig+0x6a0>
 80030f2:	e08d      	b.n	8003210 <HAL_RCC_OscConfig+0x87c>
 80030f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003104:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	fa93 f2a3 	rbit	r2, r3
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003116:	601a      	str	r2, [r3, #0]
  return result;
 8003118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800311c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003120:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	4b68      	ldr	r3, [pc, #416]	; (80032cc <HAL_RCC_OscConfig+0x938>)
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	461a      	mov	r2, r3
 8003132:	2300      	movs	r3, #0
 8003134:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003136:	f7fe fa4d 	bl	80015d4 <HAL_GetTick>
 800313a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313e:	e00a      	b.n	8003156 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003140:	f7fe fa48 	bl	80015d4 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d902      	bls.n	8003156 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	f000 bc55 	b.w	8003a00 <HAL_RCC_OscConfig+0x106c>
 8003156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800315e:	2202      	movs	r2, #2
 8003160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003166:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa93 f2a3 	rbit	r2, r3
 8003170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003174:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003182:	2202      	movs	r2, #2
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	fa93 f2a3 	rbit	r2, r3
 8003194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003198:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80031a6:	2202      	movs	r2, #2
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	fa93 f2a3 	rbit	r2, r3
 80031b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031bc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80031c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c2:	4b41      	ldr	r3, [pc, #260]	; (80032c8 <HAL_RCC_OscConfig+0x934>)
 80031c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031ce:	2102      	movs	r1, #2
 80031d0:	6019      	str	r1, [r3, #0]
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	fa93 f1a3 	rbit	r1, r3
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80031e8:	6019      	str	r1, [r3, #0]
  return result;
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	fab3 f383 	clz	r3, r3
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	2101      	movs	r1, #1
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d197      	bne.n	8003140 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003214:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 81a1 	beq.w	8003568 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322c:	4b26      	ldr	r3, [pc, #152]	; (80032c8 <HAL_RCC_OscConfig+0x934>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d116      	bne.n	8003266 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003238:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <HAL_RCC_OscConfig+0x934>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <HAL_RCC_OscConfig+0x934>)
 800323e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003242:	61d3      	str	r3, [r2, #28]
 8003244:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <HAL_RCC_OscConfig+0x934>)
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800324c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003250:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800325e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <HAL_RCC_OscConfig+0x93c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d11a      	bne.n	80032a8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003272:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <HAL_RCC_OscConfig+0x93c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a16      	ldr	r2, [pc, #88]	; (80032d0 <HAL_RCC_OscConfig+0x93c>)
 8003278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800327c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327e:	f7fe f9a9 	bl	80015d4 <HAL_GetTick>
 8003282:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003286:	e009      	b.n	800329c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003288:	f7fe f9a4 	bl	80015d4 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b64      	cmp	r3, #100	; 0x64
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e3b1      	b.n	8003a00 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <HAL_RCC_OscConfig+0x93c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ef      	beq.n	8003288 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d10d      	bne.n	80032d4 <HAL_RCC_OscConfig+0x940>
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <HAL_RCC_OscConfig+0x934>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4a02      	ldr	r2, [pc, #8]	; (80032c8 <HAL_RCC_OscConfig+0x934>)
 80032be:	f043 0301 	orr.w	r3, r3, #1
 80032c2:	6213      	str	r3, [r2, #32]
 80032c4:	e03c      	b.n	8003340 <HAL_RCC_OscConfig+0x9ac>
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	10908120 	.word	0x10908120
 80032d0:	40007000 	.word	0x40007000
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10c      	bne.n	80032fe <HAL_RCC_OscConfig+0x96a>
 80032e4:	4bc1      	ldr	r3, [pc, #772]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4ac0      	ldr	r2, [pc, #768]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	6213      	str	r3, [r2, #32]
 80032f0:	4bbe      	ldr	r3, [pc, #760]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	4abd      	ldr	r2, [pc, #756]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 80032f6:	f023 0304 	bic.w	r3, r3, #4
 80032fa:	6213      	str	r3, [r2, #32]
 80032fc:	e020      	b.n	8003340 <HAL_RCC_OscConfig+0x9ac>
 80032fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003302:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2b05      	cmp	r3, #5
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0x994>
 800330e:	4bb7      	ldr	r3, [pc, #732]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4ab6      	ldr	r2, [pc, #728]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 8003314:	f043 0304 	orr.w	r3, r3, #4
 8003318:	6213      	str	r3, [r2, #32]
 800331a:	4bb4      	ldr	r3, [pc, #720]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4ab3      	ldr	r2, [pc, #716]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6213      	str	r3, [r2, #32]
 8003326:	e00b      	b.n	8003340 <HAL_RCC_OscConfig+0x9ac>
 8003328:	4bb0      	ldr	r3, [pc, #704]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	4aaf      	ldr	r2, [pc, #700]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	6213      	str	r3, [r2, #32]
 8003334:	4bad      	ldr	r3, [pc, #692]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	4aac      	ldr	r2, [pc, #688]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 800333a:	f023 0304 	bic.w	r3, r3, #4
 800333e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8081 	beq.w	8003454 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003352:	f7fe f93f 	bl	80015d4 <HAL_GetTick>
 8003356:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800335c:	f7fe f93a 	bl	80015d4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f241 3288 	movw	r2, #5000	; 0x1388
 800336c:	4293      	cmp	r3, r2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e345      	b.n	8003a00 <HAL_RCC_OscConfig+0x106c>
 8003374:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003378:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800337c:	2202      	movs	r2, #2
 800337e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	fa93 f2a3 	rbit	r2, r3
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033a0:	2202      	movs	r2, #2
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	fa93 f2a3 	rbit	r2, r3
 80033b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033ba:	601a      	str	r2, [r3, #0]
  return result;
 80033bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80033c4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c6:	fab3 f383 	clz	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f043 0302 	orr.w	r3, r3, #2
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d102      	bne.n	80033e0 <HAL_RCC_OscConfig+0xa4c>
 80033da:	4b84      	ldr	r3, [pc, #528]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	e013      	b.n	8003408 <HAL_RCC_OscConfig+0xa74>
 80033e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80033e8:	2202      	movs	r2, #2
 80033ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	fa93 f2a3 	rbit	r2, r3
 80033fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	4b79      	ldr	r3, [pc, #484]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800340c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003410:	2102      	movs	r1, #2
 8003412:	6011      	str	r1, [r2, #0]
 8003414:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003418:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	fa92 f1a2 	rbit	r1, r2
 8003422:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003426:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800342a:	6011      	str	r1, [r2, #0]
  return result;
 800342c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003430:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003434:	6812      	ldr	r2, [r2, #0]
 8003436:	fab2 f282 	clz	r2, r2
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	f002 021f 	and.w	r2, r2, #31
 8003446:	2101      	movs	r1, #1
 8003448:	fa01 f202 	lsl.w	r2, r1, r2
 800344c:	4013      	ands	r3, r2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d084      	beq.n	800335c <HAL_RCC_OscConfig+0x9c8>
 8003452:	e07f      	b.n	8003554 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003454:	f7fe f8be 	bl	80015d4 <HAL_GetTick>
 8003458:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800345c:	e00b      	b.n	8003476 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7fe f8b9 	bl	80015d4 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	; 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e2c4      	b.n	8003a00 <HAL_RCC_OscConfig+0x106c>
 8003476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800347e:	2202      	movs	r2, #2
 8003480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003486:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	fa93 f2a3 	rbit	r2, r3
 8003490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003494:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80034a2:	2202      	movs	r2, #2
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	fa93 f2a3 	rbit	r2, r3
 80034b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034bc:	601a      	str	r2, [r3, #0]
  return result;
 80034be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80034c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c8:	fab3 f383 	clz	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	095b      	lsrs	r3, r3, #5
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	f043 0302 	orr.w	r3, r3, #2
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d102      	bne.n	80034e2 <HAL_RCC_OscConfig+0xb4e>
 80034dc:	4b43      	ldr	r3, [pc, #268]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	e013      	b.n	800350a <HAL_RCC_OscConfig+0xb76>
 80034e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034ea:	2202      	movs	r2, #2
 80034ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	fa93 f2a3 	rbit	r2, r3
 80034fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003500:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	4b39      	ldr	r3, [pc, #228]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800350e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003512:	2102      	movs	r1, #2
 8003514:	6011      	str	r1, [r2, #0]
 8003516:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800351a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	fa92 f1a2 	rbit	r1, r2
 8003524:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003528:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800352c:	6011      	str	r1, [r2, #0]
  return result;
 800352e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003532:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003536:	6812      	ldr	r2, [r2, #0]
 8003538:	fab2 f282 	clz	r2, r2
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	f002 021f 	and.w	r2, r2, #31
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f202 	lsl.w	r2, r1, r2
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d184      	bne.n	800345e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003554:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003558:	2b01      	cmp	r3, #1
 800355a:	d105      	bne.n	8003568 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355c:	4b23      	ldr	r3, [pc, #140]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	4a22      	ldr	r2, [pc, #136]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 8003562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003566:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003568:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 8242 	beq.w	80039fe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800357a:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <HAL_RCC_OscConfig+0xc58>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b08      	cmp	r3, #8
 8003584:	f000 8213 	beq.w	80039ae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b02      	cmp	r3, #2
 8003596:	f040 8162 	bne.w	800385e <HAL_RCC_OscConfig+0xeca>
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80035a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	fa93 f2a3 	rbit	r2, r3
 80035b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035be:	601a      	str	r2, [r3, #0]
  return result;
 80035c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80035c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	461a      	mov	r2, r3
 80035dc:	2300      	movs	r3, #0
 80035de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fd fff8 	bl	80015d4 <HAL_GetTick>
 80035e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e8:	e00c      	b.n	8003604 <HAL_RCC_OscConfig+0xc70>
 80035ea:	bf00      	nop
 80035ec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fd fff0 	bl	80015d4 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e1fd      	b.n	8003a00 <HAL_RCC_OscConfig+0x106c>
 8003604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003608:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800360c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003616:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	fa93 f2a3 	rbit	r2, r3
 8003620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003624:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003628:	601a      	str	r2, [r3, #0]
  return result;
 800362a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003632:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003634:	fab3 f383 	clz	r3, r3
 8003638:	b2db      	uxtb	r3, r3
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d102      	bne.n	800364e <HAL_RCC_OscConfig+0xcba>
 8003648:	4bb0      	ldr	r3, [pc, #704]	; (800390c <HAL_RCC_OscConfig+0xf78>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	e027      	b.n	800369e <HAL_RCC_OscConfig+0xd0a>
 800364e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003652:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003656:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800365a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003660:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	fa93 f2a3 	rbit	r2, r3
 800366a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003678:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800367c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003686:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	fa93 f2a3 	rbit	r2, r3
 8003690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003694:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	4b9c      	ldr	r3, [pc, #624]	; (800390c <HAL_RCC_OscConfig+0xf78>)
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036a2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80036a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036aa:	6011      	str	r1, [r2, #0]
 80036ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036b0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	fa92 f1a2 	rbit	r1, r2
 80036ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036be:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036c2:	6011      	str	r1, [r2, #0]
  return result;
 80036c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036c8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	fab2 f282 	clz	r2, r2
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	f042 0220 	orr.w	r2, r2, #32
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	f002 021f 	and.w	r2, r2, #31
 80036de:	2101      	movs	r1, #1
 80036e0:	fa01 f202 	lsl.w	r2, r1, r2
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d182      	bne.n	80035f0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ea:	4b88      	ldr	r3, [pc, #544]	; (800390c <HAL_RCC_OscConfig+0xf78>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80036fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	430b      	orrs	r3, r1
 800370c:	497f      	ldr	r1, [pc, #508]	; (800390c <HAL_RCC_OscConfig+0xf78>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
 8003712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003716:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800371a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800371e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003724:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	fa93 f2a3 	rbit	r2, r3
 800372e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003732:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003736:	601a      	str	r2, [r3, #0]
  return result;
 8003738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003740:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003742:	fab3 f383 	clz	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800374c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	461a      	mov	r2, r3
 8003754:	2301      	movs	r3, #1
 8003756:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fd ff3c 	bl	80015d4 <HAL_GetTick>
 800375c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003760:	e009      	b.n	8003776 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003762:	f7fd ff37 	bl	80015d4 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e144      	b.n	8003a00 <HAL_RCC_OscConfig+0x106c>
 8003776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800377e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003788:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	fa93 f2a3 	rbit	r2, r3
 8003792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003796:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800379a:	601a      	str	r2, [r3, #0]
  return result;
 800379c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80037a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d102      	bne.n	80037c0 <HAL_RCC_OscConfig+0xe2c>
 80037ba:	4b54      	ldr	r3, [pc, #336]	; (800390c <HAL_RCC_OscConfig+0xf78>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	e027      	b.n	8003810 <HAL_RCC_OscConfig+0xe7c>
 80037c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	fa93 f2a3 	rbit	r2, r3
 80037dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80037ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	fa93 f2a3 	rbit	r2, r3
 8003802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003806:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	4b3f      	ldr	r3, [pc, #252]	; (800390c <HAL_RCC_OscConfig+0xf78>)
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003814:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003818:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800381c:	6011      	str	r1, [r2, #0]
 800381e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003822:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	fa92 f1a2 	rbit	r1, r2
 800382c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003830:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003834:	6011      	str	r1, [r2, #0]
  return result;
 8003836:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800383a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	fab2 f282 	clz	r2, r2
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	f042 0220 	orr.w	r2, r2, #32
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	f002 021f 	and.w	r2, r2, #31
 8003850:	2101      	movs	r1, #1
 8003852:	fa01 f202 	lsl.w	r2, r1, r2
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d082      	beq.n	8003762 <HAL_RCC_OscConfig+0xdce>
 800385c:	e0cf      	b.n	80039fe <HAL_RCC_OscConfig+0x106a>
 800385e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003862:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003866:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800386a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003870:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	fa93 f2a3 	rbit	r2, r3
 800387a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003882:	601a      	str	r2, [r3, #0]
  return result;
 8003884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003888:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800388c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388e:	fab3 f383 	clz	r3, r3
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003898:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	461a      	mov	r2, r3
 80038a0:	2300      	movs	r3, #0
 80038a2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7fd fe96 	bl	80015d4 <HAL_GetTick>
 80038a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ac:	e009      	b.n	80038c2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ae:	f7fd fe91 	bl	80015d4 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e09e      	b.n	8003a00 <HAL_RCC_OscConfig+0x106c>
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80038ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	fa93 f2a3 	rbit	r2, r3
 80038de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038e6:	601a      	str	r2, [r3, #0]
  return result;
 80038e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80038f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d104      	bne.n	8003910 <HAL_RCC_OscConfig+0xf7c>
 8003906:	4b01      	ldr	r3, [pc, #4]	; (800390c <HAL_RCC_OscConfig+0xf78>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	e029      	b.n	8003960 <HAL_RCC_OscConfig+0xfcc>
 800390c:	40021000 	.word	0x40021000
 8003910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003914:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800391c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003922:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	fa93 f2a3 	rbit	r2, r3
 800392c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003930:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800393e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003948:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	fa93 f2a3 	rbit	r2, r3
 8003952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003956:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <HAL_RCC_OscConfig+0x1078>)
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003964:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003968:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800396c:	6011      	str	r1, [r2, #0]
 800396e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003972:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	fa92 f1a2 	rbit	r1, r2
 800397c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003980:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003984:	6011      	str	r1, [r2, #0]
  return result;
 8003986:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800398a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	fab2 f282 	clz	r2, r2
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	f042 0220 	orr.w	r2, r2, #32
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	f002 021f 	and.w	r2, r2, #31
 80039a0:	2101      	movs	r1, #1
 80039a2:	fa01 f202 	lsl.w	r2, r1, r2
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d180      	bne.n	80038ae <HAL_RCC_OscConfig+0xf1a>
 80039ac:	e027      	b.n	80039fe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e01e      	b.n	8003a00 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039c2:	4b12      	ldr	r3, [pc, #72]	; (8003a0c <HAL_RCC_OscConfig+0x1078>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039ce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d10b      	bne.n	80039fa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80039e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80039e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d001      	beq.n	80039fe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000

08003a10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b09e      	sub	sp, #120	; 0x78
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e162      	b.n	8003cee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a28:	4b90      	ldr	r3, [pc, #576]	; (8003c6c <HAL_RCC_ClockConfig+0x25c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d910      	bls.n	8003a58 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b8d      	ldr	r3, [pc, #564]	; (8003c6c <HAL_RCC_ClockConfig+0x25c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 0207 	bic.w	r2, r3, #7
 8003a3e:	498b      	ldr	r1, [pc, #556]	; (8003c6c <HAL_RCC_ClockConfig+0x25c>)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b89      	ldr	r3, [pc, #548]	; (8003c6c <HAL_RCC_ClockConfig+0x25c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e14a      	b.n	8003cee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a64:	4b82      	ldr	r3, [pc, #520]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	497f      	ldr	r1, [pc, #508]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80dc 	beq.w	8003c3c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d13c      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xf6>
 8003a8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a94:	fa93 f3a3 	rbit	r3, r3
 8003a98:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d102      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xa6>
 8003ab0:	4b6f      	ldr	r3, [pc, #444]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	e00f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0xc6>
 8003ab6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003abe:	fa93 f3a3 	rbit	r3, r3
 8003ac2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ac4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ac8:	663b      	str	r3, [r7, #96]	; 0x60
 8003aca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003acc:	fa93 f3a3 	rbit	r3, r3
 8003ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ad2:	4b67      	ldr	r3, [pc, #412]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ada:	65ba      	str	r2, [r7, #88]	; 0x58
 8003adc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ade:	fa92 f2a2 	rbit	r2, r2
 8003ae2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003ae4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ae6:	fab2 f282 	clz	r2, r2
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	f042 0220 	orr.w	r2, r2, #32
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	f002 021f 	and.w	r2, r2, #31
 8003af6:	2101      	movs	r1, #1
 8003af8:	fa01 f202 	lsl.w	r2, r1, r2
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d17b      	bne.n	8003bfa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e0f3      	b.n	8003cee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d13c      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x178>
 8003b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1e:	fab3 f383 	clz	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	095b      	lsrs	r3, r3, #5
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d102      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x128>
 8003b32:	4b4f      	ldr	r3, [pc, #316]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	e00f      	b.n	8003b58 <HAL_RCC_ClockConfig+0x148>
 8003b38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b40:	fa93 f3a3 	rbit	r3, r3
 8003b44:	647b      	str	r3, [r7, #68]	; 0x44
 8003b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b4e:	fa93 f3a3 	rbit	r3, r3
 8003b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b54:	4b46      	ldr	r3, [pc, #280]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003b5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b60:	fa92 f2a2 	rbit	r2, r2
 8003b64:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003b66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b68:	fab2 f282 	clz	r2, r2
 8003b6c:	b2d2      	uxtb	r2, r2
 8003b6e:	f042 0220 	orr.w	r2, r2, #32
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	f002 021f 	and.w	r2, r2, #31
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d13a      	bne.n	8003bfa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0b2      	b.n	8003cee <HAL_RCC_ClockConfig+0x2de>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b96:	fab3 f383 	clz	r3, r3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d102      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x1a0>
 8003baa:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	e00d      	b.n	8003bcc <HAL_RCC_ClockConfig+0x1bc>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	fa93 f3a3 	rbit	r3, r3
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	623b      	str	r3, [r7, #32]
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2202      	movs	r2, #2
 8003bce:	61ba      	str	r2, [r7, #24]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	fa92 f2a2 	rbit	r2, r2
 8003bd6:	617a      	str	r2, [r7, #20]
  return result;
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	fab2 f282 	clz	r2, r2
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	f042 0220 	orr.w	r2, r2, #32
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	f002 021f 	and.w	r2, r2, #31
 8003bea:	2101      	movs	r1, #1
 8003bec:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e079      	b.n	8003cee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f023 0203 	bic.w	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	491a      	ldr	r1, [pc, #104]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c0c:	f7fd fce2 	bl	80015d4 <HAL_GetTick>
 8003c10:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c12:	e00a      	b.n	8003c2a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c14:	f7fd fcde 	bl	80015d4 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e061      	b.n	8003cee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	4b11      	ldr	r3, [pc, #68]	; (8003c70 <HAL_RCC_ClockConfig+0x260>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 020c 	and.w	r2, r3, #12
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d1eb      	bne.n	8003c14 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <HAL_RCC_ClockConfig+0x25c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d214      	bcs.n	8003c74 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <HAL_RCC_ClockConfig+0x25c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f023 0207 	bic.w	r2, r3, #7
 8003c52:	4906      	ldr	r1, [pc, #24]	; (8003c6c <HAL_RCC_ClockConfig+0x25c>)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5a:	4b04      	ldr	r3, [pc, #16]	; (8003c6c <HAL_RCC_ClockConfig+0x25c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e040      	b.n	8003cee <HAL_RCC_ClockConfig+0x2de>
 8003c6c:	40022000 	.word	0x40022000
 8003c70:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c80:	4b1d      	ldr	r3, [pc, #116]	; (8003cf8 <HAL_RCC_ClockConfig+0x2e8>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	491a      	ldr	r1, [pc, #104]	; (8003cf8 <HAL_RCC_ClockConfig+0x2e8>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c9e:	4b16      	ldr	r3, [pc, #88]	; (8003cf8 <HAL_RCC_ClockConfig+0x2e8>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4912      	ldr	r1, [pc, #72]	; (8003cf8 <HAL_RCC_ClockConfig+0x2e8>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003cb2:	f000 f829 	bl	8003d08 <HAL_RCC_GetSysClockFreq>
 8003cb6:	4601      	mov	r1, r0
 8003cb8:	4b0f      	ldr	r3, [pc, #60]	; (8003cf8 <HAL_RCC_ClockConfig+0x2e8>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cc0:	22f0      	movs	r2, #240	; 0xf0
 8003cc2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	fa92 f2a2 	rbit	r2, r2
 8003cca:	60fa      	str	r2, [r7, #12]
  return result;
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	fab2 f282 	clz	r2, r2
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	40d3      	lsrs	r3, r2
 8003cd6:	4a09      	ldr	r2, [pc, #36]	; (8003cfc <HAL_RCC_ClockConfig+0x2ec>)
 8003cd8:	5cd3      	ldrb	r3, [r2, r3]
 8003cda:	fa21 f303 	lsr.w	r3, r1, r3
 8003cde:	4a08      	ldr	r2, [pc, #32]	; (8003d00 <HAL_RCC_ClockConfig+0x2f0>)
 8003ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <HAL_RCC_ClockConfig+0x2f4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fd fc30 	bl	800154c <HAL_InitTick>
  
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3778      	adds	r7, #120	; 0x78
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	0800519c 	.word	0x0800519c
 8003d00:	20000000 	.word	0x20000000
 8003d04:	20000004 	.word	0x20000004

08003d08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b08b      	sub	sp, #44	; 0x2c
 8003d0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	2300      	movs	r3, #0
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	2300      	movs	r3, #0
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d22:	4b29      	ldr	r3, [pc, #164]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d002      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x30>
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d003      	beq.n	8003d3e <HAL_RCC_GetSysClockFreq+0x36>
 8003d36:	e03c      	b.n	8003db2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d38:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d3a:	623b      	str	r3, [r7, #32]
      break;
 8003d3c:	e03c      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003d44:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003d48:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	fa92 f2a2 	rbit	r2, r2
 8003d50:	607a      	str	r2, [r7, #4]
  return result;
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	fab2 f282 	clz	r2, r2
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	40d3      	lsrs	r3, r2
 8003d5c:	4a1c      	ldr	r2, [pc, #112]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003d5e:	5cd3      	ldrb	r3, [r2, r3]
 8003d60:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003d62:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	220f      	movs	r2, #15
 8003d6c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	fa92 f2a2 	rbit	r2, r2
 8003d74:	60fa      	str	r2, [r7, #12]
  return result;
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	fab2 f282 	clz	r2, r2
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	40d3      	lsrs	r3, r2
 8003d80:	4a14      	ldr	r2, [pc, #80]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d82:	5cd3      	ldrb	r3, [r2, r3]
 8003d84:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003d90:	4a0e      	ldr	r2, [pc, #56]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	fb02 f303 	mul.w	r3, r2, r3
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003da0:	e004      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	4a0c      	ldr	r2, [pc, #48]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003da6:	fb02 f303 	mul.w	r3, r2, r3
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	623b      	str	r3, [r7, #32]
      break;
 8003db0:	e002      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003db4:	623b      	str	r3, [r7, #32]
      break;
 8003db6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003db8:	6a3b      	ldr	r3, [r7, #32]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	372c      	adds	r7, #44	; 0x2c
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	007a1200 	.word	0x007a1200
 8003dd0:	080051ac 	.word	0x080051ac
 8003dd4:	080051bc 	.word	0x080051bc
 8003dd8:	003d0900 	.word	0x003d0900

08003ddc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b092      	sub	sp, #72	; 0x48
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003dec:	2300      	movs	r3, #0
 8003dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 80cd 	beq.w	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e00:	4b86      	ldr	r3, [pc, #536]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10e      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0c:	4b83      	ldr	r3, [pc, #524]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	4a82      	ldr	r2, [pc, #520]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e16:	61d3      	str	r3, [r2, #28]
 8003e18:	4b80      	ldr	r3, [pc, #512]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e24:	2301      	movs	r3, #1
 8003e26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2a:	4b7d      	ldr	r3, [pc, #500]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d118      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e36:	4b7a      	ldr	r3, [pc, #488]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a79      	ldr	r2, [pc, #484]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e42:	f7fd fbc7 	bl	80015d4 <HAL_GetTick>
 8003e46:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	e008      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4a:	f7fd fbc3 	bl	80015d4 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b64      	cmp	r3, #100	; 0x64
 8003e56:	d901      	bls.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e0db      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5c:	4b70      	ldr	r3, [pc, #448]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e68:	4b6c      	ldr	r3, [pc, #432]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e70:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d07d      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d076      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e86:	4b65      	ldr	r3, [pc, #404]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e94:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	fa93 f3a3 	rbit	r3, r3
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4b5e      	ldr	r3, [pc, #376]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	461a      	mov	r2, r3
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebc:	fa93 f3a3 	rbit	r3, r3
 8003ec0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec4:	fab3 f383 	clz	r3, r3
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4b55      	ldr	r3, [pc, #340]	; (8004024 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ed8:	4a50      	ldr	r2, [pc, #320]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003edc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d045      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee8:	f7fd fb74 	bl	80015d4 <HAL_GetTick>
 8003eec:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eee:	e00a      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef0:	f7fd fb70 	bl	80015d4 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e086      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003f06:	2302      	movs	r3, #2
 8003f08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	fa93 f3a3 	rbit	r3, r3
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
 8003f12:	2302      	movs	r3, #2
 8003f14:	623b      	str	r3, [r7, #32]
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	fa93 f3a3 	rbit	r3, r3
 8003f1c:	61fb      	str	r3, [r7, #28]
  return result;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	fab3 f383 	clz	r3, r3
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f043 0302 	orr.w	r3, r3, #2
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d102      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f34:	4b39      	ldr	r3, [pc, #228]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	e007      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	fa93 f3a3 	rbit	r3, r3
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	4b35      	ldr	r3, [pc, #212]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	613a      	str	r2, [r7, #16]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	fa92 f2a2 	rbit	r2, r2
 8003f54:	60fa      	str	r2, [r7, #12]
  return result;
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	fab2 f282 	clz	r2, r2
 8003f5c:	b2d2      	uxtb	r2, r2
 8003f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	f002 021f 	and.w	r2, r2, #31
 8003f68:	2101      	movs	r1, #1
 8003f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0bd      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003f74:	4b29      	ldr	r3, [pc, #164]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4926      	ldr	r1, [pc, #152]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d105      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f8e:	4b23      	ldr	r3, [pc, #140]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4a22      	ldr	r2, [pc, #136]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f98:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fa6:	4b1d      	ldr	r3, [pc, #116]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	f023 0203 	bic.w	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	491a      	ldr	r1, [pc, #104]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fc4:	4b15      	ldr	r3, [pc, #84]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	f023 0210 	bic.w	r2, r3, #16
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	4912      	ldr	r1, [pc, #72]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d008      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003fe2:	4b0e      	ldr	r3, [pc, #56]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	490b      	ldr	r1, [pc, #44]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	4903      	ldr	r1, [pc, #12]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800400e:	4313      	orrs	r3, r2
 8004010:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3748      	adds	r7, #72	; 0x48
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	40007000 	.word	0x40007000
 8004024:	10908100 	.word	0x10908100

08004028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e049      	b.n	80040ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fd f912 	bl	8001278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f000 fa30 	bl	80044cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d001      	beq.n	80040f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e038      	b.n	8004162 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <HAL_TIM_Base_Start+0x98>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00e      	beq.n	8004120 <HAL_TIM_Base_Start+0x48>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410a:	d009      	beq.n	8004120 <HAL_TIM_Base_Start+0x48>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a18      	ldr	r2, [pc, #96]	; (8004174 <HAL_TIM_Base_Start+0x9c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d004      	beq.n	8004120 <HAL_TIM_Base_Start+0x48>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a17      	ldr	r2, [pc, #92]	; (8004178 <HAL_TIM_Base_Start+0xa0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d115      	bne.n	800414c <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689a      	ldr	r2, [r3, #8]
 8004126:	4b15      	ldr	r3, [pc, #84]	; (800417c <HAL_TIM_Base_Start+0xa4>)
 8004128:	4013      	ands	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b06      	cmp	r3, #6
 8004130:	d015      	beq.n	800415e <HAL_TIM_Base_Start+0x86>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004138:	d011      	beq.n	800415e <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0201 	orr.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414a:	e008      	b.n	800415e <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	e000      	b.n	8004160 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800415e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40012c00 	.word	0x40012c00
 8004174:	40000400 	.word	0x40000400
 8004178:	40014000 	.word	0x40014000
 800417c:	00010007 	.word	0x00010007

08004180 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e049      	b.n	8004226 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f841 	bl	800422e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3304      	adds	r3, #4
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f000 f984 	bl	80044cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004236:	bf00      	nop
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_TIM_OC_ConfigChannel+0x1e>
 800425e:	2302      	movs	r3, #2
 8004260:	e066      	b.n	8004330 <HAL_TIM_OC_ConfigChannel+0xec>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b14      	cmp	r3, #20
 800426e:	d857      	bhi.n	8004320 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004270:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004276:	bf00      	nop
 8004278:	080042cd 	.word	0x080042cd
 800427c:	08004321 	.word	0x08004321
 8004280:	08004321 	.word	0x08004321
 8004284:	08004321 	.word	0x08004321
 8004288:	080042db 	.word	0x080042db
 800428c:	08004321 	.word	0x08004321
 8004290:	08004321 	.word	0x08004321
 8004294:	08004321 	.word	0x08004321
 8004298:	080042e9 	.word	0x080042e9
 800429c:	08004321 	.word	0x08004321
 80042a0:	08004321 	.word	0x08004321
 80042a4:	08004321 	.word	0x08004321
 80042a8:	080042f7 	.word	0x080042f7
 80042ac:	08004321 	.word	0x08004321
 80042b0:	08004321 	.word	0x08004321
 80042b4:	08004321 	.word	0x08004321
 80042b8:	08004305 	.word	0x08004305
 80042bc:	08004321 	.word	0x08004321
 80042c0:	08004321 	.word	0x08004321
 80042c4:	08004321 	.word	0x08004321
 80042c8:	08004313 	.word	0x08004313
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f972 	bl	80045bc <TIM_OC1_SetConfig>
      break;
 80042d8:	e025      	b.n	8004326 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 f9f1 	bl	80046c8 <TIM_OC2_SetConfig>
      break;
 80042e6:	e01e      	b.n	8004326 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fa6a 	bl	80047c8 <TIM_OC3_SetConfig>
      break;
 80042f4:	e017      	b.n	8004326 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 fae1 	bl	80048c4 <TIM_OC4_SetConfig>
      break;
 8004302:	e010      	b.n	8004326 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fb3e 	bl	800498c <TIM_OC5_SetConfig>
      break;
 8004310:	e009      	b.n	8004326 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68b9      	ldr	r1, [r7, #8]
 8004318:	4618      	mov	r0, r3
 800431a:	f000 fb95 	bl	8004a48 <TIM_OC6_SetConfig>
      break;
 800431e:	e002      	b.n	8004326 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	75fb      	strb	r3, [r7, #23]
      break;
 8004324:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800432e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434c:	2b01      	cmp	r3, #1
 800434e:	d101      	bne.n	8004354 <HAL_TIM_ConfigClockSource+0x1c>
 8004350:	2302      	movs	r3, #2
 8004352:	e0b6      	b.n	80044c2 <HAL_TIM_ConfigClockSource+0x18a>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004372:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004376:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800437e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004390:	d03e      	beq.n	8004410 <HAL_TIM_ConfigClockSource+0xd8>
 8004392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004396:	f200 8087 	bhi.w	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439e:	f000 8086 	beq.w	80044ae <HAL_TIM_ConfigClockSource+0x176>
 80043a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a6:	d87f      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 80043a8:	2b70      	cmp	r3, #112	; 0x70
 80043aa:	d01a      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0xaa>
 80043ac:	2b70      	cmp	r3, #112	; 0x70
 80043ae:	d87b      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 80043b0:	2b60      	cmp	r3, #96	; 0x60
 80043b2:	d050      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x11e>
 80043b4:	2b60      	cmp	r3, #96	; 0x60
 80043b6:	d877      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 80043b8:	2b50      	cmp	r3, #80	; 0x50
 80043ba:	d03c      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0xfe>
 80043bc:	2b50      	cmp	r3, #80	; 0x50
 80043be:	d873      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d058      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x13e>
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d86f      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 80043c8:	2b30      	cmp	r3, #48	; 0x30
 80043ca:	d064      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x15e>
 80043cc:	2b30      	cmp	r3, #48	; 0x30
 80043ce:	d86b      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 80043d0:	2b20      	cmp	r3, #32
 80043d2:	d060      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x15e>
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d867      	bhi.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d05c      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x15e>
 80043dc:	2b10      	cmp	r3, #16
 80043de:	d05a      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x15e>
 80043e0:	e062      	b.n	80044a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6899      	ldr	r1, [r3, #8]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f000 fc03 	bl	8004bfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004404:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	609a      	str	r2, [r3, #8]
      break;
 800440e:	e04f      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	6899      	ldr	r1, [r3, #8]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f000 fbec 	bl	8004bfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004432:	609a      	str	r2, [r3, #8]
      break;
 8004434:	e03c      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6859      	ldr	r1, [r3, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	461a      	mov	r2, r3
 8004444:	f000 fb60 	bl	8004b08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2150      	movs	r1, #80	; 0x50
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fbb9 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 8004454:	e02c      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6859      	ldr	r1, [r3, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	461a      	mov	r2, r3
 8004464:	f000 fb7f 	bl	8004b66 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2160      	movs	r1, #96	; 0x60
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fba9 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 8004474:	e01c      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6859      	ldr	r1, [r3, #4]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	461a      	mov	r2, r3
 8004484:	f000 fb40 	bl	8004b08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2140      	movs	r1, #64	; 0x40
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fb99 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 8004494:	e00c      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4619      	mov	r1, r3
 80044a0:	4610      	mov	r0, r2
 80044a2:	f000 fb90 	bl	8004bc6 <TIM_ITRx_SetConfig>
      break;
 80044a6:	e003      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	73fb      	strb	r3, [r7, #15]
      break;
 80044ac:	e000      	b.n	80044b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80044ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a32      	ldr	r2, [pc, #200]	; (80045a8 <TIM_Base_SetConfig+0xdc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d007      	beq.n	80044f4 <TIM_Base_SetConfig+0x28>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ea:	d003      	beq.n	80044f4 <TIM_Base_SetConfig+0x28>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a2f      	ldr	r2, [pc, #188]	; (80045ac <TIM_Base_SetConfig+0xe0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d108      	bne.n	8004506 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a27      	ldr	r2, [pc, #156]	; (80045a8 <TIM_Base_SetConfig+0xdc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <TIM_Base_SetConfig+0x6a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004514:	d00f      	beq.n	8004536 <TIM_Base_SetConfig+0x6a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a24      	ldr	r2, [pc, #144]	; (80045ac <TIM_Base_SetConfig+0xe0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00b      	beq.n	8004536 <TIM_Base_SetConfig+0x6a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a23      	ldr	r2, [pc, #140]	; (80045b0 <TIM_Base_SetConfig+0xe4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d007      	beq.n	8004536 <TIM_Base_SetConfig+0x6a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a22      	ldr	r2, [pc, #136]	; (80045b4 <TIM_Base_SetConfig+0xe8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d003      	beq.n	8004536 <TIM_Base_SetConfig+0x6a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a21      	ldr	r2, [pc, #132]	; (80045b8 <TIM_Base_SetConfig+0xec>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d108      	bne.n	8004548 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a0e      	ldr	r2, [pc, #56]	; (80045a8 <TIM_Base_SetConfig+0xdc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d00b      	beq.n	800458c <TIM_Base_SetConfig+0xc0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a0e      	ldr	r2, [pc, #56]	; (80045b0 <TIM_Base_SetConfig+0xe4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d007      	beq.n	800458c <TIM_Base_SetConfig+0xc0>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a0d      	ldr	r2, [pc, #52]	; (80045b4 <TIM_Base_SetConfig+0xe8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d003      	beq.n	800458c <TIM_Base_SetConfig+0xc0>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a0c      	ldr	r2, [pc, #48]	; (80045b8 <TIM_Base_SetConfig+0xec>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d103      	bne.n	8004594 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	615a      	str	r2, [r3, #20]
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40012c00 	.word	0x40012c00
 80045ac:	40000400 	.word	0x40000400
 80045b0:	40014000 	.word	0x40014000
 80045b4:	40014400 	.word	0x40014400
 80045b8:	40014800 	.word	0x40014800

080045bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	f023 0201 	bic.w	r2, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0303 	bic.w	r3, r3, #3
 80045f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f023 0302 	bic.w	r3, r3, #2
 8004608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a28      	ldr	r2, [pc, #160]	; (80046b8 <TIM_OC1_SetConfig+0xfc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00b      	beq.n	8004634 <TIM_OC1_SetConfig+0x78>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a27      	ldr	r2, [pc, #156]	; (80046bc <TIM_OC1_SetConfig+0x100>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d007      	beq.n	8004634 <TIM_OC1_SetConfig+0x78>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a26      	ldr	r2, [pc, #152]	; (80046c0 <TIM_OC1_SetConfig+0x104>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_OC1_SetConfig+0x78>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a25      	ldr	r2, [pc, #148]	; (80046c4 <TIM_OC1_SetConfig+0x108>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d10c      	bne.n	800464e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f023 0308 	bic.w	r3, r3, #8
 800463a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f023 0304 	bic.w	r3, r3, #4
 800464c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a19      	ldr	r2, [pc, #100]	; (80046b8 <TIM_OC1_SetConfig+0xfc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00b      	beq.n	800466e <TIM_OC1_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a18      	ldr	r2, [pc, #96]	; (80046bc <TIM_OC1_SetConfig+0x100>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <TIM_OC1_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a17      	ldr	r2, [pc, #92]	; (80046c0 <TIM_OC1_SetConfig+0x104>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <TIM_OC1_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a16      	ldr	r2, [pc, #88]	; (80046c4 <TIM_OC1_SetConfig+0x108>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d111      	bne.n	8004692 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800467c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	621a      	str	r2, [r3, #32]
}
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40014000 	.word	0x40014000
 80046c0:	40014400 	.word	0x40014400
 80046c4:	40014800 	.word	0x40014800

080046c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f023 0210 	bic.w	r2, r3, #16
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4313      	orrs	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f023 0320 	bic.w	r3, r3, #32
 8004716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a24      	ldr	r2, [pc, #144]	; (80047b8 <TIM_OC2_SetConfig+0xf0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d10d      	bne.n	8004748 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004746:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a1b      	ldr	r2, [pc, #108]	; (80047b8 <TIM_OC2_SetConfig+0xf0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00b      	beq.n	8004768 <TIM_OC2_SetConfig+0xa0>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <TIM_OC2_SetConfig+0xf4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d007      	beq.n	8004768 <TIM_OC2_SetConfig+0xa0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a19      	ldr	r2, [pc, #100]	; (80047c0 <TIM_OC2_SetConfig+0xf8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d003      	beq.n	8004768 <TIM_OC2_SetConfig+0xa0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a18      	ldr	r2, [pc, #96]	; (80047c4 <TIM_OC2_SetConfig+0xfc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d113      	bne.n	8004790 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800476e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004776:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40012c00 	.word	0x40012c00
 80047bc:	40014000 	.word	0x40014000
 80047c0:	40014400 	.word	0x40014400
 80047c4:	40014800 	.word	0x40014800

080047c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0303 	bic.w	r3, r3, #3
 8004802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	021b      	lsls	r3, r3, #8
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a23      	ldr	r2, [pc, #140]	; (80048b4 <TIM_OC3_SetConfig+0xec>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d10d      	bne.n	8004846 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004844:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a1a      	ldr	r2, [pc, #104]	; (80048b4 <TIM_OC3_SetConfig+0xec>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00b      	beq.n	8004866 <TIM_OC3_SetConfig+0x9e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a19      	ldr	r2, [pc, #100]	; (80048b8 <TIM_OC3_SetConfig+0xf0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d007      	beq.n	8004866 <TIM_OC3_SetConfig+0x9e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a18      	ldr	r2, [pc, #96]	; (80048bc <TIM_OC3_SetConfig+0xf4>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d003      	beq.n	8004866 <TIM_OC3_SetConfig+0x9e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a17      	ldr	r2, [pc, #92]	; (80048c0 <TIM_OC3_SetConfig+0xf8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d113      	bne.n	800488e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800486c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	621a      	str	r2, [r3, #32]
}
 80048a8:	bf00      	nop
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40014000 	.word	0x40014000
 80048bc:	40014400 	.word	0x40014400
 80048c0:	40014800 	.word	0x40014800

080048c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	031b      	lsls	r3, r3, #12
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a16      	ldr	r2, [pc, #88]	; (800497c <TIM_OC4_SetConfig+0xb8>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00b      	beq.n	8004940 <TIM_OC4_SetConfig+0x7c>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a15      	ldr	r2, [pc, #84]	; (8004980 <TIM_OC4_SetConfig+0xbc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d007      	beq.n	8004940 <TIM_OC4_SetConfig+0x7c>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a14      	ldr	r2, [pc, #80]	; (8004984 <TIM_OC4_SetConfig+0xc0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d003      	beq.n	8004940 <TIM_OC4_SetConfig+0x7c>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4a13      	ldr	r2, [pc, #76]	; (8004988 <TIM_OC4_SetConfig+0xc4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d109      	bne.n	8004954 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	019b      	lsls	r3, r3, #6
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	621a      	str	r2, [r3, #32]
}
 800496e:	bf00      	nop
 8004970:	371c      	adds	r7, #28
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40014000 	.word	0x40014000
 8004984:	40014400 	.word	0x40014400
 8004988:	40014800 	.word	0x40014800

0800498c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80049d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	041b      	lsls	r3, r3, #16
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a15      	ldr	r2, [pc, #84]	; (8004a38 <TIM_OC5_SetConfig+0xac>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00b      	beq.n	80049fe <TIM_OC5_SetConfig+0x72>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a14      	ldr	r2, [pc, #80]	; (8004a3c <TIM_OC5_SetConfig+0xb0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d007      	beq.n	80049fe <TIM_OC5_SetConfig+0x72>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a13      	ldr	r2, [pc, #76]	; (8004a40 <TIM_OC5_SetConfig+0xb4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d003      	beq.n	80049fe <TIM_OC5_SetConfig+0x72>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a12      	ldr	r2, [pc, #72]	; (8004a44 <TIM_OC5_SetConfig+0xb8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d109      	bne.n	8004a12 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	021b      	lsls	r3, r3, #8
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	621a      	str	r2, [r3, #32]
}
 8004a2c:	bf00      	nop
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	40012c00 	.word	0x40012c00
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40014400 	.word	0x40014400
 8004a44:	40014800 	.word	0x40014800

08004a48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	021b      	lsls	r3, r3, #8
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	051b      	lsls	r3, r3, #20
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a16      	ldr	r2, [pc, #88]	; (8004af8 <TIM_OC6_SetConfig+0xb0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00b      	beq.n	8004abc <TIM_OC6_SetConfig+0x74>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a15      	ldr	r2, [pc, #84]	; (8004afc <TIM_OC6_SetConfig+0xb4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d007      	beq.n	8004abc <TIM_OC6_SetConfig+0x74>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a14      	ldr	r2, [pc, #80]	; (8004b00 <TIM_OC6_SetConfig+0xb8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d003      	beq.n	8004abc <TIM_OC6_SetConfig+0x74>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <TIM_OC6_SetConfig+0xbc>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d109      	bne.n	8004ad0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	029b      	lsls	r3, r3, #10
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	621a      	str	r2, [r3, #32]
}
 8004aea:	bf00      	nop
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40014000 	.word	0x40014000
 8004b00:	40014400 	.word	0x40014400
 8004b04:	40014800 	.word	0x40014800

08004b08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f023 0201 	bic.w	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f023 030a 	bic.w	r3, r3, #10
 8004b44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b087      	sub	sp, #28
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	f023 0210 	bic.w	r2, r3, #16
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	031b      	lsls	r3, r3, #12
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ba2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b085      	sub	sp, #20
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f043 0307 	orr.w	r3, r3, #7
 8004be8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	609a      	str	r2, [r3, #8]
}
 8004bf0:	bf00      	nop
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	021a      	lsls	r2, r3, #8
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	609a      	str	r2, [r3, #8]
}
 8004c30:	bf00      	nop
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d101      	bne.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c50:	2302      	movs	r3, #2
 8004c52:	e054      	b.n	8004cfe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d108      	bne.n	8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c84:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a17      	ldr	r2, [pc, #92]	; (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d00e      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbc:	d009      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a13      	ldr	r2, [pc, #76]	; (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d004      	beq.n	8004cd2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a11      	ldr	r2, [pc, #68]	; (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d10c      	bne.n	8004cec <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40012c00 	.word	0x40012c00
 8004d10:	40000400 	.word	0x40000400
 8004d14:	40014000 	.word	0x40014000

08004d18 <log>:
 8004d18:	b538      	push	{r3, r4, r5, lr}
 8004d1a:	ed2d 8b02 	vpush	{d8}
 8004d1e:	ec55 4b10 	vmov	r4, r5, d0
 8004d22:	f000 f839 	bl	8004d98 <__ieee754_log>
 8004d26:	4622      	mov	r2, r4
 8004d28:	462b      	mov	r3, r5
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	eeb0 8a40 	vmov.f32	s16, s0
 8004d32:	eef0 8a60 	vmov.f32	s17, s1
 8004d36:	f7fb fe9d 	bl	8000a74 <__aeabi_dcmpun>
 8004d3a:	b998      	cbnz	r0, 8004d64 <log+0x4c>
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2300      	movs	r3, #0
 8004d40:	4620      	mov	r0, r4
 8004d42:	4629      	mov	r1, r5
 8004d44:	f7fb fe8c 	bl	8000a60 <__aeabi_dcmpgt>
 8004d48:	b960      	cbnz	r0, 8004d64 <log+0x4c>
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	4620      	mov	r0, r4
 8004d50:	4629      	mov	r1, r5
 8004d52:	f7fb fe5d 	bl	8000a10 <__aeabi_dcmpeq>
 8004d56:	b160      	cbz	r0, 8004d72 <log+0x5a>
 8004d58:	f000 f9e2 	bl	8005120 <__errno>
 8004d5c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8004d88 <log+0x70>
 8004d60:	2322      	movs	r3, #34	; 0x22
 8004d62:	6003      	str	r3, [r0, #0]
 8004d64:	eeb0 0a48 	vmov.f32	s0, s16
 8004d68:	eef0 0a68 	vmov.f32	s1, s17
 8004d6c:	ecbd 8b02 	vpop	{d8}
 8004d70:	bd38      	pop	{r3, r4, r5, pc}
 8004d72:	f000 f9d5 	bl	8005120 <__errno>
 8004d76:	ecbd 8b02 	vpop	{d8}
 8004d7a:	2321      	movs	r3, #33	; 0x21
 8004d7c:	6003      	str	r3, [r0, #0]
 8004d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d82:	4803      	ldr	r0, [pc, #12]	; (8004d90 <log+0x78>)
 8004d84:	f000 b9c4 	b.w	8005110 <nan>
 8004d88:	00000000 	.word	0x00000000
 8004d8c:	fff00000 	.word	0xfff00000
 8004d90:	080051cc 	.word	0x080051cc
 8004d94:	00000000 	.word	0x00000000

08004d98 <__ieee754_log>:
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	ec51 0b10 	vmov	r0, r1, d0
 8004da0:	ed2d 8b04 	vpush	{d8-d9}
 8004da4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004da8:	b083      	sub	sp, #12
 8004daa:	460d      	mov	r5, r1
 8004dac:	da29      	bge.n	8004e02 <__ieee754_log+0x6a>
 8004dae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004db2:	4303      	orrs	r3, r0
 8004db4:	ee10 2a10 	vmov	r2, s0
 8004db8:	d10c      	bne.n	8004dd4 <__ieee754_log+0x3c>
 8004dba:	49cf      	ldr	r1, [pc, #828]	; (80050f8 <__ieee754_log+0x360>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	f7fb fce7 	bl	8000794 <__aeabi_ddiv>
 8004dc6:	ec41 0b10 	vmov	d0, r0, r1
 8004dca:	b003      	add	sp, #12
 8004dcc:	ecbd 8b04 	vpop	{d8-d9}
 8004dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd4:	2900      	cmp	r1, #0
 8004dd6:	da05      	bge.n	8004de4 <__ieee754_log+0x4c>
 8004dd8:	460b      	mov	r3, r1
 8004dda:	f7fb f9f9 	bl	80001d0 <__aeabi_dsub>
 8004dde:	2200      	movs	r2, #0
 8004de0:	2300      	movs	r3, #0
 8004de2:	e7ee      	b.n	8004dc2 <__ieee754_log+0x2a>
 8004de4:	4bc5      	ldr	r3, [pc, #788]	; (80050fc <__ieee754_log+0x364>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	f7fb fbaa 	bl	8000540 <__aeabi_dmul>
 8004dec:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8004df0:	460d      	mov	r5, r1
 8004df2:	4ac3      	ldr	r2, [pc, #780]	; (8005100 <__ieee754_log+0x368>)
 8004df4:	4295      	cmp	r5, r2
 8004df6:	dd06      	ble.n	8004e06 <__ieee754_log+0x6e>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	f7fb f9ea 	bl	80001d4 <__adddf3>
 8004e00:	e7e1      	b.n	8004dc6 <__ieee754_log+0x2e>
 8004e02:	2300      	movs	r3, #0
 8004e04:	e7f5      	b.n	8004df2 <__ieee754_log+0x5a>
 8004e06:	152c      	asrs	r4, r5, #20
 8004e08:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004e0c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004e10:	441c      	add	r4, r3
 8004e12:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8004e16:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8004e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e1e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8004e22:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8004e26:	ea42 0105 	orr.w	r1, r2, r5
 8004e2a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8004e2e:	2200      	movs	r2, #0
 8004e30:	4bb4      	ldr	r3, [pc, #720]	; (8005104 <__ieee754_log+0x36c>)
 8004e32:	f7fb f9cd 	bl	80001d0 <__aeabi_dsub>
 8004e36:	1cab      	adds	r3, r5, #2
 8004e38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	4682      	mov	sl, r0
 8004e40:	468b      	mov	fp, r1
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	dc53      	bgt.n	8004ef0 <__ieee754_log+0x158>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f7fb fde1 	bl	8000a10 <__aeabi_dcmpeq>
 8004e4e:	b1d0      	cbz	r0, 8004e86 <__ieee754_log+0xee>
 8004e50:	2c00      	cmp	r4, #0
 8004e52:	f000 8122 	beq.w	800509a <__ieee754_log+0x302>
 8004e56:	4620      	mov	r0, r4
 8004e58:	f7fb fb08 	bl	800046c <__aeabi_i2d>
 8004e5c:	a390      	add	r3, pc, #576	; (adr r3, 80050a0 <__ieee754_log+0x308>)
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	4606      	mov	r6, r0
 8004e64:	460f      	mov	r7, r1
 8004e66:	f7fb fb6b 	bl	8000540 <__aeabi_dmul>
 8004e6a:	a38f      	add	r3, pc, #572	; (adr r3, 80050a8 <__ieee754_log+0x310>)
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	4604      	mov	r4, r0
 8004e72:	460d      	mov	r5, r1
 8004e74:	4630      	mov	r0, r6
 8004e76:	4639      	mov	r1, r7
 8004e78:	f7fb fb62 	bl	8000540 <__aeabi_dmul>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	4620      	mov	r0, r4
 8004e82:	4629      	mov	r1, r5
 8004e84:	e7ba      	b.n	8004dfc <__ieee754_log+0x64>
 8004e86:	a38a      	add	r3, pc, #552	; (adr r3, 80050b0 <__ieee754_log+0x318>)
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	4650      	mov	r0, sl
 8004e8e:	4659      	mov	r1, fp
 8004e90:	f7fb fb56 	bl	8000540 <__aeabi_dmul>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	2000      	movs	r0, #0
 8004e9a:	499b      	ldr	r1, [pc, #620]	; (8005108 <__ieee754_log+0x370>)
 8004e9c:	f7fb f998 	bl	80001d0 <__aeabi_dsub>
 8004ea0:	4652      	mov	r2, sl
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	460f      	mov	r7, r1
 8004ea6:	465b      	mov	r3, fp
 8004ea8:	4650      	mov	r0, sl
 8004eaa:	4659      	mov	r1, fp
 8004eac:	f7fb fb48 	bl	8000540 <__aeabi_dmul>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4630      	mov	r0, r6
 8004eb6:	4639      	mov	r1, r7
 8004eb8:	f7fb fb42 	bl	8000540 <__aeabi_dmul>
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	460f      	mov	r7, r1
 8004ec0:	b914      	cbnz	r4, 8004ec8 <__ieee754_log+0x130>
 8004ec2:	4632      	mov	r2, r6
 8004ec4:	463b      	mov	r3, r7
 8004ec6:	e0a2      	b.n	800500e <__ieee754_log+0x276>
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f7fb facf 	bl	800046c <__aeabi_i2d>
 8004ece:	a374      	add	r3, pc, #464	; (adr r3, 80050a0 <__ieee754_log+0x308>)
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	4689      	mov	r9, r1
 8004ed8:	f7fb fb32 	bl	8000540 <__aeabi_dmul>
 8004edc:	a372      	add	r3, pc, #456	; (adr r3, 80050a8 <__ieee754_log+0x310>)
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	460d      	mov	r5, r1
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	4649      	mov	r1, r9
 8004eea:	f7fb fb29 	bl	8000540 <__aeabi_dmul>
 8004eee:	e0a7      	b.n	8005040 <__ieee754_log+0x2a8>
 8004ef0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ef4:	f7fb f96e 	bl	80001d4 <__adddf3>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4650      	mov	r0, sl
 8004efe:	4659      	mov	r1, fp
 8004f00:	f7fb fc48 	bl	8000794 <__aeabi_ddiv>
 8004f04:	ec41 0b18 	vmov	d8, r0, r1
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f7fb faaf 	bl	800046c <__aeabi_i2d>
 8004f0e:	ec53 2b18 	vmov	r2, r3, d8
 8004f12:	ec41 0b19 	vmov	d9, r0, r1
 8004f16:	ec51 0b18 	vmov	r0, r1, d8
 8004f1a:	f7fb fb11 	bl	8000540 <__aeabi_dmul>
 8004f1e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8004f22:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4680      	mov	r8, r0
 8004f2e:	4689      	mov	r9, r1
 8004f30:	f7fb fb06 	bl	8000540 <__aeabi_dmul>
 8004f34:	a360      	add	r3, pc, #384	; (adr r3, 80050b8 <__ieee754_log+0x320>)
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	4606      	mov	r6, r0
 8004f3c:	460f      	mov	r7, r1
 8004f3e:	f7fb faff 	bl	8000540 <__aeabi_dmul>
 8004f42:	a35f      	add	r3, pc, #380	; (adr r3, 80050c0 <__ieee754_log+0x328>)
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	f7fb f944 	bl	80001d4 <__adddf3>
 8004f4c:	4632      	mov	r2, r6
 8004f4e:	463b      	mov	r3, r7
 8004f50:	f7fb faf6 	bl	8000540 <__aeabi_dmul>
 8004f54:	a35c      	add	r3, pc, #368	; (adr r3, 80050c8 <__ieee754_log+0x330>)
 8004f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5a:	f7fb f93b 	bl	80001d4 <__adddf3>
 8004f5e:	4632      	mov	r2, r6
 8004f60:	463b      	mov	r3, r7
 8004f62:	f7fb faed 	bl	8000540 <__aeabi_dmul>
 8004f66:	a35a      	add	r3, pc, #360	; (adr r3, 80050d0 <__ieee754_log+0x338>)
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	f7fb f932 	bl	80001d4 <__adddf3>
 8004f70:	4642      	mov	r2, r8
 8004f72:	464b      	mov	r3, r9
 8004f74:	f7fb fae4 	bl	8000540 <__aeabi_dmul>
 8004f78:	a357      	add	r3, pc, #348	; (adr r3, 80050d8 <__ieee754_log+0x340>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	4680      	mov	r8, r0
 8004f80:	4689      	mov	r9, r1
 8004f82:	4630      	mov	r0, r6
 8004f84:	4639      	mov	r1, r7
 8004f86:	f7fb fadb 	bl	8000540 <__aeabi_dmul>
 8004f8a:	a355      	add	r3, pc, #340	; (adr r3, 80050e0 <__ieee754_log+0x348>)
 8004f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f90:	f7fb f920 	bl	80001d4 <__adddf3>
 8004f94:	4632      	mov	r2, r6
 8004f96:	463b      	mov	r3, r7
 8004f98:	f7fb fad2 	bl	8000540 <__aeabi_dmul>
 8004f9c:	a352      	add	r3, pc, #328	; (adr r3, 80050e8 <__ieee754_log+0x350>)
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	f7fb f917 	bl	80001d4 <__adddf3>
 8004fa6:	4632      	mov	r2, r6
 8004fa8:	463b      	mov	r3, r7
 8004faa:	f7fb fac9 	bl	8000540 <__aeabi_dmul>
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	f7fb f90d 	bl	80001d4 <__adddf3>
 8004fba:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8004fbe:	9b01      	ldr	r3, [sp, #4]
 8004fc0:	3551      	adds	r5, #81	; 0x51
 8004fc2:	431d      	orrs	r5, r3
 8004fc4:	2d00      	cmp	r5, #0
 8004fc6:	4680      	mov	r8, r0
 8004fc8:	4689      	mov	r9, r1
 8004fca:	dd48      	ble.n	800505e <__ieee754_log+0x2c6>
 8004fcc:	4b4e      	ldr	r3, [pc, #312]	; (8005108 <__ieee754_log+0x370>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	4650      	mov	r0, sl
 8004fd2:	4659      	mov	r1, fp
 8004fd4:	f7fb fab4 	bl	8000540 <__aeabi_dmul>
 8004fd8:	4652      	mov	r2, sl
 8004fda:	465b      	mov	r3, fp
 8004fdc:	f7fb fab0 	bl	8000540 <__aeabi_dmul>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4606      	mov	r6, r0
 8004fe6:	460f      	mov	r7, r1
 8004fe8:	4640      	mov	r0, r8
 8004fea:	4649      	mov	r1, r9
 8004fec:	f7fb f8f2 	bl	80001d4 <__adddf3>
 8004ff0:	ec53 2b18 	vmov	r2, r3, d8
 8004ff4:	f7fb faa4 	bl	8000540 <__aeabi_dmul>
 8004ff8:	4680      	mov	r8, r0
 8004ffa:	4689      	mov	r9, r1
 8004ffc:	b964      	cbnz	r4, 8005018 <__ieee754_log+0x280>
 8004ffe:	4602      	mov	r2, r0
 8005000:	460b      	mov	r3, r1
 8005002:	4630      	mov	r0, r6
 8005004:	4639      	mov	r1, r7
 8005006:	f7fb f8e3 	bl	80001d0 <__aeabi_dsub>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4650      	mov	r0, sl
 8005010:	4659      	mov	r1, fp
 8005012:	f7fb f8dd 	bl	80001d0 <__aeabi_dsub>
 8005016:	e6d6      	b.n	8004dc6 <__ieee754_log+0x2e>
 8005018:	a321      	add	r3, pc, #132	; (adr r3, 80050a0 <__ieee754_log+0x308>)
 800501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501e:	ec51 0b19 	vmov	r0, r1, d9
 8005022:	f7fb fa8d 	bl	8000540 <__aeabi_dmul>
 8005026:	a320      	add	r3, pc, #128	; (adr r3, 80050a8 <__ieee754_log+0x310>)
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	4604      	mov	r4, r0
 800502e:	460d      	mov	r5, r1
 8005030:	ec51 0b19 	vmov	r0, r1, d9
 8005034:	f7fb fa84 	bl	8000540 <__aeabi_dmul>
 8005038:	4642      	mov	r2, r8
 800503a:	464b      	mov	r3, r9
 800503c:	f7fb f8ca 	bl	80001d4 <__adddf3>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4630      	mov	r0, r6
 8005046:	4639      	mov	r1, r7
 8005048:	f7fb f8c2 	bl	80001d0 <__aeabi_dsub>
 800504c:	4652      	mov	r2, sl
 800504e:	465b      	mov	r3, fp
 8005050:	f7fb f8be 	bl	80001d0 <__aeabi_dsub>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4620      	mov	r0, r4
 800505a:	4629      	mov	r1, r5
 800505c:	e7d9      	b.n	8005012 <__ieee754_log+0x27a>
 800505e:	4602      	mov	r2, r0
 8005060:	460b      	mov	r3, r1
 8005062:	4650      	mov	r0, sl
 8005064:	4659      	mov	r1, fp
 8005066:	f7fb f8b3 	bl	80001d0 <__aeabi_dsub>
 800506a:	ec53 2b18 	vmov	r2, r3, d8
 800506e:	f7fb fa67 	bl	8000540 <__aeabi_dmul>
 8005072:	4606      	mov	r6, r0
 8005074:	460f      	mov	r7, r1
 8005076:	2c00      	cmp	r4, #0
 8005078:	f43f af23 	beq.w	8004ec2 <__ieee754_log+0x12a>
 800507c:	a308      	add	r3, pc, #32	; (adr r3, 80050a0 <__ieee754_log+0x308>)
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	ec51 0b19 	vmov	r0, r1, d9
 8005086:	f7fb fa5b 	bl	8000540 <__aeabi_dmul>
 800508a:	a307      	add	r3, pc, #28	; (adr r3, 80050a8 <__ieee754_log+0x310>)
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	4604      	mov	r4, r0
 8005092:	460d      	mov	r5, r1
 8005094:	ec51 0b19 	vmov	r0, r1, d9
 8005098:	e727      	b.n	8004eea <__ieee754_log+0x152>
 800509a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80050f0 <__ieee754_log+0x358>
 800509e:	e694      	b.n	8004dca <__ieee754_log+0x32>
 80050a0:	fee00000 	.word	0xfee00000
 80050a4:	3fe62e42 	.word	0x3fe62e42
 80050a8:	35793c76 	.word	0x35793c76
 80050ac:	3dea39ef 	.word	0x3dea39ef
 80050b0:	55555555 	.word	0x55555555
 80050b4:	3fd55555 	.word	0x3fd55555
 80050b8:	df3e5244 	.word	0xdf3e5244
 80050bc:	3fc2f112 	.word	0x3fc2f112
 80050c0:	96cb03de 	.word	0x96cb03de
 80050c4:	3fc74664 	.word	0x3fc74664
 80050c8:	94229359 	.word	0x94229359
 80050cc:	3fd24924 	.word	0x3fd24924
 80050d0:	55555593 	.word	0x55555593
 80050d4:	3fe55555 	.word	0x3fe55555
 80050d8:	d078c69f 	.word	0xd078c69f
 80050dc:	3fc39a09 	.word	0x3fc39a09
 80050e0:	1d8e78af 	.word	0x1d8e78af
 80050e4:	3fcc71c5 	.word	0x3fcc71c5
 80050e8:	9997fa04 	.word	0x9997fa04
 80050ec:	3fd99999 	.word	0x3fd99999
	...
 80050f8:	c3500000 	.word	0xc3500000
 80050fc:	43500000 	.word	0x43500000
 8005100:	7fefffff 	.word	0x7fefffff
 8005104:	3ff00000 	.word	0x3ff00000
 8005108:	3fe00000 	.word	0x3fe00000
 800510c:	00000000 	.word	0x00000000

08005110 <nan>:
 8005110:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005118 <nan+0x8>
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	00000000 	.word	0x00000000
 800511c:	7ff80000 	.word	0x7ff80000

08005120 <__errno>:
 8005120:	4b01      	ldr	r3, [pc, #4]	; (8005128 <__errno+0x8>)
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	2000000c 	.word	0x2000000c

0800512c <__libc_init_array>:
 800512c:	b570      	push	{r4, r5, r6, lr}
 800512e:	4d0d      	ldr	r5, [pc, #52]	; (8005164 <__libc_init_array+0x38>)
 8005130:	4c0d      	ldr	r4, [pc, #52]	; (8005168 <__libc_init_array+0x3c>)
 8005132:	1b64      	subs	r4, r4, r5
 8005134:	10a4      	asrs	r4, r4, #2
 8005136:	2600      	movs	r6, #0
 8005138:	42a6      	cmp	r6, r4
 800513a:	d109      	bne.n	8005150 <__libc_init_array+0x24>
 800513c:	4d0b      	ldr	r5, [pc, #44]	; (800516c <__libc_init_array+0x40>)
 800513e:	4c0c      	ldr	r4, [pc, #48]	; (8005170 <__libc_init_array+0x44>)
 8005140:	f000 f820 	bl	8005184 <_init>
 8005144:	1b64      	subs	r4, r4, r5
 8005146:	10a4      	asrs	r4, r4, #2
 8005148:	2600      	movs	r6, #0
 800514a:	42a6      	cmp	r6, r4
 800514c:	d105      	bne.n	800515a <__libc_init_array+0x2e>
 800514e:	bd70      	pop	{r4, r5, r6, pc}
 8005150:	f855 3b04 	ldr.w	r3, [r5], #4
 8005154:	4798      	blx	r3
 8005156:	3601      	adds	r6, #1
 8005158:	e7ee      	b.n	8005138 <__libc_init_array+0xc>
 800515a:	f855 3b04 	ldr.w	r3, [r5], #4
 800515e:	4798      	blx	r3
 8005160:	3601      	adds	r6, #1
 8005162:	e7f2      	b.n	800514a <__libc_init_array+0x1e>
 8005164:	080051d0 	.word	0x080051d0
 8005168:	080051d0 	.word	0x080051d0
 800516c:	080051d0 	.word	0x080051d0
 8005170:	080051d4 	.word	0x080051d4

08005174 <memset>:
 8005174:	4402      	add	r2, r0
 8005176:	4603      	mov	r3, r0
 8005178:	4293      	cmp	r3, r2
 800517a:	d100      	bne.n	800517e <memset+0xa>
 800517c:	4770      	bx	lr
 800517e:	f803 1b01 	strb.w	r1, [r3], #1
 8005182:	e7f9      	b.n	8005178 <memset+0x4>

08005184 <_init>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	bf00      	nop
 8005188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518a:	bc08      	pop	{r3}
 800518c:	469e      	mov	lr, r3
 800518e:	4770      	bx	lr

08005190 <_fini>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	bf00      	nop
 8005194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005196:	bc08      	pop	{r3}
 8005198:	469e      	mov	lr, r3
 800519a:	4770      	bx	lr
