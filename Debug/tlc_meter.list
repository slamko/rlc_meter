
tlc_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800546c  0800546c  0001546c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054a0  080054a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080054a0  080054a0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054a0  080054a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a0  080054a0  000154a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054a4  080054a4  000154a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080054a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000c0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec7f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022e3  00000000  00000000  0002ed1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  00031008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b90  00000000  00000000  00031c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e5b3  00000000  00000000  00032818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7cb  00000000  00000000  00050dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ad3d4  00000000  00000000  0005f596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010c96a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003624  00000000  00000000  0010c9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005454 	.word	0x08005454

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08005454 	.word	0x08005454

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	{ return __r; }
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aee:	4610      	mov	r0, r2
 8000af0:	4619      	mov	r1, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <_Z9capa_calcNSt6chrono8durationIxSt5ratioILx1ELx1000EEEE3Resmm>:

using namespace std::chrono;

bool adc_ready = false;

Capa capa_calc(std::chrono::milliseconds charge_time, Res res, uint32_t vc0, uint32_t vc) {
 8000afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000b08:	e9c7 2300 	strd	r2, r3, [r7]
	double ln = log((double)(4096 - vc0) / (double)(4096 - vc));
 8000b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b0e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fc9a 	bl	800044c <__aeabi_ui2d>
 8000b18:	4682      	mov	sl, r0
 8000b1a:	468b      	mov	fp, r1
 8000b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b1e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fc92 	bl	800044c <__aeabi_ui2d>
 8000b28:	4602      	mov	r2, r0
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	4650      	mov	r0, sl
 8000b2e:	4659      	mov	r1, fp
 8000b30:	f7ff fe30 	bl	8000794 <__aeabi_ddiv>
 8000b34:	4602      	mov	r2, r0
 8000b36:	460b      	mov	r3, r1
 8000b38:	ec43 2b17 	vmov	d7, r2, r3
 8000b3c:	eeb0 0a47 	vmov.f32	s0, s14
 8000b40:	eef0 0a67 	vmov.f32	s1, s15
 8000b44:	f004 fa50 	bl	8004fe8 <log>
 8000b48:	ed87 0b04 	vstr	d0, [r7, #16]
	return Capa::uf(((charge_time.count() * 1000 )/ (ln * res)) * 1000 * 1000);
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ffc5 	bl	8000ae0 <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv>
 8000b56:	4602      	mov	r2, r0
 8000b58:	460b      	mov	r3, r1
 8000b5a:	f04f 0a00 	mov.w	sl, #0
 8000b5e:	f04f 0b00 	mov.w	fp, #0
 8000b62:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8000b66:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8000b6a:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8000b6e:	4652      	mov	r2, sl
 8000b70:	465b      	mov	r3, fp
 8000b72:	1a14      	subs	r4, r2, r0
 8000b74:	eb63 0501 	sbc.w	r5, r3, r1
 8000b78:	f04f 0200 	mov.w	r2, #0
 8000b7c:	f04f 0300 	mov.w	r3, #0
 8000b80:	00ab      	lsls	r3, r5, #2
 8000b82:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8000b86:	00a2      	lsls	r2, r4, #2
 8000b88:	4614      	mov	r4, r2
 8000b8a:	461d      	mov	r5, r3
 8000b8c:	eb14 0800 	adds.w	r8, r4, r0
 8000b90:	eb45 0901 	adc.w	r9, r5, r1
 8000b94:	f04f 0200 	mov.w	r2, #0
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000ba0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000ba4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000ba8:	4690      	mov	r8, r2
 8000baa:	4699      	mov	r9, r3
 8000bac:	4642      	mov	r2, r8
 8000bae:	464b      	mov	r3, r9
 8000bb0:	4610      	mov	r0, r2
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f7ff fc96 	bl	80004e4 <__aeabi_l2d>
 8000bb8:	4604      	mov	r4, r0
 8000bba:	460d      	mov	r5, r1
 8000bbc:	463b      	mov	r3, r7
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f93c 	bl	8000e3c <_ZN4UnitIyEcvyEv>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	4610      	mov	r0, r2
 8000bca:	4619      	mov	r1, r3
 8000bcc:	f7ff fc82 	bl	80004d4 <__aeabi_ul2d>
 8000bd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000bd4:	f7ff fcb4 	bl	8000540 <__aeabi_dmul>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	460b      	mov	r3, r1
 8000bdc:	4620      	mov	r0, r4
 8000bde:	4629      	mov	r1, r5
 8000be0:	f7ff fdd8 	bl	8000794 <__aeabi_ddiv>
 8000be4:	4602      	mov	r2, r0
 8000be6:	460b      	mov	r3, r1
 8000be8:	4610      	mov	r0, r2
 8000bea:	4619      	mov	r1, r3
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <_Z9capa_calcNSt6chrono8durationIxSt5ratioILx1ELx1000EEEE3Resmm+0x138>)
 8000bf2:	f7ff fca5 	bl	8000540 <__aeabi_dmul>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	4610      	mov	r0, r2
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f04f 0200 	mov.w	r2, #0
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <_Z9capa_calcNSt6chrono8durationIxSt5ratioILx1ELx1000EEEE3Resmm+0x138>)
 8000c04:	f7ff fc9c 	bl	8000540 <__aeabi_dmul>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	ec43 2b17 	vmov	d7, r2, r3
 8000c10:	eeb0 0a47 	vmov.f32	s0, s14
 8000c14:	eef0 0a67 	vmov.f32	s1, s15
 8000c18:	f000 fd5e 	bl	80016d8 <_ZN4Capa2ufEe>
 8000c1c:	eeb0 7a40 	vmov.f32	s14, s0
 8000c20:	eef0 7a60 	vmov.f32	s15, s1
}
 8000c24:	eeb0 0a47 	vmov.f32	s0, s14
 8000c28:	eef0 0a67 	vmov.f32	s1, s15
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000c34:	408f4000 	.word	0x408f4000

08000c38 <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80fb      	strh	r3, [r7, #6]
	if (pin == GPIO_PIN_10) {
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c48:	d102      	bne.n	8000c50 <HAL_GPIO_EXTI_Callback+0x18>
		//GPIO_PinState pin_val = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
		//if (pin_val == GPIO_PIN_RESET) {
		adc_ready = true;
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <HAL_GPIO_EXTI_Callback+0x24>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	701a      	strb	r2, [r3, #0]
		//}
	}
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	2000008c 	.word	0x2000008c

08000c60 <_Z14_print_num_recjPmPcj>:

char *_print_num_rec(unsigned int num, uint32_t *mul, char *str, size_t siz) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
 8000c6c:	603b      	str	r3, [r7, #0]
    if (num >= 10) {
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b09      	cmp	r3, #9
 8000c72:	d928      	bls.n	8000cc6 <_Z14_print_num_recjPmPcj+0x66>
        uint32_t div = (uint32_t)(num / 10);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4a20      	ldr	r2, [pc, #128]	; (8000cf8 <_Z14_print_num_recjPmPcj+0x98>)
 8000c78:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7c:	08db      	lsrs	r3, r3, #3
 8000c7e:	61bb      	str	r3, [r7, #24]
        char c = num - (div * 10) + 48;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	4619      	mov	r1, r3
 8000c8a:	0089      	lsls	r1, r1, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	3330      	adds	r3, #48	; 0x30
 8000c98:	75fb      	strb	r3, [r7, #23]
        str[siz - *mul - 1] = c;
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	7dfa      	ldrb	r2, [r7, #23]
 8000caa:	701a      	strb	r2, [r3, #0]
        *mul += 1;
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	1c5a      	adds	r2, r3, #1
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	601a      	str	r2, [r3, #0]
        return _print_num_rec(div, mul, str, siz);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	68b9      	ldr	r1, [r7, #8]
 8000cbc:	69b8      	ldr	r0, [r7, #24]
 8000cbe:	f7ff ffcf 	bl	8000c60 <_Z14_print_num_recjPmPcj>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	e013      	b.n	8000cee <_Z14_print_num_recjPmPcj+0x8e>
    } else {
        char c = num + 48;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	3330      	adds	r3, #48	; 0x30
 8000ccc:	77fb      	strb	r3, [r7, #31]
        str[siz - *mul - 1] = c;
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	4413      	add	r3, r2
 8000cdc:	7ffa      	ldrb	r2, [r7, #31]
 8000cde:	701a      	strb	r2, [r3, #0]
        return str + siz - *mul - 1;
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	683a      	ldr	r2, [r7, #0]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	4413      	add	r3, r2
    }

    return str;
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3720      	adds	r7, #32
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	cccccccd 	.word	0xcccccccd

08000cfc <fb_print_num>:

extern "C" void fb_print_num(unsigned int num) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b088      	sub	sp, #32
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
    char str[16];
    uint32_t mul = 1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
    char *str_num = _print_num_rec(num, &mul, str, sizeof(str));
 8000d08:	f107 020c 	add.w	r2, r7, #12
 8000d0c:	f107 0108 	add.w	r1, r7, #8
 8000d10:	2310      	movs	r3, #16
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffa4 	bl	8000c60 <_Z14_print_num_recjPmPcj>
 8000d18:	61f8      	str	r0, [r7, #28]
    lcd_msg(str_num, mul);
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	69f8      	ldr	r0, [r7, #28]
 8000d20:	f000 f960 	bl	8000fe4 <lcd_msg>
}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	0000      	movs	r0, r0
	...

08000d30 <capameter>:

extern "C" void capameter(void) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af02      	add	r7, sp, #8
	  if (adc_ready) {
 8000d36:	4b3e      	ldr	r3, [pc, #248]	; (8000e30 <capameter+0x100>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d06e      	beq.n	8000e1c <capameter+0xec>
		  uint32_t init_val, val;

		  HAL_ADC_Start(&hadc2);
 8000d3e:	483d      	ldr	r0, [pc, #244]	; (8000e34 <capameter+0x104>)
 8000d40:	f000 ffa4 	bl	8001c8c <HAL_ADC_Start>
		  if (HAL_ADC_PollForConversion(&hadc2, 1000) != HAL_OK) return;
 8000d44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d48:	483a      	ldr	r0, [pc, #232]	; (8000e34 <capameter+0x104>)
 8000d4a:	f001 f855 	bl	8001df8 <HAL_ADC_PollForConversion>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	bf14      	ite	ne
 8000d54:	2301      	movne	r3, #1
 8000d56:	2300      	moveq	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d15b      	bne.n	8000e16 <capameter+0xe6>
		  init_val = HAL_ADC_GetValue(&hadc2);
 8000d5e:	4835      	ldr	r0, [pc, #212]	; (8000e34 <capameter+0x104>)
 8000d60:	f001 f918 	bl	8001f94 <HAL_ADC_GetValue>
 8000d64:	61f8      	str	r0, [r7, #28]

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2110      	movs	r1, #16
 8000d6a:	4833      	ldr	r0, [pc, #204]	; (8000e38 <capameter+0x108>)
 8000d6c:	f001 ffa0 	bl	8002cb0 <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 8000d70:	200a      	movs	r0, #10
 8000d72:	f000 fdd5 	bl	8001920 <HAL_Delay>
		  HAL_ADC_Start(&hadc2);
 8000d76:	482f      	ldr	r0, [pc, #188]	; (8000e34 <capameter+0x104>)
 8000d78:	f000 ff88 	bl	8001c8c <HAL_ADC_Start>
		  if (HAL_ADC_PollForConversion(&hadc2, 1000) != HAL_OK) return;
 8000d7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d80:	482c      	ldr	r0, [pc, #176]	; (8000e34 <capameter+0x104>)
 8000d82:	f001 f839 	bl	8001df8 <HAL_ADC_PollForConversion>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf14      	ite	ne
 8000d8c:	2301      	movne	r3, #1
 8000d8e:	2300      	moveq	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d141      	bne.n	8000e1a <capameter+0xea>

		  val = HAL_ADC_GetValue(&hadc2);
 8000d96:	4827      	ldr	r0, [pc, #156]	; (8000e34 <capameter+0x104>)
 8000d98:	f001 f8fc 	bl	8001f94 <HAL_ADC_GetValue>
 8000d9c:	61b8      	str	r0, [r7, #24]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2110      	movs	r1, #16
 8000da2:	4825      	ldr	r0, [pc, #148]	; (8000e38 <capameter+0x108>)
 8000da4:	f001 ff84 	bl	8002cb0 <HAL_GPIO_WritePin>
		  Capa capa = capa_calc(10ms, 10_kOhm, init_val, val);
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f853 	bl	8000e58 <_ZNSt8literals15chrono_literalsli2msIJLc49ELc48EEEENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEv>
 8000db2:	f107 0110 	add.w	r1, r7, #16
 8000db6:	f04f 020a 	mov.w	r2, #10
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	f000 fcba 	bl	8001738 <_Zli5_kOhmy>
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000dd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dd4:	f7ff fe92 	bl	8000afc <_Z9capa_calcNSt6chrono8durationIxSt5ratioILx1ELx1000EEEE3Resmm>
 8000dd8:	eeb0 7a40 	vmov.f32	s14, s0
 8000ddc:	eef0 7a60 	vmov.f32	s15, s1
 8000de0:	ed87 7b00 	vstr	d7, [r7]
		  //printf("Capacitance: %d", (unsigned int)(capa));
		 //lcd_msg("Hello", 5);
		  lcd_clear();
 8000de4:	f000 f92b 	bl	800103e <lcd_clear>
		  lcd_ret_home();
 8000de8:	f000 f91f 	bl	800102a <lcd_ret_home>
		  fb_print_num(capa.val / 1000000);
 8000dec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000df0:	a30d      	add	r3, pc, #52	; (adr r3, 8000e28 <capameter+0xf8>)
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	f7ff fccd 	bl	8000794 <__aeabi_ddiv>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f7ff fe4d 	bl	8000aa0 <__aeabi_d2uiz>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff77 	bl	8000cfc <fb_print_num>
		  adc_ready = false;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <capameter+0x100>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	e002      	b.n	8000e1c <capameter+0xec>
		  if (HAL_ADC_PollForConversion(&hadc2, 1000) != HAL_OK) return;
 8000e16:	bf00      	nop
 8000e18:	e000      	b.n	8000e1c <capameter+0xec>
		  if (HAL_ADC_PollForConversion(&hadc2, 1000) != HAL_OK) return;
 8000e1a:	bf00      	nop
	  }
}
 8000e1c:	3720      	adds	r7, #32
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	f3af 8000 	nop.w
 8000e28:	00000000 	.word	0x00000000
 8000e2c:	412e8480 	.word	0x412e8480
 8000e30:	2000008c 	.word	0x2000008c
 8000e34:	20000090 	.word	0x20000090
 8000e38:	48000400 	.word	0x48000400

08000e3c <_ZN4UnitIyEcvyEv>:

template <class Data>
struct Unit {
	Data val;

	operator Data() {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
		return val;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	e9d3 2300 	ldrd	r2, r3, [r3]
	}
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <_ZNSt8literals15chrono_literalsli2msIJLc49ELc48EEEENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEv>:
    { return chrono::duration<long double, milli>{__msecs}; }

    /// Literal suffix for durations of type `std::chrono::milliseconds`
    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f805 	bl	8000e72 <_ZNSt8literals15chrono_literals16__check_overflowINSt6chrono8durationIxSt5ratioILx1ELx1000EEEEJLc49ELc48EEEET_v>
 8000e68:	bf00      	nop
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <_ZNSt8literals15chrono_literals16__check_overflowINSt6chrono8durationIxSt5ratioILx1ELx1000EEEEJLc49ELc48EEEET_v>:
      constexpr _Dur __check_overflow()
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
 8000e7a:	f04f 020a 	mov.w	r2, #10
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f804 	bl	8000e9a <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000EEEC1IxvEERKT_>
      }
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000EEEC1IxvEERKT_>:
	  constexpr explicit duration(const _Rep2& __rep)
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	e9c1 2300 	strd	r2, r3, [r1]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <db_nibble_write>:

#include "main.h"
#include "outils.h"
#include "lcd.h"

static void db_nibble_write(uint8_t val) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
	d4_set(val & (1 << 0));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	481f      	ldr	r0, [pc, #124]	; (8000f54 <db_nibble_write+0x94>)
 8000ed8:	f001 feea 	bl	8002cb0 <HAL_GPIO_WritePin>
	d5_set((val & (1 << 1)) >> 1);
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	105b      	asrs	r3, r3, #1
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f001 fedd 	bl	8002cb0 <HAL_GPIO_WritePin>
	d6_set((val & (1 << 2)) >> 2);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	109b      	asrs	r3, r3, #2
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	461a      	mov	r2, r3
 8000f04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f001 fed0 	bl	8002cb0 <HAL_GPIO_WritePin>
	d7_set((val & (1 << 3)) >> 3);
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	10db      	asrs	r3, r3, #3
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2120      	movs	r1, #32
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <db_nibble_write+0x98>)
 8000f22:	f001 fec5 	bl	8002cb0 <HAL_GPIO_WritePin>

	en_set(GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2101      	movs	r1, #1
 8000f2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2e:	f001 febf 	bl	8002cb0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f000 fcf4 	bl	8001920 <HAL_Delay>
	en_set(GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f40:	f001 feb6 	bl	8002cb0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f000 fceb 	bl	8001920 <HAL_Delay>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	48001400 	.word	0x48001400
 8000f58:	48000400 	.word	0x48000400

08000f5c <cmd_write>:
	rs_set(0);
	rw_set(0);
	db_nibble_write(data & 0xF);
}

static void cmd_write(uint8_t data) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	rs_set(0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2108      	movs	r1, #8
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6e:	f001 fe9f 	bl	8002cb0 <HAL_GPIO_WritePin>
	rw_set(0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2102      	movs	r1, #2
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7a:	f001 fe99 	bl	8002cb0 <HAL_GPIO_WritePin>
	db_nibble_write(data & 0x0F);
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ff9a 	bl	8000ec0 <db_nibble_write>
	db_nibble_write((data & 0xF0) >> 4);
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff94 	bl	8000ec0 <db_nibble_write>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <data_write>:

static void cur_shift_right(void) {
	cmd_write(0x00);
}

static void data_write(char data) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
	rs_set(1);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2108      	movs	r1, #8
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb2:	f001 fe7d 	bl	8002cb0 <HAL_GPIO_WritePin>
	rw_set(0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2102      	movs	r1, #2
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f001 fe77 	bl	8002cb0 <HAL_GPIO_WritePin>
	db_nibble_write(data & 0x0F);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 030f 	and.w	r3, r3, #15
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff78 	bl	8000ec0 <db_nibble_write>
	db_nibble_write((data & 0xF0) >> 4);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	091b      	lsrs	r3, r3, #4
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff72 	bl	8000ec0 <db_nibble_write>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <lcd_msg>:

void lcd_msg(const char *msg, size_t len) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
	for (unsigned int i  = 0; msg[i] && i < len; i++) {
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e00c      	b.n	800100e <lcd_msg+0x2a>
		data_write(msg[i]);
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ffcf 	bl	8000fa0 <data_write>
		HAL_Delay(3);
 8001002:	2003      	movs	r0, #3
 8001004:	f000 fc8c 	bl	8001920 <HAL_Delay>
	for (unsigned int i  = 0; msg[i] && i < len; i++) {
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	3301      	adds	r3, #1
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <lcd_msg+0x3e>
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d3e8      	bcc.n	8000ff4 <lcd_msg+0x10>
	}
}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <lcd_ret_home>:

void lcd_ret_home(void) {
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
	cmd_write(0x20);
 800102e:	2020      	movs	r0, #32
 8001030:	f7ff ff94 	bl	8000f5c <cmd_write>
	HAL_Delay(5);
 8001034:	2005      	movs	r0, #5
 8001036:	f000 fc73 	bl	8001920 <HAL_Delay>
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}

0800103e <lcd_clear>:

void lcd_clear(void) {
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0
	cmd_write(0x10);
 8001042:	2010      	movs	r0, #16
 8001044:	f7ff ff8a 	bl	8000f5c <cmd_write>
	HAL_Delay(5);
 8001048:	2005      	movs	r0, #5
 800104a:	f000 fc69 	bl	8001920 <HAL_Delay>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}

08001052 <lcd_init>:

void lcd_init(void) {
 8001052:	b580      	push	{r7, lr}
 8001054:	af00      	add	r7, sp, #0

	HAL_Delay(100);
 8001056:	2064      	movs	r0, #100	; 0x64
 8001058:	f000 fc62 	bl	8001920 <HAL_Delay>
	cmd_write(0x03);
 800105c:	2003      	movs	r0, #3
 800105e:	f7ff ff7d 	bl	8000f5c <cmd_write>

	HAL_Delay(5);
 8001062:	2005      	movs	r0, #5
 8001064:	f000 fc5c 	bl	8001920 <HAL_Delay>
	cmd_write(0x03);
 8001068:	2003      	movs	r0, #3
 800106a:	f7ff ff77 	bl	8000f5c <cmd_write>

	HAL_Delay(1);
 800106e:	2001      	movs	r0, #1
 8001070:	f000 fc56 	bl	8001920 <HAL_Delay>
	cmd_write(0x03);
 8001074:	2003      	movs	r0, #3
 8001076:	f7ff ff71 	bl	8000f5c <cmd_write>

	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f000 fc50 	bl	8001920 <HAL_Delay>
	cmd_write(0x02);
 8001080:	2002      	movs	r0, #2
 8001082:	f7ff ff6b 	bl	8000f5c <cmd_write>

	HAL_Delay(10);
 8001086:	200a      	movs	r0, #10
 8001088:	f000 fc4a 	bl	8001920 <HAL_Delay>
	cmd_write(0x82);
 800108c:	2082      	movs	r0, #130	; 0x82
 800108e:	f7ff ff65 	bl	8000f5c <cmd_write>
	HAL_Delay(3);
 8001092:	2003      	movs	r0, #3
 8001094:	f000 fc44 	bl	8001920 <HAL_Delay>
	cmd_write(0x80);
 8001098:	2080      	movs	r0, #128	; 0x80
 800109a:	f7ff ff5f 	bl	8000f5c <cmd_write>
	HAL_Delay(3);
 800109e:	2003      	movs	r0, #3
 80010a0:	f000 fc3e 	bl	8001920 <HAL_Delay>
	cmd_write(0x10);
 80010a4:	2010      	movs	r0, #16
 80010a6:	f7ff ff59 	bl	8000f5c <cmd_write>
	HAL_Delay(3);
 80010aa:	2003      	movs	r0, #3
 80010ac:	f000 fc38 	bl	8001920 <HAL_Delay>
	cmd_write(0x60);
 80010b0:	2060      	movs	r0, #96	; 0x60
 80010b2:	f7ff ff53 	bl	8000f5c <cmd_write>
	HAL_Delay(3);
 80010b6:	2003      	movs	r0, #3
 80010b8:	f000 fc32 	bl	8001920 <HAL_Delay>

	//cur_shift_right();
	HAL_Delay(10);
 80010bc:	200a      	movs	r0, #10
 80010be:	f000 fc2f 	bl	8001920 <HAL_Delay>
	//lcd_msg("hhello", 6);

	/*db_nibble_write(0x2);
	HAL_Delay(10000);
	db_nibble_write(0x3);*/
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010cc:	f000 fbc2 	bl	8001854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d0:	f000 f814 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d4:	f000 f93e 	bl	8001354 <MX_GPIO_Init>
  MX_ADC2_Init();
 80010d8:	f000 f86a 	bl	80011b0 <MX_ADC2_Init>
  MX_TIM2_Init();
 80010dc:	f000 f8c6 	bl	800126c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 80010e0:	f7ff ffb7 	bl	8001052 <lcd_init>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80010e4:	2100      	movs	r1, #0
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <main+0x30>)
 80010e8:	f000 ff61 	bl	8001fae <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  capameter();
 80010ec:	f7ff fe20 	bl	8000d30 <capameter>
	  selfmeter();
 80010f0:	f000 f9c3 	bl	800147a <selfmeter>
	  capameter();
 80010f4:	e7fa      	b.n	80010ec <main+0x24>
 80010f6:	bf00      	nop
 80010f8:	20000090 	.word	0x20000090

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b096      	sub	sp, #88	; 0x58
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001106:	2228      	movs	r2, #40	; 0x28
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f004 f99a 	bl	8005444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001130:	2302      	movs	r3, #2
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001134:	2301      	movs	r3, #1
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001138:	2310      	movs	r3, #16
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113c:	2302      	movs	r3, #2
 800113e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001140:	2300      	movs	r3, #0
 8001142:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001144:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001148:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114e:	4618      	mov	r0, r3
 8001150:	f001 fdde 	bl	8002d10 <HAL_RCC_OscConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800115a:	f000 f989 	bl	8001470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	230f      	movs	r3, #15
 8001160:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001162:	2302      	movs	r3, #2
 8001164:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800116a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	2102      	movs	r1, #2
 800117a:	4618      	mov	r0, r3
 800117c:	f002 fe06 	bl	8003d8c <HAL_RCC_ClockConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001186:	f000 f973 	bl	8001470 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800118e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001192:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4618      	mov	r0, r3
 8001198:	f002 ffde 	bl	8004158 <HAL_RCCEx_PeriphCLKConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011a2:	f000 f965 	bl	8001470 <Error_Handler>
  }
}
 80011a6:	bf00      	nop
 80011a8:	3758      	adds	r7, #88	; 0x58
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011c6:	4b27      	ldr	r3, [pc, #156]	; (8001264 <MX_ADC2_Init+0xb4>)
 80011c8:	4a27      	ldr	r2, [pc, #156]	; (8001268 <MX_ADC2_Init+0xb8>)
 80011ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011cc:	4b25      	ldr	r3, [pc, #148]	; (8001264 <MX_ADC2_Init+0xb4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011d2:	4b24      	ldr	r3, [pc, #144]	; (8001264 <MX_ADC2_Init+0xb4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011d8:	4b22      	ldr	r3, [pc, #136]	; (8001264 <MX_ADC2_Init+0xb4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_ADC2_Init+0xb4>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_ADC2_Init+0xb4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_ADC2_Init+0xb4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_ADC2_Init+0xb4>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_ADC2_Init+0xb4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_ADC2_Init+0xb4>)
 8001200:	2201      	movs	r2, #1
 8001202:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001204:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_ADC2_Init+0xb4>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_ADC2_Init+0xb4>)
 800120e:	2204      	movs	r2, #4
 8001210:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_ADC2_Init+0xb4>)
 8001214:	2200      	movs	r2, #0
 8001216:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_ADC2_Init+0xb4>)
 800121a:	2200      	movs	r2, #0
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800121e:	4811      	ldr	r0, [pc, #68]	; (8001264 <MX_ADC2_Init+0xb4>)
 8001220:	f000 fba2 	bl	8001968 <HAL_ADC_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800122a:	f000 f921 	bl	8001470 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800122e:	2301      	movs	r3, #1
 8001230:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001232:	2301      	movs	r3, #1
 8001234:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001246:	463b      	mov	r3, r7
 8001248:	4619      	mov	r1, r3
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <MX_ADC2_Init+0xb4>)
 800124c:	f000 ff22 	bl	8002094 <HAL_ADC_ConfigChannel>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001256:	f000 f90b 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000090 	.word	0x20000090
 8001268:	50000100 	.word	0x50000100

0800126c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	; 0x38
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128c:	463b      	mov	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800129e:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <MX_TIM2_Init+0xe4>)
 80012a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80012a6:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <MX_TIM2_Init+0xe4>)
 80012a8:	223f      	movs	r2, #63	; 0x3f
 80012aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <MX_TIM2_Init+0xe4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <MX_TIM2_Init+0xe4>)
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ba:	4b25      	ldr	r3, [pc, #148]	; (8001350 <MX_TIM2_Init+0xe4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c0:	4b23      	ldr	r3, [pc, #140]	; (8001350 <MX_TIM2_Init+0xe4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c6:	4822      	ldr	r0, [pc, #136]	; (8001350 <MX_TIM2_Init+0xe4>)
 80012c8:	f003 f86c 	bl	80043a4 <HAL_TIM_Base_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012d2:	f000 f8cd 	bl	8001470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e0:	4619      	mov	r1, r3
 80012e2:	481b      	ldr	r0, [pc, #108]	; (8001350 <MX_TIM2_Init+0xe4>)
 80012e4:	f003 f990 	bl	8004608 <HAL_TIM_ConfigClockSource>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80012ee:	f000 f8bf 	bl	8001470 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80012f2:	4817      	ldr	r0, [pc, #92]	; (8001350 <MX_TIM2_Init+0xe4>)
 80012f4:	f003 f8ad 	bl	8004452 <HAL_TIM_OC_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80012fe:	f000 f8b7 	bl	8001470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	480f      	ldr	r0, [pc, #60]	; (8001350 <MX_TIM2_Init+0xe4>)
 8001312:	f003 fdfb 	bl	8004f0c <HAL_TIMEx_MasterConfigSynchronization>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800131c:	f000 f8a8 	bl	8001470 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001320:	2300      	movs	r3, #0
 8001322:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	4619      	mov	r1, r3
 8001336:	4806      	ldr	r0, [pc, #24]	; (8001350 <MX_TIM2_Init+0xe4>)
 8001338:	f003 f8ec 	bl	8004514 <HAL_TIM_OC_ConfigChannel>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001342:	f000 f895 	bl	8001470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	3738      	adds	r7, #56	; 0x38
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200000e0 	.word	0x200000e0

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800136a:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <MX_GPIO_Init+0x110>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a3d      	ldr	r2, [pc, #244]	; (8001464 <MX_GPIO_Init+0x110>)
 8001370:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001374:	6153      	str	r3, [r2, #20]
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <MX_GPIO_Init+0x110>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	4b38      	ldr	r3, [pc, #224]	; (8001464 <MX_GPIO_Init+0x110>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	4a37      	ldr	r2, [pc, #220]	; (8001464 <MX_GPIO_Init+0x110>)
 8001388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138c:	6153      	str	r3, [r2, #20]
 800138e:	4b35      	ldr	r3, [pc, #212]	; (8001464 <MX_GPIO_Init+0x110>)
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	4b32      	ldr	r3, [pc, #200]	; (8001464 <MX_GPIO_Init+0x110>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	4a31      	ldr	r2, [pc, #196]	; (8001464 <MX_GPIO_Init+0x110>)
 80013a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a4:	6153      	str	r3, [r2, #20]
 80013a6:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <MX_GPIO_Init+0x110>)
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2102      	movs	r1, #2
 80013b6:	482c      	ldr	r0, [pc, #176]	; (8001468 <MX_GPIO_Init+0x114>)
 80013b8:	f001 fc7a 	bl	8002cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_8
 80013bc:	2200      	movs	r2, #0
 80013be:	f640 110b 	movw	r1, #2315	; 0x90b
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	f001 fc73 	bl	8002cb0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2130      	movs	r1, #48	; 0x30
 80013ce:	4827      	ldr	r0, [pc, #156]	; (800146c <MX_GPIO_Init+0x118>)
 80013d0:	f001 fc6e 	bl	8002cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013d4:	2302      	movs	r3, #2
 80013d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d8:	2301      	movs	r3, #1
 80013da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	481f      	ldr	r0, [pc, #124]	; (8001468 <MX_GPIO_Init+0x114>)
 80013ec:	f001 faee 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA3 PA8
                           PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_8
 80013f0:	f640 130b 	movw	r3, #2315	; 0x90b
 80013f4:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4619      	mov	r1, r3
 8001408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140c:	f001 fade 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001416:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800141a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4619      	mov	r1, r3
 8001426:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800142a:	f001 facf 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800142e:	2330      	movs	r3, #48	; 0x30
 8001430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	4619      	mov	r1, r3
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <MX_GPIO_Init+0x118>)
 8001446:	f001 fac1 	bl	80029cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2028      	movs	r0, #40	; 0x28
 8001450:	f001 fa85 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001454:	2028      	movs	r0, #40	; 0x28
 8001456:	f001 fa9e 	bl	8002996 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800145a:	bf00      	nop
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	48001400 	.word	0x48001400
 800146c:	48000400 	.word	0x48000400

08001470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001474:	b672      	cpsid	i
}
 8001476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001478:	e7fe      	b.n	8001478 <Error_Handler+0x8>

0800147a <selfmeter>:
 *      Author: slamko
 */



extern "C" void selfmeter(void) {
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_MspInit+0x44>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <HAL_MspInit+0x44>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6193      	str	r3, [r2, #24]
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_MspInit+0x44>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_MspInit+0x44>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a08      	ldr	r2, [pc, #32]	; (80014cc <HAL_MspInit+0x44>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_MspInit+0x44>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a15      	ldr	r2, [pc, #84]	; (8001544 <HAL_ADC_MspInit+0x74>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d124      	bne.n	800153c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_ADC_MspInit+0x78>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	4a14      	ldr	r2, [pc, #80]	; (8001548 <HAL_ADC_MspInit+0x78>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6153      	str	r3, [r2, #20]
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_ADC_MspInit+0x78>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_ADC_MspInit+0x78>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_ADC_MspInit+0x78>)
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	6153      	str	r3, [r2, #20]
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_ADC_MspInit+0x78>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001522:	2310      	movs	r3, #16
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001526:	2303      	movs	r3, #3
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001538:	f001 fa48 	bl	80029cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	50000100 	.word	0x50000100
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800155c:	d10b      	bne.n	8001576 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800155e:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_TIM_Base_MspInit+0x38>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <HAL_TIM_Base_MspInit+0x38>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_TIM_Base_MspInit+0x38>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800158c:	e7fe      	b.n	800158c <NMI_Handler+0x4>

0800158e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <MemManage_Handler+0x4>

0800159a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d4:	f000 f984 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80015e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015e4:	f001 fb7c 	bl	8002ce0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <SystemInit+0x20>)
 80015f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <SystemInit+0x20>)
 80015f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <_ZN3ResCI14UnitIyEEy>:
protected:
	explicit Unit(Data val);
};

struct Res : public Unit<unsigned long long> {
	using Unit::Unit;
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	e9c7 2300 	strd	r2, r3, [r7]
 800161c:	68f9      	ldr	r1, [r7, #12]
 800161e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001622:	4608      	mov	r0, r1
 8001624:	f000 f8c7 	bl	80017b6 <_ZN4UnitIyEC1Ey>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <_ZN3Res4kohmEy>:
#include "units.h"

template <class Data>
Unit<Data>::Unit(Data val) : val(val) {}

Res Res::kohm(unsigned long long val) {
 8001632:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	e9c7 2300 	strd	r2, r3, [r7]
	return Res(val * 1000);
 8001640:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	f04f 0a00 	mov.w	sl, #0
 800164c:	f04f 0b00 	mov.w	fp, #0
 8001650:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001654:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001658:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800165c:	4652      	mov	r2, sl
 800165e:	465b      	mov	r3, fp
 8001660:	1a14      	subs	r4, r2, r0
 8001662:	eb63 0501 	sbc.w	r5, r3, r1
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	00ab      	lsls	r3, r5, #2
 8001670:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001674:	00a2      	lsls	r2, r4, #2
 8001676:	4614      	mov	r4, r2
 8001678:	461d      	mov	r5, r3
 800167a:	eb14 0800 	adds.w	r8, r4, r0
 800167e:	eb45 0901 	adc.w	r9, r5, r1
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800168e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001696:	4690      	mov	r8, r2
 8001698:	4699      	mov	r9, r3
 800169a:	4642      	mov	r2, r8
 800169c:	464b      	mov	r3, r9
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f7ff ffb6 	bl	8001610 <_ZN3ResCI14UnitIyEEy>
}
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	3710      	adds	r7, #16
 80016a8:	46bd      	mov	sp, r7
 80016aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080016ae <_ZN4CapaCI14UnitIeEEe>:

	static Res kohm(unsigned long long);
};

struct Capa : public Unit<long double>{
	using Unit::Unit;
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	ed87 0b00 	vstr	d0, [r7]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	ed97 7b00 	vldr	d7, [r7]
 80016c0:	eeb0 0a47 	vmov.f32	s0, s14
 80016c4:	eef0 0a67 	vmov.f32	s1, s15
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 f886 	bl	80017da <_ZN4UnitIeEC1Ee>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_ZN4Capa2ufEe>:

Capa Capa::uf(long double val) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	ed87 0b00 	vstr	d0, [r7]
	return Capa(val * 1000 * 1000);
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_ZN4Capa2ufEe+0x5c>)
 80016e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016ec:	f7fe ff28 	bl	8000540 <__aeabi_dmul>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4610      	mov	r0, r2
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <_ZN4Capa2ufEe+0x5c>)
 80016fe:	f7fe ff1f 	bl	8000540 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	ec43 2b17 	vmov	d7, r2, r3
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	eeb0 0a47 	vmov.f32	s0, s14
 8001712:	eef0 0a67 	vmov.f32	s1, s15
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ffc9 	bl	80016ae <_ZN4CapaCI14UnitIeEEe>
 800171c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001720:	ec43 2b17 	vmov	d7, r2, r3
}
 8001724:	eeb0 0a47 	vmov.f32	s0, s14
 8001728:	eef0 0a67 	vmov.f32	s1, s15
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	408f4000 	.word	0x408f4000

08001738 <_Zli5_kOhmy>:

Capa Capa::pf(long double val) {
	return Capa(val);
}

Res operator ""_kOhm(unsigned long long val) {
 8001738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	e9c7 2300 	strd	r2, r3, [r7]
	return Res::kohm(val * 1000);
 8001746:	e9d7 0100 	ldrd	r0, r1, [r7]
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	f04f 0a00 	mov.w	sl, #0
 8001752:	f04f 0b00 	mov.w	fp, #0
 8001756:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800175a:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800175e:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001762:	4652      	mov	r2, sl
 8001764:	465b      	mov	r3, fp
 8001766:	1a14      	subs	r4, r2, r0
 8001768:	eb63 0501 	sbc.w	r5, r3, r1
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	00ab      	lsls	r3, r5, #2
 8001776:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800177a:	00a2      	lsls	r2, r4, #2
 800177c:	4614      	mov	r4, r2
 800177e:	461d      	mov	r5, r3
 8001780:	eb14 0800 	adds.w	r8, r4, r0
 8001784:	eb45 0901 	adc.w	r9, r5, r1
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001794:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001798:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800179c:	4690      	mov	r8, r2
 800179e:	4699      	mov	r9, r3
 80017a0:	4642      	mov	r2, r8
 80017a2:	464b      	mov	r3, r9
 80017a4:	68f9      	ldr	r1, [r7, #12]
 80017a6:	4608      	mov	r0, r1
 80017a8:	f7ff ff43 	bl	8001632 <_ZN3Res4kohmEy>
}
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080017b6 <_ZN4UnitIyEC1Ey>:
Unit<Data>::Unit(Data val) : val(val) {}
 80017b6:	b480      	push	{r7}
 80017b8:	b085      	sub	sp, #20
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	60f8      	str	r0, [r7, #12]
 80017be:	e9c7 2300 	strd	r2, r3, [r7]
 80017c2:	68f9      	ldr	r1, [r7, #12]
 80017c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017c8:	e9c1 2300 	strd	r2, r3, [r1]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_ZN4UnitIeEC1Ee>:
 80017da:	b480      	push	{r7}
 80017dc:	b085      	sub	sp, #20
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	ed87 0b00 	vstr	d0, [r7]
 80017e6:	68f9      	ldr	r1, [r7, #12]
 80017e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017ec:	e9c1 2300 	strd	r2, r3, [r1]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001838 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001804:	f7ff fef2 	bl	80015ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001808:	480c      	ldr	r0, [pc, #48]	; (800183c <LoopForever+0x6>)
  ldr r1, =_edata
 800180a:	490d      	ldr	r1, [pc, #52]	; (8001840 <LoopForever+0xa>)
  ldr r2, =_sidata
 800180c:	4a0d      	ldr	r2, [pc, #52]	; (8001844 <LoopForever+0xe>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001810:	e002      	b.n	8001818 <LoopCopyDataInit>

08001812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001816:	3304      	adds	r3, #4

08001818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800181c:	d3f9      	bcc.n	8001812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001820:	4c0a      	ldr	r4, [pc, #40]	; (800184c <LoopForever+0x16>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001824:	e001      	b.n	800182a <LoopFillZerobss>

08001826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001828:	3204      	adds	r2, #4

0800182a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800182c:	d3fb      	bcc.n	8001826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800182e:	f003 fde5 	bl	80053fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001832:	f7ff fc49 	bl	80010c8 <main>

08001836 <LoopForever>:

LoopForever:
    b LoopForever
 8001836:	e7fe      	b.n	8001836 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001838:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800183c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001840:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001844:	080054a8 	.word	0x080054a8
  ldr r2, =_sbss
 8001848:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800184c:	20000130 	.word	0x20000130

08001850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001850:	e7fe      	b.n	8001850 <ADC1_2_IRQHandler>
	...

08001854 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_Init+0x28>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	; (800187c <HAL_Init+0x28>)
 800185e:	f043 0310 	orr.w	r3, r3, #16
 8001862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f001 f86f 	bl	8002948 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	200f      	movs	r0, #15
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff fe0a 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40022000 	.word	0x40022000

08001880 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f001 f887 	bl	80029b2 <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018bc:	f001 f84f 	bl	800295e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	; (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000008 	.word	0x20000008
 8001904:	2000012c 	.word	0x2000012c

08001908 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;  
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000012c 	.word	0x2000012c

08001920 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008

08001968 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b09a      	sub	sp, #104	; 0x68
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e172      	b.n	8001c6e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	2b00      	cmp	r3, #0
 8001998:	d176      	bne.n	8001a88 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d152      	bne.n	8001a48 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff fd87 	bl	80014d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d13b      	bne.n	8001a48 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 fe83 	bl	80026dc <ADC_Disable>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d12f      	bne.n	8001a48 <HAL_ADC_Init+0xe0>
 80019e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d12b      	bne.n	8001a48 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019f8:	f023 0302 	bic.w	r3, r3, #2
 80019fc:	f043 0202 	orr.w	r2, r3, #2
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a12:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a22:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a24:	4b94      	ldr	r3, [pc, #592]	; (8001c78 <HAL_ADC_Init+0x310>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a94      	ldr	r2, [pc, #592]	; (8001c7c <HAL_ADC_Init+0x314>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0c9a      	lsrs	r2, r3, #18
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a3a:	e002      	b.n	8001a42 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f9      	bne.n	8001a3c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a64:	d110      	bne.n	8001a88 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f023 0312 	bic.w	r3, r3, #18
 8001a6e:	f043 0210 	orr.w	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f043 0201 	orr.w	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f040 80df 	bne.w	8001c54 <HAL_ADC_Init+0x2ec>
 8001a96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 80da 	bne.w	8001c54 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f040 80d2 	bne.w	8001c54 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ab8:	f043 0202 	orr.w	r2, r3, #2
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ac0:	4b6f      	ldr	r3, [pc, #444]	; (8001c80 <HAL_ADC_Init+0x318>)
 8001ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001acc:	d102      	bne.n	8001ad4 <HAL_ADC_Init+0x16c>
 8001ace:	4b6d      	ldr	r3, [pc, #436]	; (8001c84 <HAL_ADC_Init+0x31c>)
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	e002      	b.n	8001ada <HAL_ADC_Init+0x172>
 8001ad4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ad8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d108      	bne.n	8001afa <HAL_ADC_Init+0x192>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_Init+0x192>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <HAL_ADC_Init+0x194>
 8001afa:	2300      	movs	r3, #0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d11c      	bne.n	8001b3a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b00:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d010      	beq.n	8001b28 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d107      	bne.n	8001b22 <HAL_ADC_Init+0x1ba>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADC_Init+0x1ba>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_ADC_Init+0x1bc>
 8001b22:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d108      	bne.n	8001b3a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	431a      	orrs	r2, r3
 8001b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b38:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7e5b      	ldrb	r3, [r3, #25]
 8001b3e:	035b      	lsls	r3, r3, #13
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b44:	2a01      	cmp	r2, #1
 8001b46:	d002      	beq.n	8001b4e <HAL_ADC_Init+0x1e6>
 8001b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b4c:	e000      	b.n	8001b50 <HAL_ADC_Init+0x1e8>
 8001b4e:	2200      	movs	r2, #0
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b60:	4313      	orrs	r3, r2
 8001b62:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d11b      	bne.n	8001ba6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7e5b      	ldrb	r3, [r3, #25]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	045a      	lsls	r2, r3, #17
 8001b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b80:	4313      	orrs	r3, r2
 8001b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b86:	663b      	str	r3, [r7, #96]	; 0x60
 8001b88:	e00d      	b.n	8001ba6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001b92:	f043 0220 	orr.w	r2, r3, #32
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9e:	f043 0201 	orr.w	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d007      	beq.n	8001bbe <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d114      	bne.n	8001bf6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	6812      	ldr	r2, [r2, #0]
 8001bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bda:	f023 0302 	bic.w	r3, r3, #2
 8001bde:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7e1b      	ldrb	r3, [r3, #24]
 8001be4:	039a      	lsls	r2, r3, #14
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <HAL_ADC_Init+0x320>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001c06:	430b      	orrs	r3, r1
 8001c08:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d10c      	bne.n	8001c2c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	f023 010f 	bic.w	r1, r3, #15
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	1e5a      	subs	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	631a      	str	r2, [r3, #48]	; 0x30
 8001c2a:	e007      	b.n	8001c3c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 020f 	bic.w	r2, r2, #15
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f023 0303 	bic.w	r3, r3, #3
 8001c4a:	f043 0201 	orr.w	r2, r3, #1
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
 8001c52:	e00a      	b.n	8001c6a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f023 0312 	bic.w	r3, r3, #18
 8001c5c:	f043 0210 	orr.w	r2, r3, #16
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001c64:	2301      	movs	r3, #1
 8001c66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001c6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3768      	adds	r7, #104	; 0x68
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	431bde83 	.word	0x431bde83
 8001c80:	50000300 	.word	0x50000300
 8001c84:	50000100 	.word	0x50000100
 8001c88:	fff0c007 	.word	0xfff0c007

08001c8c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f040 809c 	bne.w	8001de0 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADC_Start+0x2a>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e097      	b.n	8001de6 <HAL_ADC_Start+0x15a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fca8 	bl	8002614 <ADC_Enable>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 8083 	bne.w	8001dd6 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ce4:	4b42      	ldr	r3, [pc, #264]	; (8001df0 <HAL_ADC_Start+0x164>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d004      	beq.n	8001cfa <HAL_ADC_Start+0x6e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cf8:	d115      	bne.n	8001d26 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d027      	beq.n	8001d64 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d24:	e01e      	b.n	8001d64 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d3a:	d004      	beq.n	8001d46 <HAL_ADC_Start+0xba>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a2c      	ldr	r2, [pc, #176]	; (8001df4 <HAL_ADC_Start+0x168>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d10e      	bne.n	8001d64 <HAL_ADC_Start+0xd8>
 8001d46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d007      	beq.n	8001d64 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d70:	d106      	bne.n	8001d80 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f023 0206 	bic.w	r2, r3, #6
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	645a      	str	r2, [r3, #68]	; 0x44
 8001d7e:	e002      	b.n	8001d86 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	221c      	movs	r2, #28
 8001d94:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_ADC_Start+0x164>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d010      	beq.n	8001dc4 <HAL_ADC_Start+0x138>
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <HAL_ADC_Start+0x164>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d00a      	beq.n	8001dc4 <HAL_ADC_Start+0x138>
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <HAL_ADC_Start+0x164>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 031f 	and.w	r3, r3, #31
 8001db6:	2b09      	cmp	r3, #9
 8001db8:	d004      	beq.n	8001dc4 <HAL_ADC_Start+0x138>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dc2:	d10f      	bne.n	8001de4 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0204 	orr.w	r2, r2, #4
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	e006      	b.n	8001de4 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001dde:	e001      	b.n	8001de4 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001de0:	2302      	movs	r3, #2
 8001de2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	50000300 	.word	0x50000300
 8001df4:	50000100 	.word	0x50000100

08001df8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d102      	bne.n	8001e14 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001e0e:	2308      	movs	r3, #8
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	e02e      	b.n	8001e72 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e14:	4b5e      	ldr	r3, [pc, #376]	; (8001f90 <HAL_ADC_PollForConversion+0x198>)
 8001e16:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d112      	bne.n	8001e4a <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d11d      	bne.n	8001e6e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f043 0220 	orr.w	r2, r3, #32
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e09d      	b.n	8001f86 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f043 0220 	orr.w	r2, r3, #32
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e08b      	b.n	8001f86 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001e6e:	230c      	movs	r3, #12
 8001e70:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e72:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <HAL_ADC_PollForConversion+0x198>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d004      	beq.n	8001e88 <HAL_ADC_PollForConversion+0x90>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e86:	d104      	bne.n	8001e92 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	e003      	b.n	8001e9a <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001e92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001e9a:	f7ff fd35 	bl	8001908 <HAL_GetTick>
 8001e9e:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ea0:	e021      	b.n	8001ee6 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ea8:	d01d      	beq.n	8001ee6 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_ADC_PollForConversion+0xc8>
 8001eb0:	f7ff fd2a 	bl	8001908 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d212      	bcs.n	8001ee6 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10b      	bne.n	8001ee6 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f043 0204 	orr.w	r2, r3, #4
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e04f      	b.n	8001f86 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0d6      	beq.n	8001ea2 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d131      	bne.n	8001f72 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d12c      	bne.n	8001f72 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d125      	bne.n	8001f72 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d112      	bne.n	8001f5a <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d112      	bne.n	8001f72 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f043 0201 	orr.w	r2, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
 8001f58:	e00b      	b.n	8001f72 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f043 0220 	orr.w	r2, r3, #32
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f043 0201 	orr.w	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d103      	bne.n	8001f84 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	50000300 	.word	0x50000300

08001f94 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_ADCEx_Calibration_Start+0x1c>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e05f      	b.n	800208a <HAL_ADCEx_Calibration_Start+0xdc>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fb82 	bl	80026dc <ADC_Disable>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d14e      	bne.n	8002080 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001ff6:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d107      	bne.n	800200e <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800200c:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800201c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800201e:	f7ff fc73 	bl	8001908 <HAL_GetTick>
 8002022:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002024:	e01c      	b.n	8002060 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002026:	f7ff fc6f 	bl	8001908 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b0a      	cmp	r3, #10
 8002032:	d915      	bls.n	8002060 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800203e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002042:	d10d      	bne.n	8002060 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002048:	f023 0312 	bic.w	r3, r3, #18
 800204c:	f043 0210 	orr.w	r2, r3, #16
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e014      	b.n	800208a <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800206a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800206e:	d0da      	beq.n	8002026 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	f023 0303 	bic.w	r3, r3, #3
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002088:	7bfb      	ldrb	r3, [r7, #15]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002094:	b480      	push	{r7}
 8002096:	b09b      	sub	sp, #108	; 0x6c
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x22>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e2a4      	b.n	8002600 <HAL_ADC_ConfigChannel+0x56c>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f040 8288 	bne.w	80025de <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d81c      	bhi.n	8002110 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	461a      	mov	r2, r3
 80020ea:	231f      	movs	r3, #31
 80020ec:	4093      	lsls	r3, r2
 80020ee:	43db      	mvns	r3, r3
 80020f0:	4019      	ands	r1, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa00 f203 	lsl.w	r2, r0, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
 800210e:	e063      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b09      	cmp	r3, #9
 8002116:	d81e      	bhi.n	8002156 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	3b1e      	subs	r3, #30
 800212c:	221f      	movs	r2, #31
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	4019      	ands	r1, r3
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	3b1e      	subs	r3, #30
 8002148:	fa00 f203 	lsl.w	r2, r0, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	635a      	str	r2, [r3, #52]	; 0x34
 8002154:	e040      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b0e      	cmp	r3, #14
 800215c:	d81e      	bhi.n	800219c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	3b3c      	subs	r3, #60	; 0x3c
 8002172:	221f      	movs	r2, #31
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	4019      	ands	r1, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	3b3c      	subs	r3, #60	; 0x3c
 800218e:	fa00 f203 	lsl.w	r2, r0, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
 800219a:	e01d      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	3b5a      	subs	r3, #90	; 0x5a
 80021b0:	221f      	movs	r2, #31
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	4019      	ands	r1, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6818      	ldr	r0, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	3b5a      	subs	r3, #90	; 0x5a
 80021cc:	fa00 f203 	lsl.w	r2, r0, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 80e5 	bne.w	80023b2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b09      	cmp	r3, #9
 80021ee:	d91c      	bls.n	800222a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6999      	ldr	r1, [r3, #24]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	4613      	mov	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4413      	add	r3, r2
 8002200:	3b1e      	subs	r3, #30
 8002202:	2207      	movs	r2, #7
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	4019      	ands	r1, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6898      	ldr	r0, [r3, #8]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	3b1e      	subs	r3, #30
 800221c:	fa00 f203 	lsl.w	r2, r0, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	619a      	str	r2, [r3, #24]
 8002228:	e019      	b.n	800225e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6959      	ldr	r1, [r3, #20]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4613      	mov	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4413      	add	r3, r2
 800223a:	2207      	movs	r2, #7
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	4019      	ands	r1, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6898      	ldr	r0, [r3, #8]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	fa00 f203 	lsl.w	r2, r0, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	08db      	lsrs	r3, r3, #3
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	3b01      	subs	r3, #1
 800227c:	2b03      	cmp	r3, #3
 800227e:	d84f      	bhi.n	8002320 <HAL_ADC_ConfigChannel+0x28c>
 8002280:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <HAL_ADC_ConfigChannel+0x1f4>)
 8002282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002286:	bf00      	nop
 8002288:	08002299 	.word	0x08002299
 800228c:	080022bb 	.word	0x080022bb
 8002290:	080022dd 	.word	0x080022dd
 8002294:	080022ff 	.word	0x080022ff
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800229e:	4b94      	ldr	r3, [pc, #592]	; (80024f0 <HAL_ADC_ConfigChannel+0x45c>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	0691      	lsls	r1, r2, #26
 80022a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022aa:	430a      	orrs	r2, r1
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022b6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022b8:	e07e      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022c0:	4b8b      	ldr	r3, [pc, #556]	; (80024f0 <HAL_ADC_ConfigChannel+0x45c>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	0691      	lsls	r1, r2, #26
 80022ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022cc:	430a      	orrs	r2, r1
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022d8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022da:	e06d      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80022e2:	4b83      	ldr	r3, [pc, #524]	; (80024f0 <HAL_ADC_ConfigChannel+0x45c>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	0691      	lsls	r1, r2, #26
 80022ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022ee:	430a      	orrs	r2, r1
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022fa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022fc:	e05c      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002304:	4b7a      	ldr	r3, [pc, #488]	; (80024f0 <HAL_ADC_ConfigChannel+0x45c>)
 8002306:	4013      	ands	r3, r2
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	0691      	lsls	r1, r2, #26
 800230e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002310:	430a      	orrs	r2, r1
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800231c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800231e:	e04b      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002326:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	069b      	lsls	r3, r3, #26
 8002330:	429a      	cmp	r2, r3
 8002332:	d107      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002342:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800234a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	069b      	lsls	r3, r3, #26
 8002354:	429a      	cmp	r2, r3
 8002356:	d107      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002366:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800236e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	069b      	lsls	r3, r3, #26
 8002378:	429a      	cmp	r2, r3
 800237a:	d107      	bne.n	800238c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800238a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002392:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	069b      	lsls	r3, r3, #26
 800239c:	429a      	cmp	r2, r3
 800239e:	d10a      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023ae:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80023b0:	e001      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80023b2:	bf00      	nop
 80023b4:	e000      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80023b6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d108      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x344>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d101      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x344>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <HAL_ADC_ConfigChannel+0x346>
 80023d8:	2300      	movs	r3, #0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 810a 	bne.w	80025f4 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d00f      	beq.n	8002408 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2201      	movs	r2, #1
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	400a      	ands	r2, r1
 8002402:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002406:	e049      	b.n	800249c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2201      	movs	r2, #1
 8002416:	409a      	lsls	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b09      	cmp	r3, #9
 8002428:	d91c      	bls.n	8002464 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6999      	ldr	r1, [r3, #24]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	3b1b      	subs	r3, #27
 800243c:	2207      	movs	r2, #7
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	4019      	ands	r1, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	6898      	ldr	r0, [r3, #8]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	3b1b      	subs	r3, #27
 8002456:	fa00 f203 	lsl.w	r2, r0, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	619a      	str	r2, [r3, #24]
 8002462:	e01b      	b.n	800249c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6959      	ldr	r1, [r3, #20]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	2207      	movs	r2, #7
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	4019      	ands	r1, r3
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6898      	ldr	r0, [r3, #8]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	fa00 f203 	lsl.w	r2, r0, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800249c:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_ADC_ConfigChannel+0x460>)
 800249e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b10      	cmp	r3, #16
 80024a6:	d105      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d015      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80024b8:	2b11      	cmp	r3, #17
 80024ba:	d105      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00b      	beq.n	80024e0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80024cc:	2b12      	cmp	r3, #18
 80024ce:	f040 8091 	bne.w	80025f4 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80024d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 808a 	bne.w	80025f4 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024e8:	d108      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x468>
 80024ea:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <HAL_ADC_ConfigChannel+0x464>)
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	e008      	b.n	8002502 <HAL_ADC_ConfigChannel+0x46e>
 80024f0:	83fff000 	.word	0x83fff000
 80024f4:	50000300 	.word	0x50000300
 80024f8:	50000100 	.word	0x50000100
 80024fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002500:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d108      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x48e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x48e>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_ADC_ConfigChannel+0x490>
 8002522:	2300      	movs	r3, #0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d150      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002528:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800252a:	2b00      	cmp	r3, #0
 800252c:	d010      	beq.n	8002550 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <HAL_ADC_ConfigChannel+0x4b6>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_ADC_ConfigChannel+0x4b6>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_ADC_ConfigChannel+0x4b8>
 800254a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800254c:	2b00      	cmp	r3, #0
 800254e:	d13c      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b10      	cmp	r3, #16
 8002556:	d11d      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x500>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002560:	d118      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800256a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800256c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800256e:	4b27      	ldr	r3, [pc, #156]	; (800260c <HAL_ADC_ConfigChannel+0x578>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a27      	ldr	r2, [pc, #156]	; (8002610 <HAL_ADC_ConfigChannel+0x57c>)
 8002574:	fba2 2303 	umull	r2, r3, r2, r3
 8002578:	0c9a      	lsrs	r2, r3, #18
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002584:	e002      	b.n	800258c <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3b01      	subs	r3, #1
 800258a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f9      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002592:	e02e      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b11      	cmp	r3, #17
 800259a:	d10b      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x520>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a4:	d106      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80025a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80025ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025b0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025b2:	e01e      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b12      	cmp	r3, #18
 80025ba:	d11a      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80025bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025c8:	e013      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f043 0220 	orr.w	r2, r3, #32
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80025dc:	e00a      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f043 0220 	orr.w	r2, r3, #32
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80025f0:	e000      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025f2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80025fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002600:	4618      	mov	r0, r3
 8002602:	376c      	adds	r7, #108	; 0x6c
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	20000000 	.word	0x20000000
 8002610:	431bde83 	.word	0x431bde83

08002614 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d108      	bne.n	8002640 <ADC_Enable+0x2c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <ADC_Enable+0x2c>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <ADC_Enable+0x2e>
 8002640:	2300      	movs	r3, #0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d143      	bne.n	80026ce <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <ADC_Enable+0xc4>)
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00d      	beq.n	8002670 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f043 0210 	orr.w	r2, r3, #16
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	f043 0201 	orr.w	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e02f      	b.n	80026d0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002680:	f7ff f942 	bl	8001908 <HAL_GetTick>
 8002684:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002686:	e01b      	b.n	80026c0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002688:	f7ff f93e 	bl	8001908 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d914      	bls.n	80026c0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d00d      	beq.n	80026c0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f043 0210 	orr.w	r2, r3, #16
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b4:	f043 0201 	orr.w	r2, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e007      	b.n	80026d0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d1dc      	bne.n	8002688 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	8000003f 	.word	0x8000003f

080026dc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d108      	bne.n	8002708 <ADC_Disable+0x2c>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <ADC_Disable+0x2c>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <ADC_Disable+0x2e>
 8002708:	2300      	movs	r3, #0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d047      	beq.n	800279e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030d 	and.w	r3, r3, #13
 8002718:	2b01      	cmp	r3, #1
 800271a:	d10f      	bne.n	800273c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0202 	orr.w	r2, r2, #2
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2203      	movs	r2, #3
 8002732:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002734:	f7ff f8e8 	bl	8001908 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800273a:	e029      	b.n	8002790 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f043 0210 	orr.w	r2, r3, #16
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e023      	b.n	80027a0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002758:	f7ff f8d6 	bl	8001908 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d914      	bls.n	8002790 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d10d      	bne.n	8002790 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f043 0210 	orr.w	r2, r3, #16
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	f043 0201 	orr.w	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e007      	b.n	80027a0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b01      	cmp	r3, #1
 800279c:	d0dc      	beq.n	8002758 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <__NVIC_SetPriorityGrouping+0x44>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c4:	4013      	ands	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027da:	4a04      	ldr	r2, [pc, #16]	; (80027ec <__NVIC_SetPriorityGrouping+0x44>)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	60d3      	str	r3, [r2, #12]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <__NVIC_GetPriorityGrouping+0x18>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	f003 0307 	and.w	r3, r3, #7
}
 80027fe:	4618      	mov	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	2b00      	cmp	r3, #0
 800281c:	db0b      	blt.n	8002836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	f003 021f 	and.w	r2, r3, #31
 8002824:	4907      	ldr	r1, [pc, #28]	; (8002844 <__NVIC_EnableIRQ+0x38>)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	2001      	movs	r0, #1
 800282e:	fa00 f202 	lsl.w	r2, r0, r2
 8002832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000e100 	.word	0xe000e100

08002848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	2b00      	cmp	r3, #0
 800285a:	db0a      	blt.n	8002872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	490c      	ldr	r1, [pc, #48]	; (8002894 <__NVIC_SetPriority+0x4c>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	0112      	lsls	r2, r2, #4
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	440b      	add	r3, r1
 800286c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002870:	e00a      	b.n	8002888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4908      	ldr	r1, [pc, #32]	; (8002898 <__NVIC_SetPriority+0x50>)
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	3b04      	subs	r3, #4
 8002880:	0112      	lsls	r2, r2, #4
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	440b      	add	r3, r1
 8002886:	761a      	strb	r2, [r3, #24]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f1c3 0307 	rsb	r3, r3, #7
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	bf28      	it	cs
 80028ba:	2304      	movcs	r3, #4
 80028bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d902      	bls.n	80028cc <NVIC_EncodePriority+0x30>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3b03      	subs	r3, #3
 80028ca:	e000      	b.n	80028ce <NVIC_EncodePriority+0x32>
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43da      	mvns	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	401a      	ands	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43d9      	mvns	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	4313      	orrs	r3, r2
         );
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002914:	d301      	bcc.n	800291a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002916:	2301      	movs	r3, #1
 8002918:	e00f      	b.n	800293a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <SysTick_Config+0x40>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002922:	210f      	movs	r1, #15
 8002924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002928:	f7ff ff8e 	bl	8002848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <SysTick_Config+0x40>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002932:	4b04      	ldr	r3, [pc, #16]	; (8002944 <SysTick_Config+0x40>)
 8002934:	2207      	movs	r2, #7
 8002936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	e000e010 	.word	0xe000e010

08002948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ff29 	bl	80027a8 <__NVIC_SetPriorityGrouping>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002970:	f7ff ff3e 	bl	80027f0 <__NVIC_GetPriorityGrouping>
 8002974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7ff ff8e 	bl	800289c <NVIC_EncodePriority>
 8002980:	4602      	mov	r2, r0
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff5d 	bl	8002848 <__NVIC_SetPriority>
}
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff31 	bl	800280c <__NVIC_EnableIRQ>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ffa2 	bl	8002904 <SysTick_Config>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029da:	e14e      	b.n	8002c7a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	2101      	movs	r1, #1
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	4013      	ands	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8140 	beq.w	8002c74 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d005      	beq.n	8002a0c <HAL_GPIO_Init+0x40>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d130      	bne.n	8002a6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a42:	2201      	movs	r2, #1
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	f003 0201 	and.w	r2, r3, #1
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d017      	beq.n	8002aaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	2203      	movs	r2, #3
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d123      	bne.n	8002afe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	08da      	lsrs	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3208      	adds	r2, #8
 8002abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	220f      	movs	r2, #15
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3208      	adds	r2, #8
 8002af8:	6939      	ldr	r1, [r7, #16]
 8002afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	2203      	movs	r2, #3
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4013      	ands	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0203 	and.w	r2, r3, #3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f000 809a 	beq.w	8002c74 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b40:	4b55      	ldr	r3, [pc, #340]	; (8002c98 <HAL_GPIO_Init+0x2cc>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	4a54      	ldr	r2, [pc, #336]	; (8002c98 <HAL_GPIO_Init+0x2cc>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6193      	str	r3, [r2, #24]
 8002b4c:	4b52      	ldr	r3, [pc, #328]	; (8002c98 <HAL_GPIO_Init+0x2cc>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	60bb      	str	r3, [r7, #8]
 8002b56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b58:	4a50      	ldr	r2, [pc, #320]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	089b      	lsrs	r3, r3, #2
 8002b5e:	3302      	adds	r3, #2
 8002b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	220f      	movs	r2, #15
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b82:	d013      	beq.n	8002bac <HAL_GPIO_Init+0x1e0>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a46      	ldr	r2, [pc, #280]	; (8002ca0 <HAL_GPIO_Init+0x2d4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00d      	beq.n	8002ba8 <HAL_GPIO_Init+0x1dc>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a45      	ldr	r2, [pc, #276]	; (8002ca4 <HAL_GPIO_Init+0x2d8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d007      	beq.n	8002ba4 <HAL_GPIO_Init+0x1d8>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a44      	ldr	r2, [pc, #272]	; (8002ca8 <HAL_GPIO_Init+0x2dc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <HAL_GPIO_Init+0x1d4>
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e006      	b.n	8002bae <HAL_GPIO_Init+0x1e2>
 8002ba0:	2305      	movs	r3, #5
 8002ba2:	e004      	b.n	8002bae <HAL_GPIO_Init+0x1e2>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e002      	b.n	8002bae <HAL_GPIO_Init+0x1e2>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_GPIO_Init+0x1e2>
 8002bac:	2300      	movs	r3, #0
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	f002 0203 	and.w	r2, r2, #3
 8002bb4:	0092      	lsls	r2, r2, #2
 8002bb6:	4093      	lsls	r3, r2
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bbe:	4937      	ldr	r1, [pc, #220]	; (8002c9c <HAL_GPIO_Init+0x2d0>)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	089b      	lsrs	r3, r3, #2
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bcc:	4b37      	ldr	r3, [pc, #220]	; (8002cac <HAL_GPIO_Init+0x2e0>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002bf0:	4a2e      	ldr	r2, [pc, #184]	; (8002cac <HAL_GPIO_Init+0x2e0>)
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf6:	4b2d      	ldr	r3, [pc, #180]	; (8002cac <HAL_GPIO_Init+0x2e0>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c1a:	4a24      	ldr	r2, [pc, #144]	; (8002cac <HAL_GPIO_Init+0x2e0>)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c20:	4b22      	ldr	r3, [pc, #136]	; (8002cac <HAL_GPIO_Init+0x2e0>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c44:	4a19      	ldr	r2, [pc, #100]	; (8002cac <HAL_GPIO_Init+0x2e0>)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c4a:	4b18      	ldr	r3, [pc, #96]	; (8002cac <HAL_GPIO_Init+0x2e0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c6e:	4a0f      	ldr	r2, [pc, #60]	; (8002cac <HAL_GPIO_Init+0x2e0>)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3301      	adds	r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f47f aea9 	bne.w	80029dc <HAL_GPIO_Init+0x10>
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40010000 	.word	0x40010000
 8002ca0:	48000400 	.word	0x48000400
 8002ca4:	48000800 	.word	0x48000800
 8002ca8:	48000c00 	.word	0x48000c00
 8002cac:	40010400 	.word	0x40010400

08002cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	807b      	strh	r3, [r7, #2]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc0:	787b      	ldrb	r3, [r7, #1]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cc6:	887a      	ldrh	r2, [r7, #2]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ccc:	e002      	b.n	8002cd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cce:	887a      	ldrh	r2, [r7, #2]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d006      	beq.n	8002d04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cf6:	4a05      	ldr	r2, [pc, #20]	; (8002d0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd ff9a 	bl	8000c38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40010400 	.word	0x40010400

08002d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d20:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f001 b823 	b.w	8003d7c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 817d 	beq.w	8003046 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d4c:	4bbc      	ldr	r3, [pc, #752]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d00c      	beq.n	8002d72 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d58:	4bb9      	ldr	r3, [pc, #740]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d15c      	bne.n	8002e1e <HAL_RCC_OscConfig+0x10e>
 8002d64:	4bb6      	ldr	r3, [pc, #728]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d70:	d155      	bne.n	8002e1e <HAL_RCC_OscConfig+0x10e>
 8002d72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d76:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d86:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d102      	bne.n	8002da4 <HAL_RCC_OscConfig+0x94>
 8002d9e:	4ba8      	ldr	r3, [pc, #672]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	e015      	b.n	8002dd0 <HAL_RCC_OscConfig+0xc0>
 8002da4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002da8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dac:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002db8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002dbc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002dc0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002dcc:	4b9c      	ldr	r3, [pc, #624]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dd4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002dd8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002ddc:	fa92 f2a2 	rbit	r2, r2
 8002de0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002de4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002de8:	fab2 f282 	clz	r2, r2
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	f042 0220 	orr.w	r2, r2, #32
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	f002 021f 	and.w	r2, r2, #31
 8002df8:	2101      	movs	r1, #1
 8002dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 811f 	beq.w	8003044 <HAL_RCC_OscConfig+0x334>
 8002e06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 8116 	bne.w	8003044 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f000 bfaf 	b.w	8003d7c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2e:	d106      	bne.n	8002e3e <HAL_RCC_OscConfig+0x12e>
 8002e30:	4b83      	ldr	r3, [pc, #524]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a82      	ldr	r2, [pc, #520]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	e036      	b.n	8002eac <HAL_RCC_OscConfig+0x19c>
 8002e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x158>
 8002e4e:	4b7c      	ldr	r3, [pc, #496]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a7b      	ldr	r2, [pc, #492]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b79      	ldr	r3, [pc, #484]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a78      	ldr	r2, [pc, #480]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e021      	b.n	8002eac <HAL_RCC_OscConfig+0x19c>
 8002e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x184>
 8002e7a:	4b71      	ldr	r3, [pc, #452]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a70      	ldr	r2, [pc, #448]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	4b6e      	ldr	r3, [pc, #440]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a6d      	ldr	r2, [pc, #436]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e00b      	b.n	8002eac <HAL_RCC_OscConfig+0x19c>
 8002e94:	4b6a      	ldr	r3, [pc, #424]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a69      	ldr	r2, [pc, #420]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b67      	ldr	r3, [pc, #412]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a66      	ldr	r2, [pc, #408]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eaa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002eac:	4b64      	ldr	r3, [pc, #400]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	f023 020f 	bic.w	r2, r3, #15
 8002eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	495f      	ldr	r1, [pc, #380]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d059      	beq.n	8002f8a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed6:	f7fe fd17 	bl	8001908 <HAL_GetTick>
 8002eda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7fe fd12 	bl	8001908 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b64      	cmp	r3, #100	; 0x64
 8002eee:	d902      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	f000 bf43 	b.w	8003d7c <HAL_RCC_OscConfig+0x106c>
 8002ef6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002efa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002f02:	fa93 f3a3 	rbit	r3, r3
 8002f06:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002f0a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	fab3 f383 	clz	r3, r3
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	095b      	lsrs	r3, r3, #5
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d102      	bne.n	8002f28 <HAL_RCC_OscConfig+0x218>
 8002f22:	4b47      	ldr	r3, [pc, #284]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	e015      	b.n	8002f54 <HAL_RCC_OscConfig+0x244>
 8002f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f2c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f40:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002f44:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002f50:	4b3b      	ldr	r3, [pc, #236]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f58:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002f5c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002f60:	fa92 f2a2 	rbit	r2, r2
 8002f64:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002f68:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002f6c:	fab2 f282 	clz	r2, r2
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	f042 0220 	orr.w	r2, r2, #32
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	f002 021f 	and.w	r2, r2, #31
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ab      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x1d0>
 8002f88:	e05d      	b.n	8003046 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7fe fcbd 	bl	8001908 <HAL_GetTick>
 8002f8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f94:	f7fe fcb8 	bl	8001908 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b64      	cmp	r3, #100	; 0x64
 8002fa2:	d902      	bls.n	8002faa <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	f000 bee9 	b.w	8003d7c <HAL_RCC_OscConfig+0x106c>
 8002faa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fae:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002fbe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d102      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2cc>
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	e015      	b.n	8003008 <HAL_RCC_OscConfig+0x2f8>
 8002fdc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fe0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ff4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002ff8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003004:	4b0e      	ldr	r3, [pc, #56]	; (8003040 <HAL_RCC_OscConfig+0x330>)
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800300c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003010:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003014:	fa92 f2a2 	rbit	r2, r2
 8003018:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800301c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003020:	fab2 f282 	clz	r2, r2
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	f042 0220 	orr.w	r2, r2, #32
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	f002 021f 	and.w	r2, r2, #31
 8003030:	2101      	movs	r1, #1
 8003032:	fa01 f202 	lsl.w	r2, r1, r2
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ab      	bne.n	8002f94 <HAL_RCC_OscConfig+0x284>
 800303c:	e003      	b.n	8003046 <HAL_RCC_OscConfig+0x336>
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 817d 	beq.w	8003356 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800305c:	4ba6      	ldr	r3, [pc, #664]	; (80032f8 <HAL_RCC_OscConfig+0x5e8>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 030c 	and.w	r3, r3, #12
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00b      	beq.n	8003080 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003068:	4ba3      	ldr	r3, [pc, #652]	; (80032f8 <HAL_RCC_OscConfig+0x5e8>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 030c 	and.w	r3, r3, #12
 8003070:	2b08      	cmp	r3, #8
 8003072:	d172      	bne.n	800315a <HAL_RCC_OscConfig+0x44a>
 8003074:	4ba0      	ldr	r3, [pc, #640]	; (80032f8 <HAL_RCC_OscConfig+0x5e8>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d16c      	bne.n	800315a <HAL_RCC_OscConfig+0x44a>
 8003080:	2302      	movs	r3, #2
 8003082:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003092:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	095b      	lsrs	r3, r3, #5
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d102      	bne.n	80030b0 <HAL_RCC_OscConfig+0x3a0>
 80030aa:	4b93      	ldr	r3, [pc, #588]	; (80032f8 <HAL_RCC_OscConfig+0x5e8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	e013      	b.n	80030d8 <HAL_RCC_OscConfig+0x3c8>
 80030b0:	2302      	movs	r3, #2
 80030b2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80030c2:	2302      	movs	r3, #2
 80030c4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80030c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030cc:	fa93 f3a3 	rbit	r3, r3
 80030d0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80030d4:	4b88      	ldr	r3, [pc, #544]	; (80032f8 <HAL_RCC_OscConfig+0x5e8>)
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	2202      	movs	r2, #2
 80030da:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80030de:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80030e2:	fa92 f2a2 	rbit	r2, r2
 80030e6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80030ea:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80030ee:	fab2 f282 	clz	r2, r2
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	f042 0220 	orr.w	r2, r2, #32
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f002 021f 	and.w	r2, r2, #31
 80030fe:	2101      	movs	r1, #1
 8003100:	fa01 f202 	lsl.w	r2, r1, r2
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_RCC_OscConfig+0x410>
 800310a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d002      	beq.n	8003120 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f000 be2e 	b.w	8003d7c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003120:	4b75      	ldr	r3, [pc, #468]	; (80032f8 <HAL_RCC_OscConfig+0x5e8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	21f8      	movs	r1, #248	; 0xf8
 8003136:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800313e:	fa91 f1a1 	rbit	r1, r1
 8003142:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003146:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800314a:	fab1 f181 	clz	r1, r1
 800314e:	b2c9      	uxtb	r1, r1
 8003150:	408b      	lsls	r3, r1
 8003152:	4969      	ldr	r1, [pc, #420]	; (80032f8 <HAL_RCC_OscConfig+0x5e8>)
 8003154:	4313      	orrs	r3, r2
 8003156:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003158:	e0fd      	b.n	8003356 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800315a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8088 	beq.w	800327c <HAL_RCC_OscConfig+0x56c>
 800316c:	2301      	movs	r3, #1
 800316e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800317e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800318c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	461a      	mov	r2, r3
 8003194:	2301      	movs	r3, #1
 8003196:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fe fbb6 	bl	8001908 <HAL_GetTick>
 800319c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a2:	f7fe fbb1 	bl	8001908 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d902      	bls.n	80031b8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	f000 bde2 	b.w	8003d7c <HAL_RCC_OscConfig+0x106c>
 80031b8:	2302      	movs	r3, #2
 80031ba:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80031ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d102      	bne.n	80031e8 <HAL_RCC_OscConfig+0x4d8>
 80031e2:	4b45      	ldr	r3, [pc, #276]	; (80032f8 <HAL_RCC_OscConfig+0x5e8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	e013      	b.n	8003210 <HAL_RCC_OscConfig+0x500>
 80031e8:	2302      	movs	r3, #2
 80031ea:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80031f2:	fa93 f3a3 	rbit	r3, r3
 80031f6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80031fa:	2302      	movs	r3, #2
 80031fc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003200:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800320c:	4b3a      	ldr	r3, [pc, #232]	; (80032f8 <HAL_RCC_OscConfig+0x5e8>)
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	2202      	movs	r2, #2
 8003212:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003216:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800321a:	fa92 f2a2 	rbit	r2, r2
 800321e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003222:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003226:	fab2 f282 	clz	r2, r2
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	f042 0220 	orr.w	r2, r2, #32
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	f002 021f 	and.w	r2, r2, #31
 8003236:	2101      	movs	r1, #1
 8003238:	fa01 f202 	lsl.w	r2, r1, r2
 800323c:	4013      	ands	r3, r2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0af      	beq.n	80031a2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003242:	4b2d      	ldr	r3, [pc, #180]	; (80032f8 <HAL_RCC_OscConfig+0x5e8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800324a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	21f8      	movs	r1, #248	; 0xf8
 8003258:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003260:	fa91 f1a1 	rbit	r1, r1
 8003264:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003268:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800326c:	fab1 f181 	clz	r1, r1
 8003270:	b2c9      	uxtb	r1, r1
 8003272:	408b      	lsls	r3, r1
 8003274:	4920      	ldr	r1, [pc, #128]	; (80032f8 <HAL_RCC_OscConfig+0x5e8>)
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]
 800327a:	e06c      	b.n	8003356 <HAL_RCC_OscConfig+0x646>
 800327c:	2301      	movs	r3, #1
 800327e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800328e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003292:	fab3 f383 	clz	r3, r3
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800329c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	461a      	mov	r2, r3
 80032a4:	2300      	movs	r3, #0
 80032a6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe fb2e 	bl	8001908 <HAL_GetTick>
 80032ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b0:	e00a      	b.n	80032c8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b2:	f7fe fb29 	bl	8001908 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d902      	bls.n	80032c8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	f000 bd5a 	b.w	8003d7c <HAL_RCC_OscConfig+0x106c>
 80032c8:	2302      	movs	r3, #2
 80032ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80032da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d104      	bne.n	80032fc <HAL_RCC_OscConfig+0x5ec>
 80032f2:	4b01      	ldr	r3, [pc, #4]	; (80032f8 <HAL_RCC_OscConfig+0x5e8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	e015      	b.n	8003324 <HAL_RCC_OscConfig+0x614>
 80032f8:	40021000 	.word	0x40021000
 80032fc:	2302      	movs	r3, #2
 80032fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003306:	fa93 f3a3 	rbit	r3, r3
 800330a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800330e:	2302      	movs	r3, #2
 8003310:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003314:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003320:	4bc8      	ldr	r3, [pc, #800]	; (8003644 <HAL_RCC_OscConfig+0x934>)
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	2202      	movs	r2, #2
 8003326:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800332a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800332e:	fa92 f2a2 	rbit	r2, r2
 8003332:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003336:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f042 0220 	orr.w	r2, r2, #32
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f002 021f 	and.w	r2, r2, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1ad      	bne.n	80032b2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003356:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 8110 	beq.w	800358c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800336c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003370:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d079      	beq.n	8003470 <HAL_RCC_OscConfig+0x760>
 800337c:	2301      	movs	r3, #1
 800337e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800338e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	4bab      	ldr	r3, [pc, #684]	; (8003648 <HAL_RCC_OscConfig+0x938>)
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	461a      	mov	r2, r3
 80033a2:	2301      	movs	r3, #1
 80033a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a6:	f7fe faaf 	bl	8001908 <HAL_GetTick>
 80033aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b0:	f7fe faaa 	bl	8001908 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d902      	bls.n	80033c6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	f000 bcdb 	b.w	8003d7c <HAL_RCC_OscConfig+0x106c>
 80033c6:	2302      	movs	r3, #2
 80033c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80033d0:	fa93 f3a3 	rbit	r3, r3
 80033d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80033d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033dc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80033e0:	2202      	movs	r2, #2
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	fa93 f2a3 	rbit	r2, r3
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003404:	2202      	movs	r2, #2
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	fa93 f2a3 	rbit	r2, r3
 8003416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800341e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003420:	4b88      	ldr	r3, [pc, #544]	; (8003644 <HAL_RCC_OscConfig+0x934>)
 8003422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003428:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800342c:	2102      	movs	r1, #2
 800342e:	6019      	str	r1, [r3, #0]
 8003430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003434:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	fa93 f1a3 	rbit	r1, r3
 800343e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003442:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003446:	6019      	str	r1, [r3, #0]
  return result;
 8003448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	2101      	movs	r1, #1
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0a0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x6a0>
 800346e:	e08d      	b.n	800358c <HAL_RCC_OscConfig+0x87c>
 8003470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003474:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003478:	2201      	movs	r2, #1
 800347a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003480:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	fa93 f2a3 	rbit	r2, r3
 800348a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003492:	601a      	str	r2, [r3, #0]
  return result;
 8003494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003498:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800349c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	4b68      	ldr	r3, [pc, #416]	; (8003648 <HAL_RCC_OscConfig+0x938>)
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	461a      	mov	r2, r3
 80034ae:	2300      	movs	r3, #0
 80034b0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b2:	f7fe fa29 	bl	8001908 <HAL_GetTick>
 80034b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034bc:	f7fe fa24 	bl	8001908 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d902      	bls.n	80034d2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	f000 bc55 	b.w	8003d7c <HAL_RCC_OscConfig+0x106c>
 80034d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80034da:	2202      	movs	r2, #2
 80034dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	fa93 f2a3 	rbit	r2, r3
 80034ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80034fe:	2202      	movs	r2, #2
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003506:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	fa93 f2a3 	rbit	r2, r3
 8003510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003514:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003522:	2202      	movs	r2, #2
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	fa93 f2a3 	rbit	r2, r3
 8003534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003538:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800353c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353e:	4b41      	ldr	r3, [pc, #260]	; (8003644 <HAL_RCC_OscConfig+0x934>)
 8003540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003546:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800354a:	2102      	movs	r1, #2
 800354c:	6019      	str	r1, [r3, #0]
 800354e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003552:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	fa93 f1a3 	rbit	r1, r3
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003564:	6019      	str	r1, [r3, #0]
  return result;
 8003566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f003 031f 	and.w	r3, r3, #31
 8003580:	2101      	movs	r1, #1
 8003582:	fa01 f303 	lsl.w	r3, r1, r3
 8003586:	4013      	ands	r3, r2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d197      	bne.n	80034bc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 81a1 	beq.w	80038e4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a8:	4b26      	ldr	r3, [pc, #152]	; (8003644 <HAL_RCC_OscConfig+0x934>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d116      	bne.n	80035e2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b4:	4b23      	ldr	r3, [pc, #140]	; (8003644 <HAL_RCC_OscConfig+0x934>)
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	4a22      	ldr	r2, [pc, #136]	; (8003644 <HAL_RCC_OscConfig+0x934>)
 80035ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035be:	61d3      	str	r3, [r2, #28]
 80035c0:	4b20      	ldr	r3, [pc, #128]	; (8003644 <HAL_RCC_OscConfig+0x934>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80035c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035cc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80035da:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e2:	4b1a      	ldr	r3, [pc, #104]	; (800364c <HAL_RCC_OscConfig+0x93c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d11a      	bne.n	8003624 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ee:	4b17      	ldr	r3, [pc, #92]	; (800364c <HAL_RCC_OscConfig+0x93c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a16      	ldr	r2, [pc, #88]	; (800364c <HAL_RCC_OscConfig+0x93c>)
 80035f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035fa:	f7fe f985 	bl	8001908 <HAL_GetTick>
 80035fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003602:	e009      	b.n	8003618 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003604:	f7fe f980 	bl	8001908 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b64      	cmp	r3, #100	; 0x64
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e3b1      	b.n	8003d7c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	4b0c      	ldr	r3, [pc, #48]	; (800364c <HAL_RCC_OscConfig+0x93c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0ef      	beq.n	8003604 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003628:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d10d      	bne.n	8003650 <HAL_RCC_OscConfig+0x940>
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <HAL_RCC_OscConfig+0x934>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4a02      	ldr	r2, [pc, #8]	; (8003644 <HAL_RCC_OscConfig+0x934>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6213      	str	r3, [r2, #32]
 8003640:	e03c      	b.n	80036bc <HAL_RCC_OscConfig+0x9ac>
 8003642:	bf00      	nop
 8003644:	40021000 	.word	0x40021000
 8003648:	10908120 	.word	0x10908120
 800364c:	40007000 	.word	0x40007000
 8003650:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003654:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10c      	bne.n	800367a <HAL_RCC_OscConfig+0x96a>
 8003660:	4bc1      	ldr	r3, [pc, #772]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	4ac0      	ldr	r2, [pc, #768]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	6213      	str	r3, [r2, #32]
 800366c:	4bbe      	ldr	r3, [pc, #760]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	4abd      	ldr	r2, [pc, #756]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 8003672:	f023 0304 	bic.w	r3, r3, #4
 8003676:	6213      	str	r3, [r2, #32]
 8003678:	e020      	b.n	80036bc <HAL_RCC_OscConfig+0x9ac>
 800367a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b05      	cmp	r3, #5
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x994>
 800368a:	4bb7      	ldr	r3, [pc, #732]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	4ab6      	ldr	r2, [pc, #728]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 8003690:	f043 0304 	orr.w	r3, r3, #4
 8003694:	6213      	str	r3, [r2, #32]
 8003696:	4bb4      	ldr	r3, [pc, #720]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4ab3      	ldr	r2, [pc, #716]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6213      	str	r3, [r2, #32]
 80036a2:	e00b      	b.n	80036bc <HAL_RCC_OscConfig+0x9ac>
 80036a4:	4bb0      	ldr	r3, [pc, #704]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4aaf      	ldr	r2, [pc, #700]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	6213      	str	r3, [r2, #32]
 80036b0:	4bad      	ldr	r3, [pc, #692]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	4aac      	ldr	r2, [pc, #688]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 80036b6:	f023 0304 	bic.w	r3, r3, #4
 80036ba:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8081 	beq.w	80037d0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ce:	f7fe f91b 	bl	8001908 <HAL_GetTick>
 80036d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d6:	e00b      	b.n	80036f0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d8:	f7fe f916 	bl	8001908 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e345      	b.n	8003d7c <HAL_RCC_OscConfig+0x106c>
 80036f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80036f8:	2202      	movs	r2, #2
 80036fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003700:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	fa93 f2a3 	rbit	r2, r3
 800370a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003718:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800371c:	2202      	movs	r2, #2
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003724:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	fa93 f2a3 	rbit	r2, r3
 800372e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003732:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003736:	601a      	str	r2, [r3, #0]
  return result;
 8003738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003740:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003742:	fab3 f383 	clz	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f043 0302 	orr.w	r3, r3, #2
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d102      	bne.n	800375c <HAL_RCC_OscConfig+0xa4c>
 8003756:	4b84      	ldr	r3, [pc, #528]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	e013      	b.n	8003784 <HAL_RCC_OscConfig+0xa74>
 800375c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003760:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003764:	2202      	movs	r2, #2
 8003766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	fa93 f2a3 	rbit	r2, r3
 8003776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	4b79      	ldr	r3, [pc, #484]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003788:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800378c:	2102      	movs	r1, #2
 800378e:	6011      	str	r1, [r2, #0]
 8003790:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003794:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	fa92 f1a2 	rbit	r1, r2
 800379e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037a2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80037a6:	6011      	str	r1, [r2, #0]
  return result;
 80037a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ac:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	fab2 f282 	clz	r2, r2
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	f002 021f 	and.w	r2, r2, #31
 80037c2:	2101      	movs	r1, #1
 80037c4:	fa01 f202 	lsl.w	r2, r1, r2
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d084      	beq.n	80036d8 <HAL_RCC_OscConfig+0x9c8>
 80037ce:	e07f      	b.n	80038d0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d0:	f7fe f89a 	bl	8001908 <HAL_GetTick>
 80037d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037d8:	e00b      	b.n	80037f2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037da:	f7fe f895 	bl	8001908 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e2c4      	b.n	8003d7c <HAL_RCC_OscConfig+0x106c>
 80037f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80037fa:	2202      	movs	r2, #2
 80037fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003802:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	fa93 f2a3 	rbit	r2, r3
 800380c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003810:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800381e:	2202      	movs	r2, #2
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003826:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	fa93 f2a3 	rbit	r2, r3
 8003830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003834:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003838:	601a      	str	r2, [r3, #0]
  return result;
 800383a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003842:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f043 0302 	orr.w	r3, r3, #2
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d102      	bne.n	800385e <HAL_RCC_OscConfig+0xb4e>
 8003858:	4b43      	ldr	r3, [pc, #268]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	e013      	b.n	8003886 <HAL_RCC_OscConfig+0xb76>
 800385e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003862:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003866:	2202      	movs	r2, #2
 8003868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	fa93 f2a3 	rbit	r2, r3
 8003878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	4b39      	ldr	r3, [pc, #228]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800388a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800388e:	2102      	movs	r1, #2
 8003890:	6011      	str	r1, [r2, #0]
 8003892:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003896:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	fa92 f1a2 	rbit	r1, r2
 80038a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038a4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80038a8:	6011      	str	r1, [r2, #0]
  return result;
 80038aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038ae:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	fab2 f282 	clz	r2, r2
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	f002 021f 	and.w	r2, r2, #31
 80038c4:	2101      	movs	r1, #1
 80038c6:	fa01 f202 	lsl.w	r2, r1, r2
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d184      	bne.n	80037da <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038d0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d105      	bne.n	80038e4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d8:	4b23      	ldr	r3, [pc, #140]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	4a22      	ldr	r2, [pc, #136]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 80038de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 8242 	beq.w	8003d7a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038f6:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <HAL_RCC_OscConfig+0xc58>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f003 030c 	and.w	r3, r3, #12
 80038fe:	2b08      	cmp	r3, #8
 8003900:	f000 8213 	beq.w	8003d2a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003908:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	2b02      	cmp	r3, #2
 8003912:	f040 8162 	bne.w	8003bda <HAL_RCC_OscConfig+0xeca>
 8003916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800391e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003922:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003928:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	fa93 f2a3 	rbit	r2, r3
 8003932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003936:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800393a:	601a      	str	r2, [r3, #0]
  return result;
 800393c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003940:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003944:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003950:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	461a      	mov	r2, r3
 8003958:	2300      	movs	r3, #0
 800395a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7fd ffd4 	bl	8001908 <HAL_GetTick>
 8003960:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003964:	e00c      	b.n	8003980 <HAL_RCC_OscConfig+0xc70>
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800396c:	f7fd ffcc 	bl	8001908 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e1fd      	b.n	8003d7c <HAL_RCC_OscConfig+0x106c>
 8003980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003984:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800398c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003992:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	fa93 f2a3 	rbit	r2, r3
 800399c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80039a4:	601a      	str	r2, [r3, #0]
  return result;
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80039ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039b0:	fab3 f383 	clz	r3, r3
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d102      	bne.n	80039ca <HAL_RCC_OscConfig+0xcba>
 80039c4:	4bb0      	ldr	r3, [pc, #704]	; (8003c88 <HAL_RCC_OscConfig+0xf78>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	e027      	b.n	8003a1a <HAL_RCC_OscConfig+0xd0a>
 80039ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ce:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80039d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039dc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	fa93 f2a3 	rbit	r2, r3
 80039e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80039f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a02:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	fa93 f2a3 	rbit	r2, r3
 8003a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a10:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	4b9c      	ldr	r3, [pc, #624]	; (8003c88 <HAL_RCC_OscConfig+0xf78>)
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a1e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003a22:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a26:	6011      	str	r1, [r2, #0]
 8003a28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a2c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	fa92 f1a2 	rbit	r1, r2
 8003a36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a3a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003a3e:	6011      	str	r1, [r2, #0]
  return result;
 8003a40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a44:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	fab2 f282 	clz	r2, r2
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	f042 0220 	orr.w	r2, r2, #32
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	f002 021f 	and.w	r2, r2, #31
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d182      	bne.n	800396c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a66:	4b88      	ldr	r3, [pc, #544]	; (8003c88 <HAL_RCC_OscConfig+0xf78>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	430b      	orrs	r3, r1
 8003a88:	497f      	ldr	r1, [pc, #508]	; (8003c88 <HAL_RCC_OscConfig+0xf78>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	604b      	str	r3, [r1, #4]
 8003a8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a92:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	fa93 f2a3 	rbit	r2, r3
 8003aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003ab2:	601a      	str	r2, [r3, #0]
  return result;
 8003ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003abc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003abe:	fab3 f383 	clz	r3, r3
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ac8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fd ff18 	bl	8001908 <HAL_GetTick>
 8003ad8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003adc:	e009      	b.n	8003af2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ade:	f7fd ff13 	bl	8001908 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e144      	b.n	8003d7c <HAL_RCC_OscConfig+0x106c>
 8003af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003afa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b04:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	fa93 f2a3 	rbit	r2, r3
 8003b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b12:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003b16:	601a      	str	r2, [r3, #0]
  return result;
 8003b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003b20:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	095b      	lsrs	r3, r3, #5
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d102      	bne.n	8003b3c <HAL_RCC_OscConfig+0xe2c>
 8003b36:	4b54      	ldr	r3, [pc, #336]	; (8003c88 <HAL_RCC_OscConfig+0xf78>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	e027      	b.n	8003b8c <HAL_RCC_OscConfig+0xe7c>
 8003b3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b40:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	fa93 f2a3 	rbit	r2, r3
 8003b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b66:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b74:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	fa93 f2a3 	rbit	r2, r3
 8003b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b82:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	4b3f      	ldr	r3, [pc, #252]	; (8003c88 <HAL_RCC_OscConfig+0xf78>)
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b90:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003b94:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b98:	6011      	str	r1, [r2, #0]
 8003b9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b9e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	fa92 f1a2 	rbit	r1, r2
 8003ba8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bac:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003bb0:	6011      	str	r1, [r2, #0]
  return result;
 8003bb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bb6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	fab2 f282 	clz	r2, r2
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	f042 0220 	orr.w	r2, r2, #32
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	f002 021f 	and.w	r2, r2, #31
 8003bcc:	2101      	movs	r1, #1
 8003bce:	fa01 f202 	lsl.w	r2, r1, r2
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d082      	beq.n	8003ade <HAL_RCC_OscConfig+0xdce>
 8003bd8:	e0cf      	b.n	8003d7a <HAL_RCC_OscConfig+0x106a>
 8003bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bde:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003be2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bec:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	fa93 f2a3 	rbit	r2, r3
 8003bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003bfe:	601a      	str	r2, [r3, #0]
  return result;
 8003c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c04:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003c08:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0a:	fab3 f383 	clz	r3, r3
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fd fe72 	bl	8001908 <HAL_GetTick>
 8003c24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c28:	e009      	b.n	8003c3e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c2a:	f7fd fe6d 	bl	8001908 <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e09e      	b.n	8003d7c <HAL_RCC_OscConfig+0x106c>
 8003c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c42:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c50:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	fa93 f2a3 	rbit	r2, r3
 8003c5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c62:	601a      	str	r2, [r3, #0]
  return result;
 8003c64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c68:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003c6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d104      	bne.n	8003c8c <HAL_RCC_OscConfig+0xf7c>
 8003c82:	4b01      	ldr	r3, [pc, #4]	; (8003c88 <HAL_RCC_OscConfig+0xf78>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	e029      	b.n	8003cdc <HAL_RCC_OscConfig+0xfcc>
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c90:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	fa93 f2a3 	rbit	r2, r3
 8003ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cac:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003cba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	fa93 f2a3 	rbit	r2, r3
 8003cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	4b2b      	ldr	r3, [pc, #172]	; (8003d88 <HAL_RCC_OscConfig+0x1078>)
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ce0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003ce4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ce8:	6011      	str	r1, [r2, #0]
 8003cea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cee:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	fa92 f1a2 	rbit	r1, r2
 8003cf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cfc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003d00:	6011      	str	r1, [r2, #0]
  return result;
 8003d02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d06:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	fab2 f282 	clz	r2, r2
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	f042 0220 	orr.w	r2, r2, #32
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	f002 021f 	and.w	r2, r2, #31
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d180      	bne.n	8003c2a <HAL_RCC_OscConfig+0xf1a>
 8003d28:	e027      	b.n	8003d7a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e01e      	b.n	8003d7c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d3e:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <HAL_RCC_OscConfig+0x1078>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d46:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d4a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d10b      	bne.n	8003d76 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d5e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003d62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d001      	beq.n	8003d7a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40021000 	.word	0x40021000

08003d8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b09e      	sub	sp, #120	; 0x78
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e162      	b.n	800406a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003da4:	4b90      	ldr	r3, [pc, #576]	; (8003fe8 <HAL_RCC_ClockConfig+0x25c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d910      	bls.n	8003dd4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db2:	4b8d      	ldr	r3, [pc, #564]	; (8003fe8 <HAL_RCC_ClockConfig+0x25c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 0207 	bic.w	r2, r3, #7
 8003dba:	498b      	ldr	r1, [pc, #556]	; (8003fe8 <HAL_RCC_ClockConfig+0x25c>)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc2:	4b89      	ldr	r3, [pc, #548]	; (8003fe8 <HAL_RCC_ClockConfig+0x25c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e14a      	b.n	800406a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d008      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de0:	4b82      	ldr	r3, [pc, #520]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	497f      	ldr	r1, [pc, #508]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 80dc 	beq.w	8003fb8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d13c      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xf6>
 8003e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e0c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e18:	fab3 f383 	clz	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d102      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xa6>
 8003e2c:	4b6f      	ldr	r3, [pc, #444]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	e00f      	b.n	8003e52 <HAL_RCC_ClockConfig+0xc6>
 8003e32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e36:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	667b      	str	r3, [r7, #100]	; 0x64
 8003e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e44:	663b      	str	r3, [r7, #96]	; 0x60
 8003e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e48:	fa93 f3a3 	rbit	r3, r3
 8003e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e4e:	4b67      	ldr	r3, [pc, #412]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e56:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e5a:	fa92 f2a2 	rbit	r2, r2
 8003e5e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003e60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e62:	fab2 f282 	clz	r2, r2
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	f042 0220 	orr.w	r2, r2, #32
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	f002 021f 	and.w	r2, r2, #31
 8003e72:	2101      	movs	r1, #1
 8003e74:	fa01 f202 	lsl.w	r2, r1, r2
 8003e78:	4013      	ands	r3, r2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d17b      	bne.n	8003f76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e0f3      	b.n	800406a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d13c      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x178>
 8003e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e92:	fa93 f3a3 	rbit	r3, r3
 8003e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d102      	bne.n	8003eb4 <HAL_RCC_ClockConfig+0x128>
 8003eae:	4b4f      	ldr	r3, [pc, #316]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	e00f      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x148>
 8003eb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eb8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ebc:	fa93 f3a3 	rbit	r3, r3
 8003ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed0:	4b46      	ldr	r3, [pc, #280]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ed8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003edc:	fa92 f2a2 	rbit	r2, r2
 8003ee0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ee4:	fab2 f282 	clz	r2, r2
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	f042 0220 	orr.w	r2, r2, #32
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	f002 021f 	and.w	r2, r2, #31
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d13a      	bne.n	8003f76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0b2      	b.n	800406a <HAL_RCC_ClockConfig+0x2de>
 8003f04:	2302      	movs	r3, #2
 8003f06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0a:	fa93 f3a3 	rbit	r3, r3
 8003f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f12:	fab3 f383 	clz	r3, r3
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d102      	bne.n	8003f2c <HAL_RCC_ClockConfig+0x1a0>
 8003f26:	4b31      	ldr	r3, [pc, #196]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	e00d      	b.n	8003f48 <HAL_RCC_ClockConfig+0x1bc>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f32:	fa93 f3a3 	rbit	r3, r3
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
 8003f38:	2302      	movs	r3, #2
 8003f3a:	623b      	str	r3, [r7, #32]
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	fa93 f3a3 	rbit	r3, r3
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	4b29      	ldr	r3, [pc, #164]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	2202      	movs	r2, #2
 8003f4a:	61ba      	str	r2, [r7, #24]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	fa92 f2a2 	rbit	r2, r2
 8003f52:	617a      	str	r2, [r7, #20]
  return result;
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	fab2 f282 	clz	r2, r2
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	f042 0220 	orr.w	r2, r2, #32
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	f002 021f 	and.w	r2, r2, #31
 8003f66:	2101      	movs	r1, #1
 8003f68:	fa01 f202 	lsl.w	r2, r1, r2
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e079      	b.n	800406a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f76:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f023 0203 	bic.w	r2, r3, #3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	491a      	ldr	r1, [pc, #104]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f88:	f7fd fcbe 	bl	8001908 <HAL_GetTick>
 8003f8c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f90:	f7fd fcba 	bl	8001908 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e061      	b.n	800406a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <HAL_RCC_ClockConfig+0x260>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 020c 	and.w	r2, r3, #12
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d1eb      	bne.n	8003f90 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_RCC_ClockConfig+0x25c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d214      	bcs.n	8003ff0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc6:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <HAL_RCC_ClockConfig+0x25c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 0207 	bic.w	r2, r3, #7
 8003fce:	4906      	ldr	r1, [pc, #24]	; (8003fe8 <HAL_RCC_ClockConfig+0x25c>)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd6:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <HAL_RCC_ClockConfig+0x25c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e040      	b.n	800406a <HAL_RCC_ClockConfig+0x2de>
 8003fe8:	40022000 	.word	0x40022000
 8003fec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_RCC_ClockConfig+0x2e8>)
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	491a      	ldr	r1, [pc, #104]	; (8004074 <HAL_RCC_ClockConfig+0x2e8>)
 800400a:	4313      	orrs	r3, r2
 800400c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d009      	beq.n	800402e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800401a:	4b16      	ldr	r3, [pc, #88]	; (8004074 <HAL_RCC_ClockConfig+0x2e8>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4912      	ldr	r1, [pc, #72]	; (8004074 <HAL_RCC_ClockConfig+0x2e8>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800402e:	f000 f829 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 8004032:	4601      	mov	r1, r0
 8004034:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <HAL_RCC_ClockConfig+0x2e8>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800403c:	22f0      	movs	r2, #240	; 0xf0
 800403e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	fa92 f2a2 	rbit	r2, r2
 8004046:	60fa      	str	r2, [r7, #12]
  return result;
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	fab2 f282 	clz	r2, r2
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	40d3      	lsrs	r3, r2
 8004052:	4a09      	ldr	r2, [pc, #36]	; (8004078 <HAL_RCC_ClockConfig+0x2ec>)
 8004054:	5cd3      	ldrb	r3, [r2, r3]
 8004056:	fa21 f303 	lsr.w	r3, r1, r3
 800405a:	4a08      	ldr	r2, [pc, #32]	; (800407c <HAL_RCC_ClockConfig+0x2f0>)
 800405c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800405e:	4b08      	ldr	r3, [pc, #32]	; (8004080 <HAL_RCC_ClockConfig+0x2f4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fd fc0c 	bl	8001880 <HAL_InitTick>
  
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3778      	adds	r7, #120	; 0x78
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000
 8004078:	0800546c 	.word	0x0800546c
 800407c:	20000000 	.word	0x20000000
 8004080:	20000004 	.word	0x20000004

08004084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004084:	b480      	push	{r7}
 8004086:	b08b      	sub	sp, #44	; 0x2c
 8004088:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	2300      	movs	r3, #0
 8004090:	61bb      	str	r3, [r7, #24]
 8004092:	2300      	movs	r3, #0
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800409e:	4b29      	ldr	r3, [pc, #164]	; (8004144 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d002      	beq.n	80040b4 <HAL_RCC_GetSysClockFreq+0x30>
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d003      	beq.n	80040ba <HAL_RCC_GetSysClockFreq+0x36>
 80040b2:	e03c      	b.n	800412e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040b4:	4b24      	ldr	r3, [pc, #144]	; (8004148 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040b6:	623b      	str	r3, [r7, #32]
      break;
 80040b8:	e03c      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80040c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80040c4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	fa92 f2a2 	rbit	r2, r2
 80040cc:	607a      	str	r2, [r7, #4]
  return result;
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	fab2 f282 	clz	r2, r2
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	40d3      	lsrs	r3, r2
 80040d8:	4a1c      	ldr	r2, [pc, #112]	; (800414c <HAL_RCC_GetSysClockFreq+0xc8>)
 80040da:	5cd3      	ldrb	r3, [r2, r3]
 80040dc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80040de:	4b19      	ldr	r3, [pc, #100]	; (8004144 <HAL_RCC_GetSysClockFreq+0xc0>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	220f      	movs	r2, #15
 80040e8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	fa92 f2a2 	rbit	r2, r2
 80040f0:	60fa      	str	r2, [r7, #12]
  return result;
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	fab2 f282 	clz	r2, r2
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	40d3      	lsrs	r3, r2
 80040fc:	4a14      	ldr	r2, [pc, #80]	; (8004150 <HAL_RCC_GetSysClockFreq+0xcc>)
 80040fe:	5cd3      	ldrb	r3, [r2, r3]
 8004100:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800410c:	4a0e      	ldr	r2, [pc, #56]	; (8004148 <HAL_RCC_GetSysClockFreq+0xc4>)
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	fbb2 f2f3 	udiv	r2, r2, r3
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	fb02 f303 	mul.w	r3, r2, r3
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
 800411c:	e004      	b.n	8004128 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	4a0c      	ldr	r2, [pc, #48]	; (8004154 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004122:	fb02 f303 	mul.w	r3, r2, r3
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	623b      	str	r3, [r7, #32]
      break;
 800412c:	e002      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004130:	623b      	str	r3, [r7, #32]
      break;
 8004132:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004134:	6a3b      	ldr	r3, [r7, #32]
}
 8004136:	4618      	mov	r0, r3
 8004138:	372c      	adds	r7, #44	; 0x2c
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	007a1200 	.word	0x007a1200
 800414c:	0800547c 	.word	0x0800547c
 8004150:	0800548c 	.word	0x0800548c
 8004154:	003d0900 	.word	0x003d0900

08004158 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b092      	sub	sp, #72	; 0x48
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004168:	2300      	movs	r3, #0
 800416a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 80cd 	beq.w	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417c:	4b86      	ldr	r3, [pc, #536]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10e      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004188:	4b83      	ldr	r3, [pc, #524]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	4a82      	ldr	r2, [pc, #520]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800418e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004192:	61d3      	str	r3, [r2, #28]
 8004194:	4b80      	ldr	r3, [pc, #512]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a6:	4b7d      	ldr	r3, [pc, #500]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d118      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041b2:	4b7a      	ldr	r3, [pc, #488]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a79      	ldr	r2, [pc, #484]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80041b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041be:	f7fd fba3 	bl	8001908 <HAL_GetTick>
 80041c2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c4:	e008      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c6:	f7fd fb9f 	bl	8001908 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b64      	cmp	r3, #100	; 0x64
 80041d2:	d901      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e0db      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d8:	4b70      	ldr	r3, [pc, #448]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041e4:	4b6c      	ldr	r3, [pc, #432]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d07d      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041fe:	429a      	cmp	r2, r3
 8004200:	d076      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004202:	4b65      	ldr	r3, [pc, #404]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800420c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004210:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	fa93 f3a3 	rbit	r3, r3
 8004218:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800421c:	fab3 f383 	clz	r3, r3
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	4b5e      	ldr	r3, [pc, #376]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	461a      	mov	r2, r3
 800422c:	2301      	movs	r3, #1
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004234:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004238:	fa93 f3a3 	rbit	r3, r3
 800423c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800423e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004240:	fab3 f383 	clz	r3, r3
 8004244:	b2db      	uxtb	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	4b55      	ldr	r3, [pc, #340]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800424a:	4413      	add	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	461a      	mov	r2, r3
 8004250:	2300      	movs	r3, #0
 8004252:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004254:	4a50      	ldr	r2, [pc, #320]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004258:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800425a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d045      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7fd fb50 	bl	8001908 <HAL_GetTick>
 8004268:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426a:	e00a      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800426c:	f7fd fb4c 	bl	8001908 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	; 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e086      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004282:	2302      	movs	r3, #2
 8004284:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	fa93 f3a3 	rbit	r3, r3
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
 800428e:	2302      	movs	r3, #2
 8004290:	623b      	str	r3, [r7, #32]
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	61fb      	str	r3, [r7, #28]
  return result;
 800429a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429c:	fab3 f383 	clz	r3, r3
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	f043 0302 	orr.w	r3, r3, #2
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d102      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80042b0:	4b39      	ldr	r3, [pc, #228]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	e007      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80042b6:	2302      	movs	r3, #2
 80042b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	fa93 f3a3 	rbit	r3, r3
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	4b35      	ldr	r3, [pc, #212]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	2202      	movs	r2, #2
 80042c8:	613a      	str	r2, [r7, #16]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	fa92 f2a2 	rbit	r2, r2
 80042d0:	60fa      	str	r2, [r7, #12]
  return result;
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	fab2 f282 	clz	r2, r2
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	f002 021f 	and.w	r2, r2, #31
 80042e4:	2101      	movs	r1, #1
 80042e6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ea:	4013      	ands	r3, r2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0bd      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80042f0:	4b29      	ldr	r3, [pc, #164]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	4926      	ldr	r1, [pc, #152]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004302:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004306:	2b01      	cmp	r3, #1
 8004308:	d105      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430a:	4b23      	ldr	r3, [pc, #140]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	4a22      	ldr	r2, [pc, #136]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004314:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004322:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	f023 0203 	bic.w	r2, r3, #3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	491a      	ldr	r1, [pc, #104]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004330:	4313      	orrs	r3, r2
 8004332:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004340:	4b15      	ldr	r3, [pc, #84]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004344:	f023 0210 	bic.w	r2, r3, #16
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	4912      	ldr	r1, [pc, #72]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800434e:	4313      	orrs	r3, r2
 8004350:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435a:	2b00      	cmp	r3, #0
 800435c:	d008      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800435e:	4b0e      	ldr	r3, [pc, #56]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	490b      	ldr	r1, [pc, #44]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800436c:	4313      	orrs	r3, r2
 800436e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	4903      	ldr	r1, [pc, #12]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800438a:	4313      	orrs	r3, r2
 800438c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3748      	adds	r7, #72	; 0x48
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40021000 	.word	0x40021000
 800439c:	40007000 	.word	0x40007000
 80043a0:	10908100 	.word	0x10908100

080043a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e049      	b.n	800444a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fd f8be 	bl	800154c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	4619      	mov	r1, r3
 80043e2:	4610      	mov	r0, r2
 80043e4:	f000 f9da 	bl	800479c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e049      	b.n	80044f8 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	d106      	bne.n	800447e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f841 	bl	8004500 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2202      	movs	r2, #2
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3304      	adds	r3, #4
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f000 f983 	bl	800479c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_TIM_OC_ConfigChannel+0x1e>
 800452e:	2302      	movs	r3, #2
 8004530:	e066      	b.n	8004600 <HAL_TIM_OC_ConfigChannel+0xec>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b14      	cmp	r3, #20
 800453e:	d857      	bhi.n	80045f0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004540:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004546:	bf00      	nop
 8004548:	0800459d 	.word	0x0800459d
 800454c:	080045f1 	.word	0x080045f1
 8004550:	080045f1 	.word	0x080045f1
 8004554:	080045f1 	.word	0x080045f1
 8004558:	080045ab 	.word	0x080045ab
 800455c:	080045f1 	.word	0x080045f1
 8004560:	080045f1 	.word	0x080045f1
 8004564:	080045f1 	.word	0x080045f1
 8004568:	080045b9 	.word	0x080045b9
 800456c:	080045f1 	.word	0x080045f1
 8004570:	080045f1 	.word	0x080045f1
 8004574:	080045f1 	.word	0x080045f1
 8004578:	080045c7 	.word	0x080045c7
 800457c:	080045f1 	.word	0x080045f1
 8004580:	080045f1 	.word	0x080045f1
 8004584:	080045f1 	.word	0x080045f1
 8004588:	080045d5 	.word	0x080045d5
 800458c:	080045f1 	.word	0x080045f1
 8004590:	080045f1 	.word	0x080045f1
 8004594:	080045f1 	.word	0x080045f1
 8004598:	080045e3 	.word	0x080045e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f972 	bl	800488c <TIM_OC1_SetConfig>
      break;
 80045a8:	e025      	b.n	80045f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 f9f1 	bl	8004998 <TIM_OC2_SetConfig>
      break;
 80045b6:	e01e      	b.n	80045f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fa6a 	bl	8004a98 <TIM_OC3_SetConfig>
      break;
 80045c4:	e017      	b.n	80045f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fae1 	bl	8004b94 <TIM_OC4_SetConfig>
      break;
 80045d2:	e010      	b.n	80045f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fb3e 	bl	8004c5c <TIM_OC5_SetConfig>
      break;
 80045e0:	e009      	b.n	80045f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 fb95 	bl	8004d18 <TIM_OC6_SetConfig>
      break;
 80045ee:	e002      	b.n	80045f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	75fb      	strb	r3, [r7, #23]
      break;
 80045f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_TIM_ConfigClockSource+0x1c>
 8004620:	2302      	movs	r3, #2
 8004622:	e0b6      	b.n	8004792 <HAL_TIM_ConfigClockSource+0x18a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004642:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800464e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004660:	d03e      	beq.n	80046e0 <HAL_TIM_ConfigClockSource+0xd8>
 8004662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004666:	f200 8087 	bhi.w	8004778 <HAL_TIM_ConfigClockSource+0x170>
 800466a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466e:	f000 8086 	beq.w	800477e <HAL_TIM_ConfigClockSource+0x176>
 8004672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004676:	d87f      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x170>
 8004678:	2b70      	cmp	r3, #112	; 0x70
 800467a:	d01a      	beq.n	80046b2 <HAL_TIM_ConfigClockSource+0xaa>
 800467c:	2b70      	cmp	r3, #112	; 0x70
 800467e:	d87b      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x170>
 8004680:	2b60      	cmp	r3, #96	; 0x60
 8004682:	d050      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0x11e>
 8004684:	2b60      	cmp	r3, #96	; 0x60
 8004686:	d877      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x170>
 8004688:	2b50      	cmp	r3, #80	; 0x50
 800468a:	d03c      	beq.n	8004706 <HAL_TIM_ConfigClockSource+0xfe>
 800468c:	2b50      	cmp	r3, #80	; 0x50
 800468e:	d873      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x170>
 8004690:	2b40      	cmp	r3, #64	; 0x40
 8004692:	d058      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0x13e>
 8004694:	2b40      	cmp	r3, #64	; 0x40
 8004696:	d86f      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x170>
 8004698:	2b30      	cmp	r3, #48	; 0x30
 800469a:	d064      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x15e>
 800469c:	2b30      	cmp	r3, #48	; 0x30
 800469e:	d86b      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x170>
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d060      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x15e>
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d867      	bhi.n	8004778 <HAL_TIM_ConfigClockSource+0x170>
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d05c      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x15e>
 80046ac:	2b10      	cmp	r3, #16
 80046ae:	d05a      	beq.n	8004766 <HAL_TIM_ConfigClockSource+0x15e>
 80046b0:	e062      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	6899      	ldr	r1, [r3, #8]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f000 fc03 	bl	8004ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	609a      	str	r2, [r3, #8]
      break;
 80046de:	e04f      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	6899      	ldr	r1, [r3, #8]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	f000 fbec 	bl	8004ecc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004702:	609a      	str	r2, [r3, #8]
      break;
 8004704:	e03c      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6818      	ldr	r0, [r3, #0]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	6859      	ldr	r1, [r3, #4]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	461a      	mov	r2, r3
 8004714:	f000 fb60 	bl	8004dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2150      	movs	r1, #80	; 0x50
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fbb9 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004724:	e02c      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6859      	ldr	r1, [r3, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	461a      	mov	r2, r3
 8004734:	f000 fb7f 	bl	8004e36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2160      	movs	r1, #96	; 0x60
 800473e:	4618      	mov	r0, r3
 8004740:	f000 fba9 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004744:	e01c      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6859      	ldr	r1, [r3, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	461a      	mov	r2, r3
 8004754:	f000 fb40 	bl	8004dd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2140      	movs	r1, #64	; 0x40
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fb99 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004764:	e00c      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f000 fb90 	bl	8004e96 <TIM_ITRx_SetConfig>
      break;
 8004776:	e003      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
      break;
 800477c:	e000      	b.n	8004780 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800477e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004790:	7bfb      	ldrb	r3, [r7, #15]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a32      	ldr	r2, [pc, #200]	; (8004878 <TIM_Base_SetConfig+0xdc>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d007      	beq.n	80047c4 <TIM_Base_SetConfig+0x28>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ba:	d003      	beq.n	80047c4 <TIM_Base_SetConfig+0x28>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a2f      	ldr	r2, [pc, #188]	; (800487c <TIM_Base_SetConfig+0xe0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d108      	bne.n	80047d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a27      	ldr	r2, [pc, #156]	; (8004878 <TIM_Base_SetConfig+0xdc>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d013      	beq.n	8004806 <TIM_Base_SetConfig+0x6a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e4:	d00f      	beq.n	8004806 <TIM_Base_SetConfig+0x6a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a24      	ldr	r2, [pc, #144]	; (800487c <TIM_Base_SetConfig+0xe0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00b      	beq.n	8004806 <TIM_Base_SetConfig+0x6a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a23      	ldr	r2, [pc, #140]	; (8004880 <TIM_Base_SetConfig+0xe4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d007      	beq.n	8004806 <TIM_Base_SetConfig+0x6a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a22      	ldr	r2, [pc, #136]	; (8004884 <TIM_Base_SetConfig+0xe8>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d003      	beq.n	8004806 <TIM_Base_SetConfig+0x6a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a21      	ldr	r2, [pc, #132]	; (8004888 <TIM_Base_SetConfig+0xec>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d108      	bne.n	8004818 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a0e      	ldr	r2, [pc, #56]	; (8004878 <TIM_Base_SetConfig+0xdc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00b      	beq.n	800485c <TIM_Base_SetConfig+0xc0>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a0e      	ldr	r2, [pc, #56]	; (8004880 <TIM_Base_SetConfig+0xe4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d007      	beq.n	800485c <TIM_Base_SetConfig+0xc0>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a0d      	ldr	r2, [pc, #52]	; (8004884 <TIM_Base_SetConfig+0xe8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d003      	beq.n	800485c <TIM_Base_SetConfig+0xc0>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a0c      	ldr	r2, [pc, #48]	; (8004888 <TIM_Base_SetConfig+0xec>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d103      	bne.n	8004864 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	691a      	ldr	r2, [r3, #16]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	615a      	str	r2, [r3, #20]
}
 800486a:	bf00      	nop
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	40012c00 	.word	0x40012c00
 800487c:	40000400 	.word	0x40000400
 8004880:	40014000 	.word	0x40014000
 8004884:	40014400 	.word	0x40014400
 8004888:	40014800 	.word	0x40014800

0800488c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f023 0201 	bic.w	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0303 	bic.w	r3, r3, #3
 80048c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f023 0302 	bic.w	r3, r3, #2
 80048d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a28      	ldr	r2, [pc, #160]	; (8004988 <TIM_OC1_SetConfig+0xfc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00b      	beq.n	8004904 <TIM_OC1_SetConfig+0x78>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a27      	ldr	r2, [pc, #156]	; (800498c <TIM_OC1_SetConfig+0x100>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d007      	beq.n	8004904 <TIM_OC1_SetConfig+0x78>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a26      	ldr	r2, [pc, #152]	; (8004990 <TIM_OC1_SetConfig+0x104>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_OC1_SetConfig+0x78>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a25      	ldr	r2, [pc, #148]	; (8004994 <TIM_OC1_SetConfig+0x108>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d10c      	bne.n	800491e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 0308 	bic.w	r3, r3, #8
 800490a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	4313      	orrs	r3, r2
 8004914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f023 0304 	bic.w	r3, r3, #4
 800491c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a19      	ldr	r2, [pc, #100]	; (8004988 <TIM_OC1_SetConfig+0xfc>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00b      	beq.n	800493e <TIM_OC1_SetConfig+0xb2>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a18      	ldr	r2, [pc, #96]	; (800498c <TIM_OC1_SetConfig+0x100>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <TIM_OC1_SetConfig+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a17      	ldr	r2, [pc, #92]	; (8004990 <TIM_OC1_SetConfig+0x104>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d003      	beq.n	800493e <TIM_OC1_SetConfig+0xb2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a16      	ldr	r2, [pc, #88]	; (8004994 <TIM_OC1_SetConfig+0x108>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d111      	bne.n	8004962 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800494c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	621a      	str	r2, [r3, #32]
}
 800497c:	bf00      	nop
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	40012c00 	.word	0x40012c00
 800498c:	40014000 	.word	0x40014000
 8004990:	40014400 	.word	0x40014400
 8004994:	40014800 	.word	0x40014800

08004998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f023 0210 	bic.w	r2, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	021b      	lsls	r3, r3, #8
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 0320 	bic.w	r3, r3, #32
 80049e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a24      	ldr	r2, [pc, #144]	; (8004a88 <TIM_OC2_SetConfig+0xf0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d10d      	bne.n	8004a18 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a1b      	ldr	r2, [pc, #108]	; (8004a88 <TIM_OC2_SetConfig+0xf0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00b      	beq.n	8004a38 <TIM_OC2_SetConfig+0xa0>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a1a      	ldr	r2, [pc, #104]	; (8004a8c <TIM_OC2_SetConfig+0xf4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d007      	beq.n	8004a38 <TIM_OC2_SetConfig+0xa0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a19      	ldr	r2, [pc, #100]	; (8004a90 <TIM_OC2_SetConfig+0xf8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d003      	beq.n	8004a38 <TIM_OC2_SetConfig+0xa0>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4a18      	ldr	r2, [pc, #96]	; (8004a94 <TIM_OC2_SetConfig+0xfc>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d113      	bne.n	8004a60 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a3e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a46:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	621a      	str	r2, [r3, #32]
}
 8004a7a:	bf00      	nop
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40012c00 	.word	0x40012c00
 8004a8c:	40014000 	.word	0x40014000
 8004a90:	40014400 	.word	0x40014400
 8004a94:	40014800 	.word	0x40014800

08004a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0303 	bic.w	r3, r3, #3
 8004ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a23      	ldr	r2, [pc, #140]	; (8004b84 <TIM_OC3_SetConfig+0xec>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d10d      	bne.n	8004b16 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b14:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a1a      	ldr	r2, [pc, #104]	; (8004b84 <TIM_OC3_SetConfig+0xec>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <TIM_OC3_SetConfig+0x9e>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a19      	ldr	r2, [pc, #100]	; (8004b88 <TIM_OC3_SetConfig+0xf0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <TIM_OC3_SetConfig+0x9e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a18      	ldr	r2, [pc, #96]	; (8004b8c <TIM_OC3_SetConfig+0xf4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_OC3_SetConfig+0x9e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a17      	ldr	r2, [pc, #92]	; (8004b90 <TIM_OC3_SetConfig+0xf8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d113      	bne.n	8004b5e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	621a      	str	r2, [r3, #32]
}
 8004b78:	bf00      	nop
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	40012c00 	.word	0x40012c00
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40014400 	.word	0x40014400
 8004b90:	40014800 	.word	0x40014800

08004b94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	021b      	lsls	r3, r3, #8
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	031b      	lsls	r3, r3, #12
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a16      	ldr	r2, [pc, #88]	; (8004c4c <TIM_OC4_SetConfig+0xb8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00b      	beq.n	8004c10 <TIM_OC4_SetConfig+0x7c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a15      	ldr	r2, [pc, #84]	; (8004c50 <TIM_OC4_SetConfig+0xbc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d007      	beq.n	8004c10 <TIM_OC4_SetConfig+0x7c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a14      	ldr	r2, [pc, #80]	; (8004c54 <TIM_OC4_SetConfig+0xc0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d003      	beq.n	8004c10 <TIM_OC4_SetConfig+0x7c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <TIM_OC4_SetConfig+0xc4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d109      	bne.n	8004c24 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	019b      	lsls	r3, r3, #6
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40014000 	.word	0x40014000
 8004c54:	40014400 	.word	0x40014400
 8004c58:	40014800 	.word	0x40014800

08004c5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ca0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	041b      	lsls	r3, r3, #16
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a15      	ldr	r2, [pc, #84]	; (8004d08 <TIM_OC5_SetConfig+0xac>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00b      	beq.n	8004cce <TIM_OC5_SetConfig+0x72>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <TIM_OC5_SetConfig+0xb0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d007      	beq.n	8004cce <TIM_OC5_SetConfig+0x72>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a13      	ldr	r2, [pc, #76]	; (8004d10 <TIM_OC5_SetConfig+0xb4>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_OC5_SetConfig+0x72>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a12      	ldr	r2, [pc, #72]	; (8004d14 <TIM_OC5_SetConfig+0xb8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d109      	bne.n	8004ce2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	021b      	lsls	r3, r3, #8
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	621a      	str	r2, [r3, #32]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40014000 	.word	0x40014000
 8004d10:	40014400 	.word	0x40014400
 8004d14:	40014800 	.word	0x40014800

08004d18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	021b      	lsls	r3, r3, #8
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	051b      	lsls	r3, r3, #20
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a16      	ldr	r2, [pc, #88]	; (8004dc8 <TIM_OC6_SetConfig+0xb0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00b      	beq.n	8004d8c <TIM_OC6_SetConfig+0x74>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <TIM_OC6_SetConfig+0xb4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d007      	beq.n	8004d8c <TIM_OC6_SetConfig+0x74>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <TIM_OC6_SetConfig+0xb8>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d003      	beq.n	8004d8c <TIM_OC6_SetConfig+0x74>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <TIM_OC6_SetConfig+0xbc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d109      	bne.n	8004da0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	029b      	lsls	r3, r3, #10
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	621a      	str	r2, [r3, #32]
}
 8004dba:	bf00      	nop
 8004dbc:	371c      	adds	r7, #28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40012c00 	.word	0x40012c00
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40014400 	.word	0x40014400
 8004dd4:	40014800 	.word	0x40014800

08004dd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f023 0201 	bic.w	r2, r3, #1
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f023 030a 	bic.w	r3, r3, #10
 8004e14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b087      	sub	sp, #28
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f023 0210 	bic.w	r2, r3, #16
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	031b      	lsls	r3, r3, #12
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	621a      	str	r2, [r3, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f043 0307 	orr.w	r3, r3, #7
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	609a      	str	r2, [r3, #8]
}
 8004ec0:	bf00      	nop
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
 8004ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	021a      	lsls	r2, r3, #8
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	609a      	str	r2, [r3, #8]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f20:	2302      	movs	r3, #2
 8004f22:	e054      	b.n	8004fce <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a24      	ldr	r2, [pc, #144]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d108      	bne.n	8004f60 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a17      	ldr	r2, [pc, #92]	; (8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d00e      	beq.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8c:	d009      	beq.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a13      	ldr	r2, [pc, #76]	; (8004fe0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d004      	beq.n	8004fa2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a11      	ldr	r2, [pc, #68]	; (8004fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d10c      	bne.n	8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40012c00 	.word	0x40012c00
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40014000 	.word	0x40014000

08004fe8 <log>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	ed2d 8b02 	vpush	{d8}
 8004fee:	ec55 4b10 	vmov	r4, r5, d0
 8004ff2:	f000 f839 	bl	8005068 <__ieee754_log>
 8004ff6:	4622      	mov	r2, r4
 8004ff8:	462b      	mov	r3, r5
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	eeb0 8a40 	vmov.f32	s16, s0
 8005002:	eef0 8a60 	vmov.f32	s17, s1
 8005006:	f7fb fd35 	bl	8000a74 <__aeabi_dcmpun>
 800500a:	b998      	cbnz	r0, 8005034 <log+0x4c>
 800500c:	2200      	movs	r2, #0
 800500e:	2300      	movs	r3, #0
 8005010:	4620      	mov	r0, r4
 8005012:	4629      	mov	r1, r5
 8005014:	f7fb fd24 	bl	8000a60 <__aeabi_dcmpgt>
 8005018:	b960      	cbnz	r0, 8005034 <log+0x4c>
 800501a:	2200      	movs	r2, #0
 800501c:	2300      	movs	r3, #0
 800501e:	4620      	mov	r0, r4
 8005020:	4629      	mov	r1, r5
 8005022:	f7fb fcf5 	bl	8000a10 <__aeabi_dcmpeq>
 8005026:	b160      	cbz	r0, 8005042 <log+0x5a>
 8005028:	f000 f9e2 	bl	80053f0 <__errno>
 800502c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8005058 <log+0x70>
 8005030:	2322      	movs	r3, #34	; 0x22
 8005032:	6003      	str	r3, [r0, #0]
 8005034:	eeb0 0a48 	vmov.f32	s0, s16
 8005038:	eef0 0a68 	vmov.f32	s1, s17
 800503c:	ecbd 8b02 	vpop	{d8}
 8005040:	bd38      	pop	{r3, r4, r5, pc}
 8005042:	f000 f9d5 	bl	80053f0 <__errno>
 8005046:	ecbd 8b02 	vpop	{d8}
 800504a:	2321      	movs	r3, #33	; 0x21
 800504c:	6003      	str	r3, [r0, #0]
 800504e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005052:	4803      	ldr	r0, [pc, #12]	; (8005060 <log+0x78>)
 8005054:	f000 b9c4 	b.w	80053e0 <nan>
 8005058:	00000000 	.word	0x00000000
 800505c:	fff00000 	.word	0xfff00000
 8005060:	0800549c 	.word	0x0800549c
 8005064:	00000000 	.word	0x00000000

08005068 <__ieee754_log>:
 8005068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506c:	ec51 0b10 	vmov	r0, r1, d0
 8005070:	ed2d 8b04 	vpush	{d8-d9}
 8005074:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005078:	b083      	sub	sp, #12
 800507a:	460d      	mov	r5, r1
 800507c:	da29      	bge.n	80050d2 <__ieee754_log+0x6a>
 800507e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005082:	4303      	orrs	r3, r0
 8005084:	ee10 2a10 	vmov	r2, s0
 8005088:	d10c      	bne.n	80050a4 <__ieee754_log+0x3c>
 800508a:	49cf      	ldr	r1, [pc, #828]	; (80053c8 <__ieee754_log+0x360>)
 800508c:	2200      	movs	r2, #0
 800508e:	2300      	movs	r3, #0
 8005090:	2000      	movs	r0, #0
 8005092:	f7fb fb7f 	bl	8000794 <__aeabi_ddiv>
 8005096:	ec41 0b10 	vmov	d0, r0, r1
 800509a:	b003      	add	sp, #12
 800509c:	ecbd 8b04 	vpop	{d8-d9}
 80050a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a4:	2900      	cmp	r1, #0
 80050a6:	da05      	bge.n	80050b4 <__ieee754_log+0x4c>
 80050a8:	460b      	mov	r3, r1
 80050aa:	f7fb f891 	bl	80001d0 <__aeabi_dsub>
 80050ae:	2200      	movs	r2, #0
 80050b0:	2300      	movs	r3, #0
 80050b2:	e7ee      	b.n	8005092 <__ieee754_log+0x2a>
 80050b4:	4bc5      	ldr	r3, [pc, #788]	; (80053cc <__ieee754_log+0x364>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	f7fb fa42 	bl	8000540 <__aeabi_dmul>
 80050bc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80050c0:	460d      	mov	r5, r1
 80050c2:	4ac3      	ldr	r2, [pc, #780]	; (80053d0 <__ieee754_log+0x368>)
 80050c4:	4295      	cmp	r5, r2
 80050c6:	dd06      	ble.n	80050d6 <__ieee754_log+0x6e>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	f7fb f882 	bl	80001d4 <__adddf3>
 80050d0:	e7e1      	b.n	8005096 <__ieee754_log+0x2e>
 80050d2:	2300      	movs	r3, #0
 80050d4:	e7f5      	b.n	80050c2 <__ieee754_log+0x5a>
 80050d6:	152c      	asrs	r4, r5, #20
 80050d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80050dc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80050e0:	441c      	add	r4, r3
 80050e2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80050e6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80050ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050ee:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80050f2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80050f6:	ea42 0105 	orr.w	r1, r2, r5
 80050fa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80050fe:	2200      	movs	r2, #0
 8005100:	4bb4      	ldr	r3, [pc, #720]	; (80053d4 <__ieee754_log+0x36c>)
 8005102:	f7fb f865 	bl	80001d0 <__aeabi_dsub>
 8005106:	1cab      	adds	r3, r5, #2
 8005108:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800510c:	2b02      	cmp	r3, #2
 800510e:	4682      	mov	sl, r0
 8005110:	468b      	mov	fp, r1
 8005112:	f04f 0200 	mov.w	r2, #0
 8005116:	dc53      	bgt.n	80051c0 <__ieee754_log+0x158>
 8005118:	2300      	movs	r3, #0
 800511a:	f7fb fc79 	bl	8000a10 <__aeabi_dcmpeq>
 800511e:	b1d0      	cbz	r0, 8005156 <__ieee754_log+0xee>
 8005120:	2c00      	cmp	r4, #0
 8005122:	f000 8122 	beq.w	800536a <__ieee754_log+0x302>
 8005126:	4620      	mov	r0, r4
 8005128:	f7fb f9a0 	bl	800046c <__aeabi_i2d>
 800512c:	a390      	add	r3, pc, #576	; (adr r3, 8005370 <__ieee754_log+0x308>)
 800512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005132:	4606      	mov	r6, r0
 8005134:	460f      	mov	r7, r1
 8005136:	f7fb fa03 	bl	8000540 <__aeabi_dmul>
 800513a:	a38f      	add	r3, pc, #572	; (adr r3, 8005378 <__ieee754_log+0x310>)
 800513c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005140:	4604      	mov	r4, r0
 8005142:	460d      	mov	r5, r1
 8005144:	4630      	mov	r0, r6
 8005146:	4639      	mov	r1, r7
 8005148:	f7fb f9fa 	bl	8000540 <__aeabi_dmul>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4620      	mov	r0, r4
 8005152:	4629      	mov	r1, r5
 8005154:	e7ba      	b.n	80050cc <__ieee754_log+0x64>
 8005156:	a38a      	add	r3, pc, #552	; (adr r3, 8005380 <__ieee754_log+0x318>)
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	4650      	mov	r0, sl
 800515e:	4659      	mov	r1, fp
 8005160:	f7fb f9ee 	bl	8000540 <__aeabi_dmul>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	2000      	movs	r0, #0
 800516a:	499b      	ldr	r1, [pc, #620]	; (80053d8 <__ieee754_log+0x370>)
 800516c:	f7fb f830 	bl	80001d0 <__aeabi_dsub>
 8005170:	4652      	mov	r2, sl
 8005172:	4606      	mov	r6, r0
 8005174:	460f      	mov	r7, r1
 8005176:	465b      	mov	r3, fp
 8005178:	4650      	mov	r0, sl
 800517a:	4659      	mov	r1, fp
 800517c:	f7fb f9e0 	bl	8000540 <__aeabi_dmul>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4630      	mov	r0, r6
 8005186:	4639      	mov	r1, r7
 8005188:	f7fb f9da 	bl	8000540 <__aeabi_dmul>
 800518c:	4606      	mov	r6, r0
 800518e:	460f      	mov	r7, r1
 8005190:	b914      	cbnz	r4, 8005198 <__ieee754_log+0x130>
 8005192:	4632      	mov	r2, r6
 8005194:	463b      	mov	r3, r7
 8005196:	e0a2      	b.n	80052de <__ieee754_log+0x276>
 8005198:	4620      	mov	r0, r4
 800519a:	f7fb f967 	bl	800046c <__aeabi_i2d>
 800519e:	a374      	add	r3, pc, #464	; (adr r3, 8005370 <__ieee754_log+0x308>)
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	4680      	mov	r8, r0
 80051a6:	4689      	mov	r9, r1
 80051a8:	f7fb f9ca 	bl	8000540 <__aeabi_dmul>
 80051ac:	a372      	add	r3, pc, #456	; (adr r3, 8005378 <__ieee754_log+0x310>)
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	4604      	mov	r4, r0
 80051b4:	460d      	mov	r5, r1
 80051b6:	4640      	mov	r0, r8
 80051b8:	4649      	mov	r1, r9
 80051ba:	f7fb f9c1 	bl	8000540 <__aeabi_dmul>
 80051be:	e0a7      	b.n	8005310 <__ieee754_log+0x2a8>
 80051c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051c4:	f7fb f806 	bl	80001d4 <__adddf3>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4650      	mov	r0, sl
 80051ce:	4659      	mov	r1, fp
 80051d0:	f7fb fae0 	bl	8000794 <__aeabi_ddiv>
 80051d4:	ec41 0b18 	vmov	d8, r0, r1
 80051d8:	4620      	mov	r0, r4
 80051da:	f7fb f947 	bl	800046c <__aeabi_i2d>
 80051de:	ec53 2b18 	vmov	r2, r3, d8
 80051e2:	ec41 0b19 	vmov	d9, r0, r1
 80051e6:	ec51 0b18 	vmov	r0, r1, d8
 80051ea:	f7fb f9a9 	bl	8000540 <__aeabi_dmul>
 80051ee:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80051f2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4680      	mov	r8, r0
 80051fe:	4689      	mov	r9, r1
 8005200:	f7fb f99e 	bl	8000540 <__aeabi_dmul>
 8005204:	a360      	add	r3, pc, #384	; (adr r3, 8005388 <__ieee754_log+0x320>)
 8005206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520a:	4606      	mov	r6, r0
 800520c:	460f      	mov	r7, r1
 800520e:	f7fb f997 	bl	8000540 <__aeabi_dmul>
 8005212:	a35f      	add	r3, pc, #380	; (adr r3, 8005390 <__ieee754_log+0x328>)
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f7fa ffdc 	bl	80001d4 <__adddf3>
 800521c:	4632      	mov	r2, r6
 800521e:	463b      	mov	r3, r7
 8005220:	f7fb f98e 	bl	8000540 <__aeabi_dmul>
 8005224:	a35c      	add	r3, pc, #368	; (adr r3, 8005398 <__ieee754_log+0x330>)
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f7fa ffd3 	bl	80001d4 <__adddf3>
 800522e:	4632      	mov	r2, r6
 8005230:	463b      	mov	r3, r7
 8005232:	f7fb f985 	bl	8000540 <__aeabi_dmul>
 8005236:	a35a      	add	r3, pc, #360	; (adr r3, 80053a0 <__ieee754_log+0x338>)
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	f7fa ffca 	bl	80001d4 <__adddf3>
 8005240:	4642      	mov	r2, r8
 8005242:	464b      	mov	r3, r9
 8005244:	f7fb f97c 	bl	8000540 <__aeabi_dmul>
 8005248:	a357      	add	r3, pc, #348	; (adr r3, 80053a8 <__ieee754_log+0x340>)
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	4680      	mov	r8, r0
 8005250:	4689      	mov	r9, r1
 8005252:	4630      	mov	r0, r6
 8005254:	4639      	mov	r1, r7
 8005256:	f7fb f973 	bl	8000540 <__aeabi_dmul>
 800525a:	a355      	add	r3, pc, #340	; (adr r3, 80053b0 <__ieee754_log+0x348>)
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	f7fa ffb8 	bl	80001d4 <__adddf3>
 8005264:	4632      	mov	r2, r6
 8005266:	463b      	mov	r3, r7
 8005268:	f7fb f96a 	bl	8000540 <__aeabi_dmul>
 800526c:	a352      	add	r3, pc, #328	; (adr r3, 80053b8 <__ieee754_log+0x350>)
 800526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005272:	f7fa ffaf 	bl	80001d4 <__adddf3>
 8005276:	4632      	mov	r2, r6
 8005278:	463b      	mov	r3, r7
 800527a:	f7fb f961 	bl	8000540 <__aeabi_dmul>
 800527e:	460b      	mov	r3, r1
 8005280:	4602      	mov	r2, r0
 8005282:	4649      	mov	r1, r9
 8005284:	4640      	mov	r0, r8
 8005286:	f7fa ffa5 	bl	80001d4 <__adddf3>
 800528a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800528e:	9b01      	ldr	r3, [sp, #4]
 8005290:	3551      	adds	r5, #81	; 0x51
 8005292:	431d      	orrs	r5, r3
 8005294:	2d00      	cmp	r5, #0
 8005296:	4680      	mov	r8, r0
 8005298:	4689      	mov	r9, r1
 800529a:	dd48      	ble.n	800532e <__ieee754_log+0x2c6>
 800529c:	4b4e      	ldr	r3, [pc, #312]	; (80053d8 <__ieee754_log+0x370>)
 800529e:	2200      	movs	r2, #0
 80052a0:	4650      	mov	r0, sl
 80052a2:	4659      	mov	r1, fp
 80052a4:	f7fb f94c 	bl	8000540 <__aeabi_dmul>
 80052a8:	4652      	mov	r2, sl
 80052aa:	465b      	mov	r3, fp
 80052ac:	f7fb f948 	bl	8000540 <__aeabi_dmul>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4606      	mov	r6, r0
 80052b6:	460f      	mov	r7, r1
 80052b8:	4640      	mov	r0, r8
 80052ba:	4649      	mov	r1, r9
 80052bc:	f7fa ff8a 	bl	80001d4 <__adddf3>
 80052c0:	ec53 2b18 	vmov	r2, r3, d8
 80052c4:	f7fb f93c 	bl	8000540 <__aeabi_dmul>
 80052c8:	4680      	mov	r8, r0
 80052ca:	4689      	mov	r9, r1
 80052cc:	b964      	cbnz	r4, 80052e8 <__ieee754_log+0x280>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4630      	mov	r0, r6
 80052d4:	4639      	mov	r1, r7
 80052d6:	f7fa ff7b 	bl	80001d0 <__aeabi_dsub>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4650      	mov	r0, sl
 80052e0:	4659      	mov	r1, fp
 80052e2:	f7fa ff75 	bl	80001d0 <__aeabi_dsub>
 80052e6:	e6d6      	b.n	8005096 <__ieee754_log+0x2e>
 80052e8:	a321      	add	r3, pc, #132	; (adr r3, 8005370 <__ieee754_log+0x308>)
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	ec51 0b19 	vmov	r0, r1, d9
 80052f2:	f7fb f925 	bl	8000540 <__aeabi_dmul>
 80052f6:	a320      	add	r3, pc, #128	; (adr r3, 8005378 <__ieee754_log+0x310>)
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	4604      	mov	r4, r0
 80052fe:	460d      	mov	r5, r1
 8005300:	ec51 0b19 	vmov	r0, r1, d9
 8005304:	f7fb f91c 	bl	8000540 <__aeabi_dmul>
 8005308:	4642      	mov	r2, r8
 800530a:	464b      	mov	r3, r9
 800530c:	f7fa ff62 	bl	80001d4 <__adddf3>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4630      	mov	r0, r6
 8005316:	4639      	mov	r1, r7
 8005318:	f7fa ff5a 	bl	80001d0 <__aeabi_dsub>
 800531c:	4652      	mov	r2, sl
 800531e:	465b      	mov	r3, fp
 8005320:	f7fa ff56 	bl	80001d0 <__aeabi_dsub>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4620      	mov	r0, r4
 800532a:	4629      	mov	r1, r5
 800532c:	e7d9      	b.n	80052e2 <__ieee754_log+0x27a>
 800532e:	4602      	mov	r2, r0
 8005330:	460b      	mov	r3, r1
 8005332:	4650      	mov	r0, sl
 8005334:	4659      	mov	r1, fp
 8005336:	f7fa ff4b 	bl	80001d0 <__aeabi_dsub>
 800533a:	ec53 2b18 	vmov	r2, r3, d8
 800533e:	f7fb f8ff 	bl	8000540 <__aeabi_dmul>
 8005342:	4606      	mov	r6, r0
 8005344:	460f      	mov	r7, r1
 8005346:	2c00      	cmp	r4, #0
 8005348:	f43f af23 	beq.w	8005192 <__ieee754_log+0x12a>
 800534c:	a308      	add	r3, pc, #32	; (adr r3, 8005370 <__ieee754_log+0x308>)
 800534e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005352:	ec51 0b19 	vmov	r0, r1, d9
 8005356:	f7fb f8f3 	bl	8000540 <__aeabi_dmul>
 800535a:	a307      	add	r3, pc, #28	; (adr r3, 8005378 <__ieee754_log+0x310>)
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	4604      	mov	r4, r0
 8005362:	460d      	mov	r5, r1
 8005364:	ec51 0b19 	vmov	r0, r1, d9
 8005368:	e727      	b.n	80051ba <__ieee754_log+0x152>
 800536a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80053c0 <__ieee754_log+0x358>
 800536e:	e694      	b.n	800509a <__ieee754_log+0x32>
 8005370:	fee00000 	.word	0xfee00000
 8005374:	3fe62e42 	.word	0x3fe62e42
 8005378:	35793c76 	.word	0x35793c76
 800537c:	3dea39ef 	.word	0x3dea39ef
 8005380:	55555555 	.word	0x55555555
 8005384:	3fd55555 	.word	0x3fd55555
 8005388:	df3e5244 	.word	0xdf3e5244
 800538c:	3fc2f112 	.word	0x3fc2f112
 8005390:	96cb03de 	.word	0x96cb03de
 8005394:	3fc74664 	.word	0x3fc74664
 8005398:	94229359 	.word	0x94229359
 800539c:	3fd24924 	.word	0x3fd24924
 80053a0:	55555593 	.word	0x55555593
 80053a4:	3fe55555 	.word	0x3fe55555
 80053a8:	d078c69f 	.word	0xd078c69f
 80053ac:	3fc39a09 	.word	0x3fc39a09
 80053b0:	1d8e78af 	.word	0x1d8e78af
 80053b4:	3fcc71c5 	.word	0x3fcc71c5
 80053b8:	9997fa04 	.word	0x9997fa04
 80053bc:	3fd99999 	.word	0x3fd99999
	...
 80053c8:	c3500000 	.word	0xc3500000
 80053cc:	43500000 	.word	0x43500000
 80053d0:	7fefffff 	.word	0x7fefffff
 80053d4:	3ff00000 	.word	0x3ff00000
 80053d8:	3fe00000 	.word	0x3fe00000
 80053dc:	00000000 	.word	0x00000000

080053e0 <nan>:
 80053e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80053e8 <nan+0x8>
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	00000000 	.word	0x00000000
 80053ec:	7ff80000 	.word	0x7ff80000

080053f0 <__errno>:
 80053f0:	4b01      	ldr	r3, [pc, #4]	; (80053f8 <__errno+0x8>)
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	2000000c 	.word	0x2000000c

080053fc <__libc_init_array>:
 80053fc:	b570      	push	{r4, r5, r6, lr}
 80053fe:	4d0d      	ldr	r5, [pc, #52]	; (8005434 <__libc_init_array+0x38>)
 8005400:	4c0d      	ldr	r4, [pc, #52]	; (8005438 <__libc_init_array+0x3c>)
 8005402:	1b64      	subs	r4, r4, r5
 8005404:	10a4      	asrs	r4, r4, #2
 8005406:	2600      	movs	r6, #0
 8005408:	42a6      	cmp	r6, r4
 800540a:	d109      	bne.n	8005420 <__libc_init_array+0x24>
 800540c:	4d0b      	ldr	r5, [pc, #44]	; (800543c <__libc_init_array+0x40>)
 800540e:	4c0c      	ldr	r4, [pc, #48]	; (8005440 <__libc_init_array+0x44>)
 8005410:	f000 f820 	bl	8005454 <_init>
 8005414:	1b64      	subs	r4, r4, r5
 8005416:	10a4      	asrs	r4, r4, #2
 8005418:	2600      	movs	r6, #0
 800541a:	42a6      	cmp	r6, r4
 800541c:	d105      	bne.n	800542a <__libc_init_array+0x2e>
 800541e:	bd70      	pop	{r4, r5, r6, pc}
 8005420:	f855 3b04 	ldr.w	r3, [r5], #4
 8005424:	4798      	blx	r3
 8005426:	3601      	adds	r6, #1
 8005428:	e7ee      	b.n	8005408 <__libc_init_array+0xc>
 800542a:	f855 3b04 	ldr.w	r3, [r5], #4
 800542e:	4798      	blx	r3
 8005430:	3601      	adds	r6, #1
 8005432:	e7f2      	b.n	800541a <__libc_init_array+0x1e>
 8005434:	080054a0 	.word	0x080054a0
 8005438:	080054a0 	.word	0x080054a0
 800543c:	080054a0 	.word	0x080054a0
 8005440:	080054a4 	.word	0x080054a4

08005444 <memset>:
 8005444:	4402      	add	r2, r0
 8005446:	4603      	mov	r3, r0
 8005448:	4293      	cmp	r3, r2
 800544a:	d100      	bne.n	800544e <memset+0xa>
 800544c:	4770      	bx	lr
 800544e:	f803 1b01 	strb.w	r1, [r3], #1
 8005452:	e7f9      	b.n	8005448 <memset+0x4>

08005454 <_init>:
 8005454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005456:	bf00      	nop
 8005458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800545a:	bc08      	pop	{r3}
 800545c:	469e      	mov	lr, r3
 800545e:	4770      	bx	lr

08005460 <_fini>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	bf00      	nop
 8005464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005466:	bc08      	pop	{r3}
 8005468:	469e      	mov	lr, r3
 800546a:	4770      	bx	lr
