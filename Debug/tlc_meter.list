
tlc_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005298  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005428  08005428  00015428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005500  08005500  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005500  08005500  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005500  08005500  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005500  08005500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005504  08005504  00015504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000088  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f8  200000f8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a391  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e45  00000000  00000000  0002a431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  0002c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000690  00000000  00000000  0002c9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e65a  00000000  00000000  0002d078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000093c7  00000000  00000000  0004b6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4b11  00000000  00000000  00054a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f95aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002650  00000000  00000000  000f95fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005410 	.word	0x08005410

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005410 	.word	0x08005410

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	{ return __r; }
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b96:	4610      	mov	r0, r2
 8000b98:	4619      	mov	r1, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <_Z9capa_calcNSt6chrono8durationIxSt5ratioILx1ELx1000EEEE3Resmm>:

using namespace std::chrono;

bool adc_ready = false;

Capa capa_calc(std::chrono::milliseconds charge_time, Res res, uint32_t vc0, uint32_t vc) {
 8000ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000bb0:	e9c7 2300 	strd	r2, r3, [r7]
	double ln = log((double)(4096 - vc0) / (double)(4096 - vc - vc0));
 8000bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bb6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fc9a 	bl	80004f4 <__aeabi_ui2d>
 8000bc0:	4682      	mov	sl, r0
 8000bc2:	468b      	mov	fp, r1
 8000bc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bc8:	4413      	add	r3, r2
 8000bca:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fc90 	bl	80004f4 <__aeabi_ui2d>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	4650      	mov	r0, sl
 8000bda:	4659      	mov	r1, fp
 8000bdc:	f7ff fe2e 	bl	800083c <__aeabi_ddiv>
 8000be0:	4602      	mov	r2, r0
 8000be2:	460b      	mov	r3, r1
 8000be4:	ec43 2b17 	vmov	d7, r2, r3
 8000be8:	eeb0 0a47 	vmov.f32	s0, s14
 8000bec:	eef0 0a67 	vmov.f32	s1, s15
 8000bf0:	f003 fa4a 	bl	8004088 <log>
 8000bf4:	ed87 0b04 	vstr	d0, [r7, #16]
	return Capa::uf(((charge_time.count() * 1000 )/ (ln * res)) * 1000 * 1000);
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ffc3 	bl	8000b88 <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv>
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
 8000c06:	f04f 0a00 	mov.w	sl, #0
 8000c0a:	f04f 0b00 	mov.w	fp, #0
 8000c0e:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8000c12:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8000c16:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8000c1a:	4652      	mov	r2, sl
 8000c1c:	465b      	mov	r3, fp
 8000c1e:	1a14      	subs	r4, r2, r0
 8000c20:	eb63 0501 	sbc.w	r5, r3, r1
 8000c24:	f04f 0200 	mov.w	r2, #0
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	00ab      	lsls	r3, r5, #2
 8000c2e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8000c32:	00a2      	lsls	r2, r4, #2
 8000c34:	4614      	mov	r4, r2
 8000c36:	461d      	mov	r5, r3
 8000c38:	eb14 0800 	adds.w	r8, r4, r0
 8000c3c:	eb45 0901 	adc.w	r9, r5, r1
 8000c40:	f04f 0200 	mov.w	r2, #0
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c54:	4690      	mov	r8, r2
 8000c56:	4699      	mov	r9, r3
 8000c58:	4642      	mov	r2, r8
 8000c5a:	464b      	mov	r3, r9
 8000c5c:	4610      	mov	r0, r2
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f7ff fc94 	bl	800058c <__aeabi_l2d>
 8000c64:	4604      	mov	r4, r0
 8000c66:	460d      	mov	r5, r1
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f8d4 	bl	8000e18 <_ZN4UnitIyEcvyEv>
 8000c70:	4602      	mov	r2, r0
 8000c72:	460b      	mov	r3, r1
 8000c74:	4610      	mov	r0, r2
 8000c76:	4619      	mov	r1, r3
 8000c78:	f7ff fc80 	bl	800057c <__aeabi_ul2d>
 8000c7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c80:	f7ff fcb2 	bl	80005e8 <__aeabi_dmul>
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	4620      	mov	r0, r4
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	f7ff fdd6 	bl	800083c <__aeabi_ddiv>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	4610      	mov	r0, r2
 8000c96:	4619      	mov	r1, r3
 8000c98:	f04f 0200 	mov.w	r2, #0
 8000c9c:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <_Z9capa_calcNSt6chrono8durationIxSt5ratioILx1ELx1000EEEE3Resmm+0x13c>)
 8000c9e:	f7ff fca3 	bl	80005e8 <__aeabi_dmul>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	4610      	mov	r0, r2
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f04f 0200 	mov.w	r2, #0
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <_Z9capa_calcNSt6chrono8durationIxSt5ratioILx1ELx1000EEEE3Resmm+0x13c>)
 8000cb0:	f7ff fc9a 	bl	80005e8 <__aeabi_dmul>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	ec43 2b17 	vmov	d7, r2, r3
 8000cbc:	eeb0 0a47 	vmov.f32	s0, s14
 8000cc0:	eef0 0a67 	vmov.f32	s1, s15
 8000cc4:	f000 fbd2 	bl	800146c <_ZN4Capa2ufEe>
 8000cc8:	eeb0 7a40 	vmov.f32	s14, s0
 8000ccc:	eef0 7a60 	vmov.f32	s15, s1
}
 8000cd0:	eeb0 0a47 	vmov.f32	s0, s14
 8000cd4:	eef0 0a67 	vmov.f32	s1, s15
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000ce0:	408f4000 	.word	0x408f4000

08000ce4 <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	80fb      	strh	r3, [r7, #6]
	if (pin == GPIO_PIN_10) {
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf4:	d10b      	bne.n	8000d0e <HAL_GPIO_EXTI_Callback+0x2a>
		GPIO_PinState pin_val = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000cf6:	2120      	movs	r1, #32
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <HAL_GPIO_EXTI_Callback+0x34>)
 8000cfa:	f001 fe31 	bl	8002960 <HAL_GPIO_ReadPin>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	73fb      	strb	r3, [r7, #15]
		if (pin_val == GPIO_PIN_RESET) {
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <HAL_GPIO_EXTI_Callback+0x2a>
			adc_ready = true;
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <HAL_GPIO_EXTI_Callback+0x38>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	2000008c 	.word	0x2000008c

08000d20 <capameter>:

extern "C" void capameter(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af02      	add	r7, sp, #8
	  if (adc_ready) {
 8000d26:	4b38      	ldr	r3, [pc, #224]	; (8000e08 <capameter+0xe8>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d068      	beq.n	8000e00 <capameter+0xe0>
		  uint32_t init_val, val;

		  adc_ready = false;
 8000d2e:	4b36      	ldr	r3, [pc, #216]	; (8000e08 <capameter+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start(&hadc2);
 8000d34:	4835      	ldr	r0, [pc, #212]	; (8000e0c <capameter+0xec>)
 8000d36:	f000 fe73 	bl	8001a20 <HAL_ADC_Start>
		  if (HAL_ADC_PollForConversion(&hadc2, 1000) != HAL_OK) return;
 8000d3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d3e:	4833      	ldr	r0, [pc, #204]	; (8000e0c <capameter+0xec>)
 8000d40:	f000 ff24 	bl	8001b8c <HAL_ADC_PollForConversion>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	bf14      	ite	ne
 8000d4a:	2301      	movne	r3, #1
 8000d4c:	2300      	moveq	r3, #0
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d152      	bne.n	8000dfa <capameter+0xda>
		  init_val = HAL_ADC_GetValue(&hadc2);
 8000d54:	482d      	ldr	r0, [pc, #180]	; (8000e0c <capameter+0xec>)
 8000d56:	f000 ffe7 	bl	8001d28 <HAL_ADC_GetValue>
 8000d5a:	61f8      	str	r0, [r7, #28]

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2120      	movs	r1, #32
 8000d60:	482b      	ldr	r0, [pc, #172]	; (8000e10 <capameter+0xf0>)
 8000d62:	f001 fe15 	bl	8002990 <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 8000d66:	200a      	movs	r0, #10
 8000d68:	f000 fca4 	bl	80016b4 <HAL_Delay>
		  HAL_ADC_Start(&hadc2);
 8000d6c:	4827      	ldr	r0, [pc, #156]	; (8000e0c <capameter+0xec>)
 8000d6e:	f000 fe57 	bl	8001a20 <HAL_ADC_Start>
		  if (HAL_ADC_PollForConversion(&hadc2, 1000) != HAL_OK) return;
 8000d72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d76:	4825      	ldr	r0, [pc, #148]	; (8000e0c <capameter+0xec>)
 8000d78:	f000 ff08 	bl	8001b8c <HAL_ADC_PollForConversion>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	bf14      	ite	ne
 8000d82:	2301      	movne	r3, #1
 8000d84:	2300      	moveq	r3, #0
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d138      	bne.n	8000dfe <capameter+0xde>

		  val = HAL_ADC_GetValue(&hadc2);
 8000d8c:	481f      	ldr	r0, [pc, #124]	; (8000e0c <capameter+0xec>)
 8000d8e:	f000 ffcb 	bl	8001d28 <HAL_ADC_GetValue>
 8000d92:	61b8      	str	r0, [r7, #24]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2120      	movs	r1, #32
 8000d98:	481d      	ldr	r0, [pc, #116]	; (8000e10 <capameter+0xf0>)
 8000d9a:	f001 fdf9 	bl	8002990 <HAL_GPIO_WritePin>
		  Capa capa = capa_calc(10ms, 10_kOhm, init_val, val);
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f846 	bl	8000e34 <_ZNSt8literals15chrono_literalsli2msIJLc49ELc48EEEENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEv>
 8000da8:	f107 0110 	add.w	r1, r7, #16
 8000dac:	f04f 020a 	mov.w	r2, #10
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	4608      	mov	r0, r1
 8000db6:	f000 fb89 	bl	80014cc <_Zli5_kOhmy>
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	9301      	str	r3, [sp, #4]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000dc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dca:	f7ff feeb 	bl	8000ba4 <_Z9capa_calcNSt6chrono8durationIxSt5ratioILx1ELx1000EEEE3Resmm>
 8000dce:	eeb0 7a40 	vmov.f32	s14, s0
 8000dd2:	eef0 7a60 	vmov.f32	s15, s1
 8000dd6:	ed87 7b00 	vstr	d7, [r7]
		  printf("Capacitance: %d", (unsigned int)(capa));
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f000 f836 	bl	8000e4e <_ZN4UnitIeEcveEv>
 8000de2:	ec53 2b10 	vmov	r2, r3, d0
 8000de6:	4610      	mov	r0, r2
 8000de8:	4619      	mov	r1, r3
 8000dea:	f7ff fead 	bl	8000b48 <__aeabi_d2uiz>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4619      	mov	r1, r3
 8000df2:	4808      	ldr	r0, [pc, #32]	; (8000e14 <capameter+0xf4>)
 8000df4:	f003 fb7e 	bl	80044f4 <iprintf>
 8000df8:	e002      	b.n	8000e00 <capameter+0xe0>
		  if (HAL_ADC_PollForConversion(&hadc2, 1000) != HAL_OK) return;
 8000dfa:	bf00      	nop
 8000dfc:	e000      	b.n	8000e00 <capameter+0xe0>
		  if (HAL_ADC_PollForConversion(&hadc2, 1000) != HAL_OK) return;
 8000dfe:	bf00      	nop
	  }
}
 8000e00:	3720      	adds	r7, #32
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000008c 	.word	0x2000008c
 8000e0c:	20000090 	.word	0x20000090
 8000e10:	48000400 	.word	0x48000400
 8000e14:	08005428 	.word	0x08005428

08000e18 <_ZN4UnitIyEcvyEv>:

template <class Data>
struct Unit {
	Data val;

	operator Data() {
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
		return val;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
	}
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_ZNSt8literals15chrono_literalsli2msIJLc49ELc48EEEENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEv>:
    { return chrono::duration<long double, milli>{__msecs}; }

    /// Literal suffix for durations of type `std::chrono::milliseconds`
    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f817 	bl	8000e72 <_ZNSt8literals15chrono_literals16__check_overflowINSt6chrono8durationIxSt5ratioILx1ELx1000EEEEJLc49ELc48EEEET_v>
 8000e44:	bf00      	nop
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <_ZN4UnitIeEcveEv>:
	operator Data() {
 8000e4e:	b480      	push	{r7}
 8000e50:	b083      	sub	sp, #12
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
		return val;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5c:	ec43 2b17 	vmov	d7, r2, r3
	}
 8000e60:	eeb0 0a47 	vmov.f32	s0, s14
 8000e64:	eef0 0a67 	vmov.f32	s1, s15
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <_ZNSt8literals15chrono_literals16__check_overflowINSt6chrono8durationIxSt5ratioILx1ELx1000EEEEJLc49ELc48EEEET_v>:
      constexpr _Dur __check_overflow()
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
 8000e7a:	f04f 020a 	mov.w	r2, #10
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f804 	bl	8000e9a <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000EEEC1IxvEERKT_>
      }
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000EEEC1IxvEERKT_>:
	  constexpr explicit duration(const _Rep2& __rep)
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	e9c1 2300 	strd	r2, r3, [r1]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec2:	f000 fb91 	bl	80015e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec6:	f000 f809 	bl	8000edc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eca:	f000 f8bf 	bl	800104c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000ece:	f000 f85f 	bl	8000f90 <MX_ADC2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  capameter();
 8000ed2:	f7ff ff25 	bl	8000d20 <capameter>
	  selfmeter();
 8000ed6:	f000 f914 	bl	8001102 <selfmeter>
	  capameter();
 8000eda:	e7fa      	b.n	8000ed2 <main+0x14>

08000edc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b096      	sub	sp, #88	; 0x58
 8000ee0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ee6:	2228      	movs	r2, #40	; 0x28
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f003 fafa 	bl	80044e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
 8000f0c:	611a      	str	r2, [r3, #16]
 8000f0e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f10:	2302      	movs	r3, #2
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f14:	2301      	movs	r3, #1
 8000f16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f18:	2310      	movs	r3, #16
 8000f1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f20:	2300      	movs	r3, #0
 8000f22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f24:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f28:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fd5e 	bl	80029f0 <HAL_RCC_OscConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000f3a:	f000 f8dd 	bl	80010f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3e:	230f      	movs	r3, #15
 8000f40:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f42:	2302      	movs	r3, #2
 8000f44:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fd86 	bl	8003a6c <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f66:	f000 f8c7 	bl	80010f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f72:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 ff5e 	bl	8003e38 <HAL_RCCEx_PeriphCLKConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f82:	f000 f8b9 	bl	80010f8 <Error_Handler>
  }
}
 8000f86:	bf00      	nop
 8000f88:	3758      	adds	r7, #88	; 0x58
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	463b      	mov	r3, r7
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
 8000fa4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000fa6:	4b27      	ldr	r3, [pc, #156]	; (8001044 <MX_ADC2_Init+0xb4>)
 8000fa8:	4a27      	ldr	r2, [pc, #156]	; (8001048 <MX_ADC2_Init+0xb8>)
 8000faa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fac:	4b25      	ldr	r3, [pc, #148]	; (8001044 <MX_ADC2_Init+0xb4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb2:	4b24      	ldr	r3, [pc, #144]	; (8001044 <MX_ADC2_Init+0xb4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <MX_ADC2_Init+0xb4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000fbe:	4b21      	ldr	r3, [pc, #132]	; (8001044 <MX_ADC2_Init+0xb4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <MX_ADC2_Init+0xb4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <MX_ADC2_Init+0xb4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <MX_ADC2_Init+0xb4>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <MX_ADC2_Init+0xb4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000fde:	4b19      	ldr	r3, [pc, #100]	; (8001044 <MX_ADC2_Init+0xb4>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <MX_ADC2_Init+0xb4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <MX_ADC2_Init+0xb4>)
 8000fee:	2204      	movs	r2, #4
 8000ff0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	; (8001044 <MX_ADC2_Init+0xb4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <MX_ADC2_Init+0xb4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ffe:	4811      	ldr	r0, [pc, #68]	; (8001044 <MX_ADC2_Init+0xb4>)
 8001000:	f000 fb7c 	bl	80016fc <HAL_ADC_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800100a:	f000 f875 	bl	80010f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800100e:	2301      	movs	r3, #1
 8001010:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001012:	2301      	movs	r3, #1
 8001014:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001026:	463b      	mov	r3, r7
 8001028:	4619      	mov	r1, r3
 800102a:	4806      	ldr	r0, [pc, #24]	; (8001044 <MX_ADC2_Init+0xb4>)
 800102c:	f000 fe8a 	bl	8001d44 <HAL_ADC_ConfigChannel>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8001036:	f000 f85f 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000090 	.word	0x20000090
 8001048:	50000100 	.word	0x50000100

0800104c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <MX_GPIO_Init+0xa4>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <MX_GPIO_Init+0xa4>)
 8001068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106c:	6153      	str	r3, [r2, #20]
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <MX_GPIO_Init+0xa4>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_GPIO_Init+0xa4>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <MX_GPIO_Init+0xa4>)
 8001080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001084:	6153      	str	r3, [r2, #20]
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_GPIO_Init+0xa4>)
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2120      	movs	r1, #32
 8001096:	4817      	ldr	r0, [pc, #92]	; (80010f4 <MX_GPIO_Init+0xa8>)
 8001098:	f001 fc7a 	bl	8002990 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800109c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f001 fae1 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010ba:	2320      	movs	r3, #32
 80010bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c6:	2303      	movs	r3, #3
 80010c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	4619      	mov	r1, r3
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <MX_GPIO_Init+0xa8>)
 80010d2:	f001 fad3 	bl	800267c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2028      	movs	r0, #40	; 0x28
 80010dc:	f001 fa97 	bl	800260e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010e0:	2028      	movs	r0, #40	; 0x28
 80010e2:	f001 fab0 	bl	8002646 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e6:	bf00      	nop
 80010e8:	3720      	adds	r7, #32
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000
 80010f4:	48000400 	.word	0x48000400

080010f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010fc:	b672      	cpsid	i
}
 80010fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001100:	e7fe      	b.n	8001100 <Error_Handler+0x8>

08001102 <selfmeter>:
 *      Author: slamko
 */



extern "C" void selfmeter(void) {
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_MspInit+0x44>)
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <HAL_MspInit+0x44>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6193      	str	r3, [r2, #24]
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_MspInit+0x44>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_MspInit+0x44>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a08      	ldr	r2, [pc, #32]	; (8001154 <HAL_MspInit+0x44>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001138:	61d3      	str	r3, [r2, #28]
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_MspInit+0x44>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000

08001158 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a15      	ldr	r2, [pc, #84]	; (80011cc <HAL_ADC_MspInit+0x74>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d124      	bne.n	80011c4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_ADC_MspInit+0x78>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <HAL_ADC_MspInit+0x78>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	6153      	str	r3, [r2, #20]
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_ADC_MspInit+0x78>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_ADC_MspInit+0x78>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <HAL_ADC_MspInit+0x78>)
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	6153      	str	r3, [r2, #20]
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_ADC_MspInit+0x78>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA4     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011aa:	2310      	movs	r3, #16
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ae:	2303      	movs	r3, #3
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	4619      	mov	r1, r3
 80011bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c0:	f001 fa5c 	bl	800267c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	50000100 	.word	0x50000100
 80011d0:	40021000 	.word	0x40021000

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <NMI_Handler+0x4>

080011da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011de:	e7fe      	b.n	80011de <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <MemManage_Handler+0x4>

080011e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <BusFault_Handler+0x4>

080011ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <UsageFault_Handler+0x4>

080011f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001220:	f000 fa28 	bl	8001674 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800122c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001230:	f001 fbc6 	bl	80029c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	e00a      	b.n	8001260 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800124a:	f3af 8000 	nop.w
 800124e:	4601      	mov	r1, r0
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	60ba      	str	r2, [r7, #8]
 8001256:	b2ca      	uxtb	r2, r1
 8001258:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	429a      	cmp	r2, r3
 8001266:	dbf0      	blt.n	800124a <_read+0x12>
  }

  return len;
 8001268:	687b      	ldr	r3, [r7, #4]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	e009      	b.n	8001298 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	60ba      	str	r2, [r7, #8]
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697a      	ldr	r2, [r7, #20]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	429a      	cmp	r2, r3
 800129e:	dbf1      	blt.n	8001284 <_write+0x12>
  }
  return len;
 80012a0:	687b      	ldr	r3, [r7, #4]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <_close>:

int _close(int file)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d2:	605a      	str	r2, [r3, #4]
  return 0;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <_isatty>:

int _isatty(int file)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800131c:	4a14      	ldr	r2, [pc, #80]	; (8001370 <_sbrk+0x5c>)
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <_sbrk+0x60>)
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <_sbrk+0x64>)
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <_sbrk+0x68>)
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	429a      	cmp	r2, r3
 8001342:	d207      	bcs.n	8001354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001344:	f003 f8a4 	bl	8004490 <__errno>
 8001348:	4603      	mov	r3, r0
 800134a:	220c      	movs	r2, #12
 800134c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001352:	e009      	b.n	8001368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <_sbrk+0x64>)
 8001364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20003000 	.word	0x20003000
 8001374:	00000400 	.word	0x00000400
 8001378:	200000e0 	.word	0x200000e0
 800137c:	200000f8 	.word	0x200000f8

08001380 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <SystemInit+0x20>)
 8001386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <SystemInit+0x20>)
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <_ZN3ResCI14UnitIyEEy>:
	protected:
		explicit Unit(Data val);
};

struct Res : public Unit<unsigned long long> {
	using Unit::Unit;
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	e9c7 2300 	strd	r2, r3, [r7]
 80013b0:	68f9      	ldr	r1, [r7, #12]
 80013b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013b6:	4608      	mov	r0, r1
 80013b8:	f000 f8c7 	bl	800154a <_ZN4UnitIyEC1Ey>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_ZN3Res4kohmEy>:
#include "units.h"

template <class Data>
Unit<Data>::Unit(Data val) : val(val) {}

Res Res::kohm(unsigned long long val) {
 80013c6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	e9c7 2300 	strd	r2, r3, [r7]
	return Res(val * 1000);
 80013d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	f04f 0a00 	mov.w	sl, #0
 80013e0:	f04f 0b00 	mov.w	fp, #0
 80013e4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80013e8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80013ec:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80013f0:	4652      	mov	r2, sl
 80013f2:	465b      	mov	r3, fp
 80013f4:	1a14      	subs	r4, r2, r0
 80013f6:	eb63 0501 	sbc.w	r5, r3, r1
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	00ab      	lsls	r3, r5, #2
 8001404:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001408:	00a2      	lsls	r2, r4, #2
 800140a:	4614      	mov	r4, r2
 800140c:	461d      	mov	r5, r3
 800140e:	eb14 0800 	adds.w	r8, r4, r0
 8001412:	eb45 0901 	adc.w	r9, r5, r1
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800142a:	4690      	mov	r8, r2
 800142c:	4699      	mov	r9, r3
 800142e:	4642      	mov	r2, r8
 8001430:	464b      	mov	r3, r9
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f7ff ffb6 	bl	80013a4 <_ZN3ResCI14UnitIyEEy>
}
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001442 <_ZN4CapaCI14UnitIeEEe>:

	static Res kohm(unsigned long long);
};

struct Capa : public Unit<long double>{
	using Unit::Unit;
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	ed87 0b00 	vstr	d0, [r7]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	ed97 7b00 	vldr	d7, [r7]
 8001454:	eeb0 0a47 	vmov.f32	s0, s14
 8001458:	eef0 0a67 	vmov.f32	s1, s15
 800145c:	4618      	mov	r0, r3
 800145e:	f000 f886 	bl	800156e <_ZN4UnitIeEC1Ee>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <_ZN4Capa2ufEe>:

Capa Capa::uf(long double val) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	ed87 0b00 	vstr	d0, [r7]
	return Capa(val * 1000 * 1000);
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <_ZN4Capa2ufEe+0x5c>)
 800147c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001480:	f7ff f8b2 	bl	80005e8 <__aeabi_dmul>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <_ZN4Capa2ufEe+0x5c>)
 8001492:	f7ff f8a9 	bl	80005e8 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	ec43 2b17 	vmov	d7, r2, r3
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	eeb0 0a47 	vmov.f32	s0, s14
 80014a6:	eef0 0a67 	vmov.f32	s1, s15
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ffc9 	bl	8001442 <_ZN4CapaCI14UnitIeEEe>
 80014b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014b4:	ec43 2b17 	vmov	d7, r2, r3
}
 80014b8:	eeb0 0a47 	vmov.f32	s0, s14
 80014bc:	eef0 0a67 	vmov.f32	s1, s15
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	408f4000 	.word	0x408f4000

080014cc <_Zli5_kOhmy>:

Capa Capa::pf(long double val) {
	return Capa(val);
}

Res operator ""_kOhm(unsigned long long val) {
 80014cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	e9c7 2300 	strd	r2, r3, [r7]
	return Res::kohm(val * 1000);
 80014da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	f04f 0a00 	mov.w	sl, #0
 80014e6:	f04f 0b00 	mov.w	fp, #0
 80014ea:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80014ee:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80014f2:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80014f6:	4652      	mov	r2, sl
 80014f8:	465b      	mov	r3, fp
 80014fa:	1a14      	subs	r4, r2, r0
 80014fc:	eb63 0501 	sbc.w	r5, r3, r1
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	00ab      	lsls	r3, r5, #2
 800150a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800150e:	00a2      	lsls	r2, r4, #2
 8001510:	4614      	mov	r4, r2
 8001512:	461d      	mov	r5, r3
 8001514:	eb14 0800 	adds.w	r8, r4, r0
 8001518:	eb45 0901 	adc.w	r9, r5, r1
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001528:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800152c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001530:	4690      	mov	r8, r2
 8001532:	4699      	mov	r9, r3
 8001534:	4642      	mov	r2, r8
 8001536:	464b      	mov	r3, r9
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	4608      	mov	r0, r1
 800153c:	f7ff ff43 	bl	80013c6 <_ZN3Res4kohmEy>
}
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800154a <_ZN4UnitIyEC1Ey>:
Unit<Data>::Unit(Data val) : val(val) {}
 800154a:	b480      	push	{r7}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	e9c7 2300 	strd	r2, r3, [r7]
 8001556:	68f9      	ldr	r1, [r7, #12]
 8001558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800155c:	e9c1 2300 	strd	r2, r3, [r1]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4618      	mov	r0, r3
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <_ZN4UnitIeEC1Ee>:
 800156e:	b480      	push	{r7}
 8001570:	b085      	sub	sp, #20
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	ed87 0b00 	vstr	d0, [r7]
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001580:	e9c1 2300 	strd	r2, r3, [r1]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015cc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001598:	f7ff fef2 	bl	8001380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800159e:	490d      	ldr	r1, [pc, #52]	; (80015d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <LoopForever+0xe>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a4:	e002      	b.n	80015ac <LoopCopyDataInit>

080015a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015aa:	3304      	adds	r3, #4

080015ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b0:	d3f9      	bcc.n	80015a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b4:	4c0a      	ldr	r4, [pc, #40]	; (80015e0 <LoopForever+0x16>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b8:	e001      	b.n	80015be <LoopFillZerobss>

080015ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015bc:	3204      	adds	r2, #4

080015be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c0:	d3fb      	bcc.n	80015ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015c2:	f002 ff6b 	bl	800449c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015c6:	f7ff fc7a 	bl	8000ebe <main>

080015ca <LoopForever>:

LoopForever:
    b LoopForever
 80015ca:	e7fe      	b.n	80015ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015cc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015d8:	08005508 	.word	0x08005508
  ldr r2, =_sbss
 80015dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015e0:	200000f8 	.word	0x200000f8

080015e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC1_2_IRQHandler>
	...

080015e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_Init+0x28>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a07      	ldr	r2, [pc, #28]	; (8001610 <HAL_Init+0x28>)
 80015f2:	f043 0310 	orr.w	r3, r3, #16
 80015f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f000 fffd 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fe:	200f      	movs	r0, #15
 8001600:	f000 f808 	bl	8001614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001604:	f7ff fd84 	bl	8001110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40022000 	.word	0x40022000

08001614 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_InitTick+0x54>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_InitTick+0x58>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162a:	fbb3 f3f1 	udiv	r3, r3, r1
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f001 f815 	bl	8002662 <HAL_SYSTICK_Config>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e00e      	b.n	8001660 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b0f      	cmp	r3, #15
 8001646:	d80a      	bhi.n	800165e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001648:	2200      	movs	r2, #0
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001650:	f000 ffdd 	bl	800260e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001654:	4a06      	ldr	r2, [pc, #24]	; (8001670 <HAL_InitTick+0x5c>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e000      	b.n	8001660 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000000 	.word	0x20000000
 800166c:	20000008 	.word	0x20000008
 8001670:	20000004 	.word	0x20000004

08001674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_IncTick+0x20>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_IncTick+0x24>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <HAL_IncTick+0x24>)
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20000008 	.word	0x20000008
 8001698:	200000e4 	.word	0x200000e4

0800169c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;  
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <HAL_GetTick+0x14>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	200000e4 	.word	0x200000e4

080016b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016bc:	f7ff ffee 	bl	800169c <HAL_GetTick>
 80016c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016cc:	d005      	beq.n	80016da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_Delay+0x44>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80016da:	bf00      	nop
 80016dc:	f7ff ffde 	bl	800169c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d8f7      	bhi.n	80016dc <HAL_Delay+0x28>
  {
  }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000008 	.word	0x20000008

080016fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b09a      	sub	sp, #104	; 0x68
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e172      	b.n	8001a02 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	2b00      	cmp	r3, #0
 800172c:	d176      	bne.n	800181c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d152      	bne.n	80017dc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fd01 	bl	8001158 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d13b      	bne.n	80017dc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 fe11 	bl	800238c <ADC_Disable>
 800176a:	4603      	mov	r3, r0
 800176c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	2b00      	cmp	r3, #0
 800177a:	d12f      	bne.n	80017dc <HAL_ADC_Init+0xe0>
 800177c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001780:	2b00      	cmp	r3, #0
 8001782:	d12b      	bne.n	80017dc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800178c:	f023 0302 	bic.w	r3, r3, #2
 8001790:	f043 0202 	orr.w	r2, r3, #2
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017a6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017b6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017b8:	4b94      	ldr	r3, [pc, #592]	; (8001a0c <HAL_ADC_Init+0x310>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a94      	ldr	r2, [pc, #592]	; (8001a10 <HAL_ADC_Init+0x314>)
 80017be:	fba2 2303 	umull	r2, r3, r2, r3
 80017c2:	0c9a      	lsrs	r2, r3, #18
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017ce:	e002      	b.n	80017d6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f9      	bne.n	80017d0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80017f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017f8:	d110      	bne.n	800181c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f023 0312 	bic.w	r3, r3, #18
 8001802:	f043 0210 	orr.w	r2, r3, #16
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	f043 0201 	orr.w	r2, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	2b00      	cmp	r3, #0
 8001826:	f040 80df 	bne.w	80019e8 <HAL_ADC_Init+0x2ec>
 800182a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800182e:	2b00      	cmp	r3, #0
 8001830:	f040 80da 	bne.w	80019e8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 80d2 	bne.w	80019e8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800184c:	f043 0202 	orr.w	r2, r3, #2
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001854:	4b6f      	ldr	r3, [pc, #444]	; (8001a14 <HAL_ADC_Init+0x318>)
 8001856:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001860:	d102      	bne.n	8001868 <HAL_ADC_Init+0x16c>
 8001862:	4b6d      	ldr	r3, [pc, #436]	; (8001a18 <HAL_ADC_Init+0x31c>)
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	e002      	b.n	800186e <HAL_ADC_Init+0x172>
 8001868:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800186c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	2b01      	cmp	r3, #1
 800187a:	d108      	bne.n	800188e <HAL_ADC_Init+0x192>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ADC_Init+0x192>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_ADC_Init+0x194>
 800188e:	2300      	movs	r3, #0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d11c      	bne.n	80018ce <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001894:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001896:	2b00      	cmp	r3, #0
 8001898:	d010      	beq.n	80018bc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d107      	bne.n	80018b6 <HAL_ADC_Init+0x1ba>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_Init+0x1ba>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_ADC_Init+0x1bc>
 80018b6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d108      	bne.n	80018ce <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80018bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	431a      	orrs	r2, r3
 80018ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018cc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7e5b      	ldrb	r3, [r3, #25]
 80018d2:	035b      	lsls	r3, r3, #13
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018d8:	2a01      	cmp	r2, #1
 80018da:	d002      	beq.n	80018e2 <HAL_ADC_Init+0x1e6>
 80018dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018e0:	e000      	b.n	80018e4 <HAL_ADC_Init+0x1e8>
 80018e2:	2200      	movs	r2, #0
 80018e4:	431a      	orrs	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018f4:	4313      	orrs	r3, r2
 80018f6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d11b      	bne.n	800193a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7e5b      	ldrb	r3, [r3, #25]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190e:	3b01      	subs	r3, #1
 8001910:	045a      	lsls	r2, r3, #17
 8001912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001914:	4313      	orrs	r3, r2
 8001916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191a:	663b      	str	r3, [r7, #96]	; 0x60
 800191c:	e00d      	b.n	800193a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001926:	f043 0220 	orr.w	r2, r3, #32
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f043 0201 	orr.w	r2, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	2b01      	cmp	r3, #1
 8001940:	d007      	beq.n	8001952 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	4313      	orrs	r3, r2
 800194c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800194e:	4313      	orrs	r3, r2
 8001950:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	2b00      	cmp	r3, #0
 800195e:	d114      	bne.n	800198a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800196e:	f023 0302 	bic.w	r3, r3, #2
 8001972:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7e1b      	ldrb	r3, [r3, #24]
 8001978:	039a      	lsls	r2, r3, #14
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4313      	orrs	r3, r2
 8001984:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001986:	4313      	orrs	r3, r2
 8001988:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	4b22      	ldr	r3, [pc, #136]	; (8001a1c <HAL_ADC_Init+0x320>)
 8001992:	4013      	ands	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800199a:	430b      	orrs	r3, r1
 800199c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d10c      	bne.n	80019c0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	f023 010f 	bic.w	r1, r3, #15
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	1e5a      	subs	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	631a      	str	r2, [r3, #48]	; 0x30
 80019be:	e007      	b.n	80019d0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 020f 	bic.w	r2, r2, #15
 80019ce:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f023 0303 	bic.w	r3, r3, #3
 80019de:	f043 0201 	orr.w	r2, r3, #1
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	641a      	str	r2, [r3, #64]	; 0x40
 80019e6:	e00a      	b.n	80019fe <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f023 0312 	bic.w	r3, r3, #18
 80019f0:	f043 0210 	orr.w	r2, r3, #16
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80019f8:	2301      	movs	r3, #1
 80019fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80019fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3768      	adds	r7, #104	; 0x68
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	431bde83 	.word	0x431bde83
 8001a14:	50000300 	.word	0x50000300
 8001a18:	50000100 	.word	0x50000100
 8001a1c:	fff0c007 	.word	0xfff0c007

08001a20 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 809c 	bne.w	8001b74 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_Start+0x2a>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e097      	b.n	8001b7a <HAL_ADC_Start+0x15a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fc36 	bl	80022c4 <ADC_Enable>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f040 8083 	bne.w	8001b6a <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a6c:	f023 0301 	bic.w	r3, r3, #1
 8001a70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a78:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <HAL_ADC_Start+0x164>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d004      	beq.n	8001a8e <HAL_ADC_Start+0x6e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a8c:	d115      	bne.n	8001aba <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d027      	beq.n	8001af8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ab0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ab8:	e01e      	b.n	8001af8 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ace:	d004      	beq.n	8001ada <HAL_ADC_Start+0xba>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a2c      	ldr	r2, [pc, #176]	; (8001b88 <HAL_ADC_Start+0x168>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d10e      	bne.n	8001af8 <HAL_ADC_Start+0xd8>
 8001ada:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001af0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b04:	d106      	bne.n	8001b14 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f023 0206 	bic.w	r2, r3, #6
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	645a      	str	r2, [r3, #68]	; 0x44
 8001b12:	e002      	b.n	8001b1a <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	221c      	movs	r2, #28
 8001b28:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_ADC_Start+0x164>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 031f 	and.w	r3, r3, #31
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d010      	beq.n	8001b58 <HAL_ADC_Start+0x138>
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <HAL_ADC_Start+0x164>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	2b05      	cmp	r3, #5
 8001b40:	d00a      	beq.n	8001b58 <HAL_ADC_Start+0x138>
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <HAL_ADC_Start+0x164>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	2b09      	cmp	r3, #9
 8001b4c:	d004      	beq.n	8001b58 <HAL_ADC_Start+0x138>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b56:	d10f      	bne.n	8001b78 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0204 	orr.w	r2, r2, #4
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	e006      	b.n	8001b78 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b72:	e001      	b.n	8001b78 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b74:	2302      	movs	r3, #2
 8001b76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	50000300 	.word	0x50000300
 8001b88:	50000100 	.word	0x50000100

08001b8c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d102      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e02e      	b.n	8001c06 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ba8:	4b5e      	ldr	r3, [pc, #376]	; (8001d24 <HAL_ADC_PollForConversion+0x198>)
 8001baa:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 031f 	and.w	r3, r3, #31
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d112      	bne.n	8001bde <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d11d      	bne.n	8001c02 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f043 0220 	orr.w	r2, r3, #32
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e09d      	b.n	8001d1a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f043 0220 	orr.w	r2, r3, #32
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e08b      	b.n	8001d1a <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001c02:	230c      	movs	r3, #12
 8001c04:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_ADC_PollForConversion+0x198>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <HAL_ADC_PollForConversion+0x90>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c1a:	d104      	bne.n	8001c26 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	e003      	b.n	8001c2e <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001c26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001c2e:	f7ff fd35 	bl	800169c <HAL_GetTick>
 8001c32:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001c34:	e021      	b.n	8001c7a <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c3c:	d01d      	beq.n	8001c7a <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d007      	beq.n	8001c54 <HAL_ADC_PollForConversion+0xc8>
 8001c44:	f7ff fd2a 	bl	800169c <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d212      	bcs.n	8001c7a <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10b      	bne.n	8001c7a <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f043 0204 	orr.w	r2, r3, #4
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e04f      	b.n	8001d1a <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	4013      	ands	r3, r2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0d6      	beq.n	8001c36 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d131      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d12c      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d125      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d112      	bne.n	8001cee <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d112      	bne.n	8001d06 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f043 0201 	orr.w	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40
 8001cec:	e00b      	b.n	8001d06 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f043 0220 	orr.w	r2, r3, #32
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d103      	bne.n	8001d18 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	50000300 	.word	0x50000300

08001d28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b09b      	sub	sp, #108	; 0x6c
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x22>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e2a4      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x56c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 8288 	bne.w	800228e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d81c      	bhi.n	8001dc0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	461a      	mov	r2, r3
 8001d9a:	231f      	movs	r3, #31
 8001d9c:	4093      	lsls	r3, r2
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	4019      	ands	r1, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa00 f203 	lsl.w	r2, r0, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001dbe:	e063      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b09      	cmp	r3, #9
 8001dc6:	d81e      	bhi.n	8001e06 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	3b1e      	subs	r3, #30
 8001ddc:	221f      	movs	r2, #31
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	4019      	ands	r1, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	3b1e      	subs	r3, #30
 8001df8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	635a      	str	r2, [r3, #52]	; 0x34
 8001e04:	e040      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b0e      	cmp	r3, #14
 8001e0c:	d81e      	bhi.n	8001e4c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	3b3c      	subs	r3, #60	; 0x3c
 8001e22:	221f      	movs	r2, #31
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	4019      	ands	r1, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	3b3c      	subs	r3, #60	; 0x3c
 8001e3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	639a      	str	r2, [r3, #56]	; 0x38
 8001e4a:	e01d      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	3b5a      	subs	r3, #90	; 0x5a
 8001e60:	221f      	movs	r2, #31
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	4019      	ands	r1, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	3b5a      	subs	r3, #90	; 0x5a
 8001e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 80e5 	bne.w	8002062 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b09      	cmp	r3, #9
 8001e9e:	d91c      	bls.n	8001eda <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6999      	ldr	r1, [r3, #24]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	3b1e      	subs	r3, #30
 8001eb2:	2207      	movs	r2, #7
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	4019      	ands	r1, r3
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6898      	ldr	r0, [r3, #8]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4413      	add	r3, r2
 8001eca:	3b1e      	subs	r3, #30
 8001ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	619a      	str	r2, [r3, #24]
 8001ed8:	e019      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6959      	ldr	r1, [r3, #20]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	2207      	movs	r2, #7
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	4019      	ands	r1, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6898      	ldr	r0, [r3, #8]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	fa00 f203 	lsl.w	r2, r0, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	08db      	lsrs	r3, r3, #3
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d84f      	bhi.n	8001fd0 <HAL_ADC_ConfigChannel+0x28c>
 8001f30:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <HAL_ADC_ConfigChannel+0x1f4>)
 8001f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f36:	bf00      	nop
 8001f38:	08001f49 	.word	0x08001f49
 8001f3c:	08001f6b 	.word	0x08001f6b
 8001f40:	08001f8d 	.word	0x08001f8d
 8001f44:	08001faf 	.word	0x08001faf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f4e:	4b94      	ldr	r3, [pc, #592]	; (80021a0 <HAL_ADC_ConfigChannel+0x45c>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	0691      	lsls	r1, r2, #26
 8001f58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f66:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f68:	e07e      	b.n	8002068 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f70:	4b8b      	ldr	r3, [pc, #556]	; (80021a0 <HAL_ADC_ConfigChannel+0x45c>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	0691      	lsls	r1, r2, #26
 8001f7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f88:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f8a:	e06d      	b.n	8002068 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f92:	4b83      	ldr	r3, [pc, #524]	; (80021a0 <HAL_ADC_ConfigChannel+0x45c>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	0691      	lsls	r1, r2, #26
 8001f9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001faa:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fac:	e05c      	b.n	8002068 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fb4:	4b7a      	ldr	r3, [pc, #488]	; (80021a0 <HAL_ADC_ConfigChannel+0x45c>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	0691      	lsls	r1, r2, #26
 8001fbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fcc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fce:	e04b      	b.n	8002068 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	069b      	lsls	r3, r3, #26
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d107      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ff2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ffa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	069b      	lsls	r3, r3, #26
 8002004:	429a      	cmp	r2, r3
 8002006:	d107      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002016:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800201e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	069b      	lsls	r3, r3, #26
 8002028:	429a      	cmp	r2, r3
 800202a:	d107      	bne.n	800203c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800203a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002042:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	069b      	lsls	r3, r3, #26
 800204c:	429a      	cmp	r2, r3
 800204e:	d10a      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800205e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002060:	e001      	b.n	8002066 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002062:	bf00      	nop
 8002064:	e000      	b.n	8002068 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002066:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d108      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x344>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x344>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_ADC_ConfigChannel+0x346>
 8002088:	2300      	movs	r3, #0
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 810a 	bne.w	80022a4 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d00f      	beq.n	80020b8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2201      	movs	r2, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	400a      	ands	r2, r1
 80020b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80020b6:	e049      	b.n	800214c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2201      	movs	r2, #1
 80020c6:	409a      	lsls	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2b09      	cmp	r3, #9
 80020d8:	d91c      	bls.n	8002114 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6999      	ldr	r1, [r3, #24]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	3b1b      	subs	r3, #27
 80020ec:	2207      	movs	r2, #7
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	4019      	ands	r1, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6898      	ldr	r0, [r3, #8]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4613      	mov	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	3b1b      	subs	r3, #27
 8002106:	fa00 f203 	lsl.w	r2, r0, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	619a      	str	r2, [r3, #24]
 8002112:	e01b      	b.n	800214c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6959      	ldr	r1, [r3, #20]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	2207      	movs	r2, #7
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	4019      	ands	r1, r3
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6898      	ldr	r0, [r3, #8]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	fa00 f203 	lsl.w	r2, r0, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <HAL_ADC_ConfigChannel+0x460>)
 800214e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b10      	cmp	r3, #16
 8002156:	d105      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002160:	2b00      	cmp	r3, #0
 8002162:	d015      	beq.n	8002190 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002168:	2b11      	cmp	r3, #17
 800216a:	d105      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800216c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00b      	beq.n	8002190 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800217c:	2b12      	cmp	r3, #18
 800217e:	f040 8091 	bne.w	80022a4 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800218a:	2b00      	cmp	r3, #0
 800218c:	f040 808a 	bne.w	80022a4 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002198:	d108      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x468>
 800219a:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_ADC_ConfigChannel+0x464>)
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	e008      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x46e>
 80021a0:	83fff000 	.word	0x83fff000
 80021a4:	50000300 	.word	0x50000300
 80021a8:	50000100 	.word	0x50000100
 80021ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021b0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d108      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x48e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x48e>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_ADC_ConfigChannel+0x490>
 80021d2:	2300      	movs	r3, #0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d150      	bne.n	800227a <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021d8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d010      	beq.n	8002200 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d107      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x4b6>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x4b6>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_ADC_ConfigChannel+0x4b8>
 80021fa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d13c      	bne.n	800227a <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b10      	cmp	r3, #16
 8002206:	d11d      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x500>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002210:	d118      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800221a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800221c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800221e:	4b27      	ldr	r3, [pc, #156]	; (80022bc <HAL_ADC_ConfigChannel+0x578>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <HAL_ADC_ConfigChannel+0x57c>)
 8002224:	fba2 2303 	umull	r2, r3, r2, r3
 8002228:	0c9a      	lsrs	r2, r3, #18
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002234:	e002      	b.n	800223c <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	3b01      	subs	r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f9      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002242:	e02e      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b11      	cmp	r3, #17
 800224a:	d10b      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x520>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002254:	d106      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800225e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002260:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002262:	e01e      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b12      	cmp	r3, #18
 800226a:	d11a      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800226c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002276:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002278:	e013      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f043 0220 	orr.w	r2, r3, #32
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800228c:	e00a      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f043 0220 	orr.w	r2, r3, #32
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80022a0:	e000      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022a2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80022ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	376c      	adds	r7, #108	; 0x6c
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	20000000 	.word	0x20000000
 80022c0:	431bde83 	.word	0x431bde83

080022c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d108      	bne.n	80022f0 <ADC_Enable+0x2c>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d101      	bne.n	80022f0 <ADC_Enable+0x2c>
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <ADC_Enable+0x2e>
 80022f0:	2300      	movs	r3, #0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d143      	bne.n	800237e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	4b22      	ldr	r3, [pc, #136]	; (8002388 <ADC_Enable+0xc4>)
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00d      	beq.n	8002320 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f043 0210 	orr.w	r2, r3, #16
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e02f      	b.n	8002380 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002330:	f7ff f9b4 	bl	800169c <HAL_GetTick>
 8002334:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002336:	e01b      	b.n	8002370 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002338:	f7ff f9b0 	bl	800169c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d914      	bls.n	8002370 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b01      	cmp	r3, #1
 8002352:	d00d      	beq.n	8002370 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f043 0210 	orr.w	r2, r3, #16
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e007      	b.n	8002380 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d1dc      	bne.n	8002338 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	8000003f 	.word	0x8000003f

0800238c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d108      	bne.n	80023b8 <ADC_Disable+0x2c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <ADC_Disable+0x2c>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <ADC_Disable+0x2e>
 80023b8:	2300      	movs	r3, #0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d047      	beq.n	800244e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 030d 	and.w	r3, r3, #13
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d10f      	bne.n	80023ec <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0202 	orr.w	r2, r2, #2
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2203      	movs	r2, #3
 80023e2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80023e4:	f7ff f95a 	bl	800169c <HAL_GetTick>
 80023e8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023ea:	e029      	b.n	8002440 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f0:	f043 0210 	orr.w	r2, r3, #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	f043 0201 	orr.w	r2, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e023      	b.n	8002450 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002408:	f7ff f948 	bl	800169c <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d914      	bls.n	8002440 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d10d      	bne.n	8002440 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	f043 0210 	orr.w	r2, r3, #16
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e007      	b.n	8002450 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b01      	cmp	r3, #1
 800244c:	d0dc      	beq.n	8002408 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248a:	4a04      	ldr	r2, [pc, #16]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <__NVIC_GetPriorityGrouping+0x18>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0307 	and.w	r3, r3, #7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db0b      	blt.n	80024e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4907      	ldr	r1, [pc, #28]	; (80024f4 <__NVIC_EnableIRQ+0x38>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2001      	movs	r0, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c4:	d301      	bcc.n	80025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <SysTick_Config+0x40>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d2:	210f      	movs	r1, #15
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025d8:	f7ff ff8e 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <SysTick_Config+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <SysTick_Config+0x40>)
 80025e4:	2207      	movs	r2, #7
 80025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff29 	bl	8002458 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002620:	f7ff ff3e 	bl	80024a0 <__NVIC_GetPriorityGrouping>
 8002624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ff8e 	bl	800254c <NVIC_EncodePriority>
 8002630:	4602      	mov	r2, r0
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff5d 	bl	80024f8 <__NVIC_SetPriority>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff31 	bl	80024bc <__NVIC_EnableIRQ>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ffa2 	bl	80025b4 <SysTick_Config>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268a:	e14e      	b.n	800292a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	2101      	movs	r1, #1
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	4013      	ands	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8140 	beq.w	8002924 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d005      	beq.n	80026bc <HAL_GPIO_Init+0x40>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d130      	bne.n	800271e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026f2:	2201      	movs	r2, #1
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	f003 0201 	and.w	r2, r3, #1
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b03      	cmp	r3, #3
 8002728:	d017      	beq.n	800275a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	2203      	movs	r2, #3
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43db      	mvns	r3, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4013      	ands	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d123      	bne.n	80027ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	08da      	lsrs	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3208      	adds	r2, #8
 800276e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002772:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	220f      	movs	r2, #15
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4013      	ands	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	08da      	lsrs	r2, r3, #3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	3208      	adds	r2, #8
 80027a8:	6939      	ldr	r1, [r7, #16]
 80027aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	2203      	movs	r2, #3
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 0203 	and.w	r2, r3, #3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 809a 	beq.w	8002924 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f0:	4b55      	ldr	r3, [pc, #340]	; (8002948 <HAL_GPIO_Init+0x2cc>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4a54      	ldr	r2, [pc, #336]	; (8002948 <HAL_GPIO_Init+0x2cc>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6193      	str	r3, [r2, #24]
 80027fc:	4b52      	ldr	r3, [pc, #328]	; (8002948 <HAL_GPIO_Init+0x2cc>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002808:	4a50      	ldr	r2, [pc, #320]	; (800294c <HAL_GPIO_Init+0x2d0>)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	3302      	adds	r3, #2
 8002810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002814:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	220f      	movs	r2, #15
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002832:	d013      	beq.n	800285c <HAL_GPIO_Init+0x1e0>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a46      	ldr	r2, [pc, #280]	; (8002950 <HAL_GPIO_Init+0x2d4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00d      	beq.n	8002858 <HAL_GPIO_Init+0x1dc>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a45      	ldr	r2, [pc, #276]	; (8002954 <HAL_GPIO_Init+0x2d8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d007      	beq.n	8002854 <HAL_GPIO_Init+0x1d8>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a44      	ldr	r2, [pc, #272]	; (8002958 <HAL_GPIO_Init+0x2dc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d101      	bne.n	8002850 <HAL_GPIO_Init+0x1d4>
 800284c:	2303      	movs	r3, #3
 800284e:	e006      	b.n	800285e <HAL_GPIO_Init+0x1e2>
 8002850:	2305      	movs	r3, #5
 8002852:	e004      	b.n	800285e <HAL_GPIO_Init+0x1e2>
 8002854:	2302      	movs	r3, #2
 8002856:	e002      	b.n	800285e <HAL_GPIO_Init+0x1e2>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_GPIO_Init+0x1e2>
 800285c:	2300      	movs	r3, #0
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	f002 0203 	and.w	r2, r2, #3
 8002864:	0092      	lsls	r2, r2, #2
 8002866:	4093      	lsls	r3, r2
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800286e:	4937      	ldr	r1, [pc, #220]	; (800294c <HAL_GPIO_Init+0x2d0>)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800287c:	4b37      	ldr	r3, [pc, #220]	; (800295c <HAL_GPIO_Init+0x2e0>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	43db      	mvns	r3, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028a0:	4a2e      	ldr	r2, [pc, #184]	; (800295c <HAL_GPIO_Init+0x2e0>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a6:	4b2d      	ldr	r3, [pc, #180]	; (800295c <HAL_GPIO_Init+0x2e0>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028ca:	4a24      	ldr	r2, [pc, #144]	; (800295c <HAL_GPIO_Init+0x2e0>)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028d0:	4b22      	ldr	r3, [pc, #136]	; (800295c <HAL_GPIO_Init+0x2e0>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	43db      	mvns	r3, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028f4:	4a19      	ldr	r2, [pc, #100]	; (800295c <HAL_GPIO_Init+0x2e0>)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_GPIO_Init+0x2e0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	43db      	mvns	r3, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800291e:	4a0f      	ldr	r2, [pc, #60]	; (800295c <HAL_GPIO_Init+0x2e0>)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	3301      	adds	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	f47f aea9 	bne.w	800268c <HAL_GPIO_Init+0x10>
  }
}
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	371c      	adds	r7, #28
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	40021000 	.word	0x40021000
 800294c:	40010000 	.word	0x40010000
 8002950:	48000400 	.word	0x48000400
 8002954:	48000800 	.word	0x48000800
 8002958:	48000c00 	.word	0x48000c00
 800295c:	40010400 	.word	0x40010400

08002960 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	887b      	ldrh	r3, [r7, #2]
 8002972:	4013      	ands	r3, r2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e001      	b.n	8002982 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002982:	7bfb      	ldrb	r3, [r7, #15]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	807b      	strh	r3, [r7, #2]
 800299c:	4613      	mov	r3, r2
 800299e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a0:	787b      	ldrb	r3, [r7, #1]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029a6:	887a      	ldrh	r2, [r7, #2]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029ac:	e002      	b.n	80029b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029ca:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	88fb      	ldrh	r3, [r7, #6]
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d006      	beq.n	80029e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029d6:	4a05      	ldr	r2, [pc, #20]	; (80029ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe f980 	bl	8000ce4 <HAL_GPIO_EXTI_Callback>
  }
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40010400 	.word	0x40010400

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a00:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	f001 b823 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 817d 	beq.w	8002d26 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a2c:	4bbc      	ldr	r3, [pc, #752]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d00c      	beq.n	8002a52 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a38:	4bb9      	ldr	r3, [pc, #740]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d15c      	bne.n	8002afe <HAL_RCC_OscConfig+0x10e>
 8002a44:	4bb6      	ldr	r3, [pc, #728]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a50:	d155      	bne.n	8002afe <HAL_RCC_OscConfig+0x10e>
 8002a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a56:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a66:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d102      	bne.n	8002a84 <HAL_RCC_OscConfig+0x94>
 8002a7e:	4ba8      	ldr	r3, [pc, #672]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	e015      	b.n	8002ab0 <HAL_RCC_OscConfig+0xc0>
 8002a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a88:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a9c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002aa0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002aa4:	fa93 f3a3 	rbit	r3, r3
 8002aa8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002aac:	4b9c      	ldr	r3, [pc, #624]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ab4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002ab8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002abc:	fa92 f2a2 	rbit	r2, r2
 8002ac0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002ac4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002ac8:	fab2 f282 	clz	r2, r2
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	f042 0220 	orr.w	r2, r2, #32
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	f002 021f 	and.w	r2, r2, #31
 8002ad8:	2101      	movs	r1, #1
 8002ada:	fa01 f202 	lsl.w	r2, r1, r2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 811f 	beq.w	8002d24 <HAL_RCC_OscConfig+0x334>
 8002ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 8116 	bne.w	8002d24 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	f000 bfaf 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x12e>
 8002b10:	4b83      	ldr	r3, [pc, #524]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a82      	ldr	r2, [pc, #520]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	e036      	b.n	8002b8c <HAL_RCC_OscConfig+0x19c>
 8002b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x158>
 8002b2e:	4b7c      	ldr	r3, [pc, #496]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a7b      	ldr	r2, [pc, #492]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b79      	ldr	r3, [pc, #484]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a78      	ldr	r2, [pc, #480]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e021      	b.n	8002b8c <HAL_RCC_OscConfig+0x19c>
 8002b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x184>
 8002b5a:	4b71      	ldr	r3, [pc, #452]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a70      	ldr	r2, [pc, #448]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b6e      	ldr	r3, [pc, #440]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a6d      	ldr	r2, [pc, #436]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e00b      	b.n	8002b8c <HAL_RCC_OscConfig+0x19c>
 8002b74:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a69      	ldr	r2, [pc, #420]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a66      	ldr	r2, [pc, #408]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b8c:	4b64      	ldr	r3, [pc, #400]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	f023 020f 	bic.w	r2, r3, #15
 8002b94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	495f      	ldr	r1, [pc, #380]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002baa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d059      	beq.n	8002c6a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb6:	f7fe fd71 	bl	800169c <HAL_GetTick>
 8002bba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7fe fd6c 	bl	800169c <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b64      	cmp	r3, #100	; 0x64
 8002bce:	d902      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	f000 bf43 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
 8002bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bda:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002bea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d102      	bne.n	8002c08 <HAL_RCC_OscConfig+0x218>
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	e015      	b.n	8002c34 <HAL_RCC_OscConfig+0x244>
 8002c08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c0c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002c1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c20:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002c24:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002c28:	fa93 f3a3 	rbit	r3, r3
 8002c2c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002c30:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c38:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002c3c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002c40:	fa92 f2a2 	rbit	r2, r2
 8002c44:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002c48:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002c4c:	fab2 f282 	clz	r2, r2
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	f042 0220 	orr.w	r2, r2, #32
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	f002 021f 	and.w	r2, r2, #31
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ab      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x1d0>
 8002c68:	e05d      	b.n	8002d26 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6a:	f7fe fd17 	bl	800169c <HAL_GetTick>
 8002c6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c74:	f7fe fd12 	bl	800169c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	; 0x64
 8002c82:	d902      	bls.n	8002c8a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	f000 bee9 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
 8002c8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c8e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d102      	bne.n	8002cbc <HAL_RCC_OscConfig+0x2cc>
 8002cb6:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	e015      	b.n	8002ce8 <HAL_RCC_OscConfig+0x2f8>
 8002cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cc0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002cd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cd4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002cd8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002ce4:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <HAL_RCC_OscConfig+0x330>)
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cec:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002cf0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002cf4:	fa92 f2a2 	rbit	r2, r2
 8002cf8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002cfc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002d00:	fab2 f282 	clz	r2, r2
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	f042 0220 	orr.w	r2, r2, #32
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	f002 021f 	and.w	r2, r2, #31
 8002d10:	2101      	movs	r1, #1
 8002d12:	fa01 f202 	lsl.w	r2, r1, r2
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1ab      	bne.n	8002c74 <HAL_RCC_OscConfig+0x284>
 8002d1c:	e003      	b.n	8002d26 <HAL_RCC_OscConfig+0x336>
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 817d 	beq.w	8003036 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d3c:	4ba6      	ldr	r3, [pc, #664]	; (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00b      	beq.n	8002d60 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d48:	4ba3      	ldr	r3, [pc, #652]	; (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d172      	bne.n	8002e3a <HAL_RCC_OscConfig+0x44a>
 8002d54:	4ba0      	ldr	r3, [pc, #640]	; (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d16c      	bne.n	8002e3a <HAL_RCC_OscConfig+0x44a>
 8002d60:	2302      	movs	r3, #2
 8002d62:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d72:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d102      	bne.n	8002d90 <HAL_RCC_OscConfig+0x3a0>
 8002d8a:	4b93      	ldr	r3, [pc, #588]	; (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	e013      	b.n	8002db8 <HAL_RCC_OscConfig+0x3c8>
 8002d90:	2302      	movs	r3, #2
 8002d92:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d9a:	fa93 f3a3 	rbit	r3, r3
 8002d9e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002da2:	2302      	movs	r3, #2
 8002da4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002da8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002db4:	4b88      	ldr	r3, [pc, #544]	; (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2202      	movs	r2, #2
 8002dba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002dbe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002dc2:	fa92 f2a2 	rbit	r2, r2
 8002dc6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002dca:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002dce:	fab2 f282 	clz	r2, r2
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	f042 0220 	orr.w	r2, r2, #32
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	f002 021f 	and.w	r2, r2, #31
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f202 	lsl.w	r2, r1, r2
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCC_OscConfig+0x410>
 8002dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d002      	beq.n	8002e00 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f000 be2e 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e00:	4b75      	ldr	r3, [pc, #468]	; (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	21f8      	movs	r1, #248	; 0xf8
 8002e16:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002e1e:	fa91 f1a1 	rbit	r1, r1
 8002e22:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002e26:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002e2a:	fab1 f181 	clz	r1, r1
 8002e2e:	b2c9      	uxtb	r1, r1
 8002e30:	408b      	lsls	r3, r1
 8002e32:	4969      	ldr	r1, [pc, #420]	; (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e38:	e0fd      	b.n	8003036 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 8088 	beq.w	8002f5c <HAL_RCC_OscConfig+0x56c>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002e5e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	461a      	mov	r2, r3
 8002e74:	2301      	movs	r3, #1
 8002e76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e78:	f7fe fc10 	bl	800169c <HAL_GetTick>
 8002e7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	e00a      	b.n	8002e98 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e82:	f7fe fc0b 	bl	800169c <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d902      	bls.n	8002e98 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	f000 bde2 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002eaa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d102      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x4d8>
 8002ec2:	4b45      	ldr	r3, [pc, #276]	; (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	e013      	b.n	8002ef0 <HAL_RCC_OscConfig+0x500>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002eda:	2302      	movs	r3, #2
 8002edc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002ee0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002eec:	4b3a      	ldr	r3, [pc, #232]	; (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002ef6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002efa:	fa92 f2a2 	rbit	r2, r2
 8002efe:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002f02:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002f06:	fab2 f282 	clz	r2, r2
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	f042 0220 	orr.w	r2, r2, #32
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	f002 021f 	and.w	r2, r2, #31
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0af      	beq.n	8002e82 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f22:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	21f8      	movs	r1, #248	; 0xf8
 8002f38:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002f40:	fa91 f1a1 	rbit	r1, r1
 8002f44:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002f48:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002f4c:	fab1 f181 	clz	r1, r1
 8002f50:	b2c9      	uxtb	r1, r1
 8002f52:	408b      	lsls	r3, r1
 8002f54:	4920      	ldr	r1, [pc, #128]	; (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
 8002f5a:	e06c      	b.n	8003036 <HAL_RCC_OscConfig+0x646>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002f6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	461a      	mov	r2, r3
 8002f84:	2300      	movs	r3, #0
 8002f86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe fb88 	bl	800169c <HAL_GetTick>
 8002f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f92:	f7fe fb83 	bl	800169c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d902      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	f000 bd5a 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d104      	bne.n	8002fdc <HAL_RCC_OscConfig+0x5ec>
 8002fd2:	4b01      	ldr	r3, [pc, #4]	; (8002fd8 <HAL_RCC_OscConfig+0x5e8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	e015      	b.n	8003004 <HAL_RCC_OscConfig+0x614>
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	2302      	movs	r3, #2
 8002fde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002ff4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003000:	4bc8      	ldr	r3, [pc, #800]	; (8003324 <HAL_RCC_OscConfig+0x934>)
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2202      	movs	r2, #2
 8003006:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800300a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800300e:	fa92 f2a2 	rbit	r2, r2
 8003012:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003016:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800301a:	fab2 f282 	clz	r2, r2
 800301e:	b2d2      	uxtb	r2, r2
 8003020:	f042 0220 	orr.w	r2, r2, #32
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	f002 021f 	and.w	r2, r2, #31
 800302a:	2101      	movs	r1, #1
 800302c:	fa01 f202 	lsl.w	r2, r1, r2
 8003030:	4013      	ands	r3, r2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1ad      	bne.n	8002f92 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8110 	beq.w	800326c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800304c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003050:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d079      	beq.n	8003150 <HAL_RCC_OscConfig+0x760>
 800305c:	2301      	movs	r3, #1
 800305e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800306e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003072:	fab3 f383 	clz	r3, r3
 8003076:	b2db      	uxtb	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	4bab      	ldr	r3, [pc, #684]	; (8003328 <HAL_RCC_OscConfig+0x938>)
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	461a      	mov	r2, r3
 8003082:	2301      	movs	r3, #1
 8003084:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003086:	f7fe fb09 	bl	800169c <HAL_GetTick>
 800308a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003090:	f7fe fb04 	bl	800169c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d902      	bls.n	80030a6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	f000 bcdb 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
 80030a6:	2302      	movs	r3, #2
 80030a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80030c0:	2202      	movs	r2, #2
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	fa93 f2a3 	rbit	r2, r3
 80030d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030e4:	2202      	movs	r2, #2
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	fa93 f2a3 	rbit	r2, r3
 80030f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003100:	4b88      	ldr	r3, [pc, #544]	; (8003324 <HAL_RCC_OscConfig+0x934>)
 8003102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003108:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800310c:	2102      	movs	r1, #2
 800310e:	6019      	str	r1, [r3, #0]
 8003110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003114:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	fa93 f1a3 	rbit	r1, r3
 800311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003122:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003126:	6019      	str	r1, [r3, #0]
  return result;
 8003128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	2101      	movs	r1, #1
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0a0      	beq.n	8003090 <HAL_RCC_OscConfig+0x6a0>
 800314e:	e08d      	b.n	800326c <HAL_RCC_OscConfig+0x87c>
 8003150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003154:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003160:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	fa93 f2a3 	rbit	r2, r3
 800316a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003172:	601a      	str	r2, [r3, #0]
  return result;
 8003174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003178:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800317c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	461a      	mov	r2, r3
 8003186:	4b68      	ldr	r3, [pc, #416]	; (8003328 <HAL_RCC_OscConfig+0x938>)
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	461a      	mov	r2, r3
 800318e:	2300      	movs	r3, #0
 8003190:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003192:	f7fe fa83 	bl	800169c <HAL_GetTick>
 8003196:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800319c:	f7fe fa7e 	bl	800169c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d902      	bls.n	80031b2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	f000 bc55 	b.w	8003a5c <HAL_RCC_OscConfig+0x106c>
 80031b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80031ba:	2202      	movs	r2, #2
 80031bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	fa93 f2a3 	rbit	r2, r3
 80031cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031de:	2202      	movs	r2, #2
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	fa93 f2a3 	rbit	r2, r3
 80031f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003202:	2202      	movs	r2, #2
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	fa93 f2a3 	rbit	r2, r3
 8003214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003218:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800321c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321e:	4b41      	ldr	r3, [pc, #260]	; (8003324 <HAL_RCC_OscConfig+0x934>)
 8003220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003226:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800322a:	2102      	movs	r1, #2
 800322c:	6019      	str	r1, [r3, #0]
 800322e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003232:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	fa93 f1a3 	rbit	r1, r3
 800323c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003240:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003244:	6019      	str	r1, [r3, #0]
  return result;
 8003246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	2101      	movs	r1, #1
 8003262:	fa01 f303 	lsl.w	r3, r1, r3
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d197      	bne.n	800319c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800326c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003270:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 81a1 	beq.w	80035c4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003288:	4b26      	ldr	r3, [pc, #152]	; (8003324 <HAL_RCC_OscConfig+0x934>)
 800328a:	69db      	ldr	r3, [r3, #28]
 800328c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d116      	bne.n	80032c2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003294:	4b23      	ldr	r3, [pc, #140]	; (8003324 <HAL_RCC_OscConfig+0x934>)
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	4a22      	ldr	r2, [pc, #136]	; (8003324 <HAL_RCC_OscConfig+0x934>)
 800329a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329e:	61d3      	str	r3, [r2, #28]
 80032a0:	4b20      	ldr	r3, [pc, #128]	; (8003324 <HAL_RCC_OscConfig+0x934>)
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80032a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ac:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80032ba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	4b1a      	ldr	r3, [pc, #104]	; (800332c <HAL_RCC_OscConfig+0x93c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d11a      	bne.n	8003304 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ce:	4b17      	ldr	r3, [pc, #92]	; (800332c <HAL_RCC_OscConfig+0x93c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a16      	ldr	r2, [pc, #88]	; (800332c <HAL_RCC_OscConfig+0x93c>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032da:	f7fe f9df 	bl	800169c <HAL_GetTick>
 80032de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e2:	e009      	b.n	80032f8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e4:	f7fe f9da 	bl	800169c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b64      	cmp	r3, #100	; 0x64
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e3b1      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f8:	4b0c      	ldr	r3, [pc, #48]	; (800332c <HAL_RCC_OscConfig+0x93c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0ef      	beq.n	80032e4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003308:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d10d      	bne.n	8003330 <HAL_RCC_OscConfig+0x940>
 8003314:	4b03      	ldr	r3, [pc, #12]	; (8003324 <HAL_RCC_OscConfig+0x934>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4a02      	ldr	r2, [pc, #8]	; (8003324 <HAL_RCC_OscConfig+0x934>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6213      	str	r3, [r2, #32]
 8003320:	e03c      	b.n	800339c <HAL_RCC_OscConfig+0x9ac>
 8003322:	bf00      	nop
 8003324:	40021000 	.word	0x40021000
 8003328:	10908120 	.word	0x10908120
 800332c:	40007000 	.word	0x40007000
 8003330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003334:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10c      	bne.n	800335a <HAL_RCC_OscConfig+0x96a>
 8003340:	4bc1      	ldr	r3, [pc, #772]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	4ac0      	ldr	r2, [pc, #768]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	6213      	str	r3, [r2, #32]
 800334c:	4bbe      	ldr	r3, [pc, #760]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	4abd      	ldr	r2, [pc, #756]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003352:	f023 0304 	bic.w	r3, r3, #4
 8003356:	6213      	str	r3, [r2, #32]
 8003358:	e020      	b.n	800339c <HAL_RCC_OscConfig+0x9ac>
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b05      	cmp	r3, #5
 8003368:	d10c      	bne.n	8003384 <HAL_RCC_OscConfig+0x994>
 800336a:	4bb7      	ldr	r3, [pc, #732]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	4ab6      	ldr	r2, [pc, #728]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003370:	f043 0304 	orr.w	r3, r3, #4
 8003374:	6213      	str	r3, [r2, #32]
 8003376:	4bb4      	ldr	r3, [pc, #720]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4ab3      	ldr	r2, [pc, #716]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6213      	str	r3, [r2, #32]
 8003382:	e00b      	b.n	800339c <HAL_RCC_OscConfig+0x9ac>
 8003384:	4bb0      	ldr	r3, [pc, #704]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4aaf      	ldr	r2, [pc, #700]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	6213      	str	r3, [r2, #32]
 8003390:	4bad      	ldr	r3, [pc, #692]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	4aac      	ldr	r2, [pc, #688]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003396:	f023 0304 	bic.w	r3, r3, #4
 800339a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800339c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8081 	beq.w	80034b0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fe f975 	bl	800169c <HAL_GetTick>
 80033b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b6:	e00b      	b.n	80033d0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fe f970 	bl	800169c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e345      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
 80033d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033d8:	2202      	movs	r2, #2
 80033da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	fa93 f2a3 	rbit	r2, r3
 80033ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80033fc:	2202      	movs	r2, #2
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003404:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	fa93 f2a3 	rbit	r2, r3
 800340e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003412:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003416:	601a      	str	r2, [r3, #0]
  return result;
 8003418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003420:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f043 0302 	orr.w	r3, r3, #2
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d102      	bne.n	800343c <HAL_RCC_OscConfig+0xa4c>
 8003436:	4b84      	ldr	r3, [pc, #528]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	e013      	b.n	8003464 <HAL_RCC_OscConfig+0xa74>
 800343c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003440:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003444:	2202      	movs	r2, #2
 8003446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fa93 f2a3 	rbit	r2, r3
 8003456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	4b79      	ldr	r3, [pc, #484]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003468:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800346c:	2102      	movs	r1, #2
 800346e:	6011      	str	r1, [r2, #0]
 8003470:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003474:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	fa92 f1a2 	rbit	r1, r2
 800347e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003482:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003486:	6011      	str	r1, [r2, #0]
  return result;
 8003488:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800348c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003490:	6812      	ldr	r2, [r2, #0]
 8003492:	fab2 f282 	clz	r2, r2
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	f002 021f 	and.w	r2, r2, #31
 80034a2:	2101      	movs	r1, #1
 80034a4:	fa01 f202 	lsl.w	r2, r1, r2
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d084      	beq.n	80033b8 <HAL_RCC_OscConfig+0x9c8>
 80034ae:	e07f      	b.n	80035b0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b0:	f7fe f8f4 	bl	800169c <HAL_GetTick>
 80034b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b8:	e00b      	b.n	80034d2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fe f8ef 	bl	800169c <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e2c4      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
 80034d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80034da:	2202      	movs	r2, #2
 80034dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	fa93 f2a3 	rbit	r2, r3
 80034ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80034fe:	2202      	movs	r2, #2
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003506:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	fa93 f2a3 	rbit	r2, r3
 8003510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003514:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003518:	601a      	str	r2, [r3, #0]
  return result;
 800351a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003522:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f043 0302 	orr.w	r3, r3, #2
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d102      	bne.n	800353e <HAL_RCC_OscConfig+0xb4e>
 8003538:	4b43      	ldr	r3, [pc, #268]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	e013      	b.n	8003566 <HAL_RCC_OscConfig+0xb76>
 800353e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003542:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003546:	2202      	movs	r2, #2
 8003548:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	fa93 f2a3 	rbit	r2, r3
 8003558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	4b39      	ldr	r3, [pc, #228]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800356a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800356e:	2102      	movs	r1, #2
 8003570:	6011      	str	r1, [r2, #0]
 8003572:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003576:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	fa92 f1a2 	rbit	r1, r2
 8003580:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003584:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003588:	6011      	str	r1, [r2, #0]
  return result;
 800358a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800358e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	fab2 f282 	clz	r2, r2
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	f002 021f 	and.w	r2, r2, #31
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f202 	lsl.w	r2, r1, r2
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d184      	bne.n	80034ba <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035b0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d105      	bne.n	80035c4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b8:	4b23      	ldr	r3, [pc, #140]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	4a22      	ldr	r2, [pc, #136]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 80035be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8242 	beq.w	8003a5a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d6:	4b1c      	ldr	r3, [pc, #112]	; (8003648 <HAL_RCC_OscConfig+0xc58>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b08      	cmp	r3, #8
 80035e0:	f000 8213 	beq.w	8003a0a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	f040 8162 	bne.w	80038ba <HAL_RCC_OscConfig+0xeca>
 80035f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fa:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80035fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003608:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	fa93 f2a3 	rbit	r2, r3
 8003612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003616:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800361a:	601a      	str	r2, [r3, #0]
  return result;
 800361c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003620:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003624:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003630:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	461a      	mov	r2, r3
 8003638:	2300      	movs	r3, #0
 800363a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fe f82e 	bl	800169c <HAL_GetTick>
 8003640:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003644:	e00c      	b.n	8003660 <HAL_RCC_OscConfig+0xc70>
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe f826 	bl	800169c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e1fd      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
 8003660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003664:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003668:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800366c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003672:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	fa93 f2a3 	rbit	r2, r3
 800367c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003680:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003684:	601a      	str	r2, [r3, #0]
  return result;
 8003686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800368e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	b2db      	uxtb	r3, r3
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d102      	bne.n	80036aa <HAL_RCC_OscConfig+0xcba>
 80036a4:	4bb0      	ldr	r3, [pc, #704]	; (8003968 <HAL_RCC_OscConfig+0xf78>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	e027      	b.n	80036fa <HAL_RCC_OscConfig+0xd0a>
 80036aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80036b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036bc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	fa93 f2a3 	rbit	r2, r3
 80036c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ca:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80036d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	fa93 f2a3 	rbit	r2, r3
 80036ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	4b9c      	ldr	r3, [pc, #624]	; (8003968 <HAL_RCC_OscConfig+0xf78>)
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036fe:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003702:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003706:	6011      	str	r1, [r2, #0]
 8003708:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800370c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	fa92 f1a2 	rbit	r1, r2
 8003716:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800371a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800371e:	6011      	str	r1, [r2, #0]
  return result;
 8003720:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003724:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	fab2 f282 	clz	r2, r2
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	f042 0220 	orr.w	r2, r2, #32
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	f002 021f 	and.w	r2, r2, #31
 800373a:	2101      	movs	r1, #1
 800373c:	fa01 f202 	lsl.w	r2, r1, r2
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d182      	bne.n	800364c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003746:	4b88      	ldr	r3, [pc, #544]	; (8003968 <HAL_RCC_OscConfig+0xf78>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800374e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	430b      	orrs	r3, r1
 8003768:	497f      	ldr	r1, [pc, #508]	; (8003968 <HAL_RCC_OscConfig+0xf78>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
 800376e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003772:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003776:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800377a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003780:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	fa93 f2a3 	rbit	r2, r3
 800378a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003792:	601a      	str	r2, [r3, #0]
  return result;
 8003794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003798:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800379c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80037a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	461a      	mov	r2, r3
 80037b0:	2301      	movs	r3, #1
 80037b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fd ff72 	bl	800169c <HAL_GetTick>
 80037b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037bc:	e009      	b.n	80037d2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037be:	f7fd ff6d 	bl	800169c <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e144      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
 80037d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80037da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	fa93 f2a3 	rbit	r2, r3
 80037ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80037f6:	601a      	str	r2, [r3, #0]
  return result;
 80037f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003800:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d102      	bne.n	800381c <HAL_RCC_OscConfig+0xe2c>
 8003816:	4b54      	ldr	r3, [pc, #336]	; (8003968 <HAL_RCC_OscConfig+0xf78>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	e027      	b.n	800386c <HAL_RCC_OscConfig+0xe7c>
 800381c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003820:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003824:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	fa93 f2a3 	rbit	r2, r3
 8003838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003846:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800384a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003854:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	fa93 f2a3 	rbit	r2, r3
 800385e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003862:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	4b3f      	ldr	r3, [pc, #252]	; (8003968 <HAL_RCC_OscConfig+0xf78>)
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003870:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003874:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003878:	6011      	str	r1, [r2, #0]
 800387a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800387e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	fa92 f1a2 	rbit	r1, r2
 8003888:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800388c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003890:	6011      	str	r1, [r2, #0]
  return result;
 8003892:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003896:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	fab2 f282 	clz	r2, r2
 80038a0:	b2d2      	uxtb	r2, r2
 80038a2:	f042 0220 	orr.w	r2, r2, #32
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	f002 021f 	and.w	r2, r2, #31
 80038ac:	2101      	movs	r1, #1
 80038ae:	fa01 f202 	lsl.w	r2, r1, r2
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d082      	beq.n	80037be <HAL_RCC_OscConfig+0xdce>
 80038b8:	e0cf      	b.n	8003a5a <HAL_RCC_OscConfig+0x106a>
 80038ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038be:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80038c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038cc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	fa93 f2a3 	rbit	r2, r3
 80038d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038da:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80038de:	601a      	str	r2, [r3, #0]
  return result;
 80038e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80038e8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	461a      	mov	r2, r3
 80038fc:	2300      	movs	r3, #0
 80038fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fd fecc 	bl	800169c <HAL_GetTick>
 8003904:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003908:	e009      	b.n	800391e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390a:	f7fd fec7 	bl	800169c <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e09e      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
 800391e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003922:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800392a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003930:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	fa93 f2a3 	rbit	r2, r3
 800393a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800393e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003942:	601a      	str	r2, [r3, #0]
  return result;
 8003944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003948:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800394c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d104      	bne.n	800396c <HAL_RCC_OscConfig+0xf7c>
 8003962:	4b01      	ldr	r3, [pc, #4]	; (8003968 <HAL_RCC_OscConfig+0xf78>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	e029      	b.n	80039bc <HAL_RCC_OscConfig+0xfcc>
 8003968:	40021000 	.word	0x40021000
 800396c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003970:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003974:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	fa93 f2a3 	rbit	r2, r3
 8003988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003996:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800399a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	fa93 f2a3 	rbit	r2, r3
 80039ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <HAL_RCC_OscConfig+0x1078>)
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039c0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80039c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80039c8:	6011      	str	r1, [r2, #0]
 80039ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039ce:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	fa92 f1a2 	rbit	r1, r2
 80039d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039dc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80039e0:	6011      	str	r1, [r2, #0]
  return result;
 80039e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039e6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	fab2 f282 	clz	r2, r2
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	f042 0220 	orr.w	r2, r2, #32
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	f002 021f 	and.w	r2, r2, #31
 80039fc:	2101      	movs	r1, #1
 80039fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d180      	bne.n	800390a <HAL_RCC_OscConfig+0xf1a>
 8003a08:	e027      	b.n	8003a5a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e01e      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a1e:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <HAL_RCC_OscConfig+0x1078>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a26:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a2a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d10b      	bne.n	8003a56 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d001      	beq.n	8003a5a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000

08003a6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b09e      	sub	sp, #120	; 0x78
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e162      	b.n	8003d4a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a84:	4b90      	ldr	r3, [pc, #576]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d910      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b8d      	ldr	r3, [pc, #564]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 0207 	bic.w	r2, r3, #7
 8003a9a:	498b      	ldr	r1, [pc, #556]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b89      	ldr	r3, [pc, #548]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e14a      	b.n	8003d4a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ac0:	4b82      	ldr	r3, [pc, #520]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	497f      	ldr	r1, [pc, #508]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 80dc 	beq.w	8003c98 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d13c      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xf6>
 8003ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003af0:	fa93 f3a3 	rbit	r3, r3
 8003af4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af8:	fab3 f383 	clz	r3, r3
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d102      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xa6>
 8003b0c:	4b6f      	ldr	r3, [pc, #444]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	e00f      	b.n	8003b32 <HAL_RCC_ClockConfig+0xc6>
 8003b12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	667b      	str	r3, [r7, #100]	; 0x64
 8003b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b24:	663b      	str	r3, [r7, #96]	; 0x60
 8003b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b28:	fa93 f3a3 	rbit	r3, r3
 8003b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b2e:	4b67      	ldr	r3, [pc, #412]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b36:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b3a:	fa92 f2a2 	rbit	r2, r2
 8003b3e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b42:	fab2 f282 	clz	r2, r2
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	f042 0220 	orr.w	r2, r2, #32
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	f002 021f 	and.w	r2, r2, #31
 8003b52:	2101      	movs	r1, #1
 8003b54:	fa01 f202 	lsl.w	r2, r1, r2
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d17b      	bne.n	8003c56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e0f3      	b.n	8003d4a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d13c      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x178>
 8003b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b72:	fa93 f3a3 	rbit	r3, r3
 8003b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d102      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x128>
 8003b8e:	4b4f      	ldr	r3, [pc, #316]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	e00f      	b.n	8003bb4 <HAL_RCC_ClockConfig+0x148>
 8003b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b98:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b9c:	fa93 f3a3 	rbit	r3, r3
 8003ba0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003baa:	fa93 f3a3 	rbit	r3, r3
 8003bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb0:	4b46      	ldr	r3, [pc, #280]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bb8:	63ba      	str	r2, [r7, #56]	; 0x38
 8003bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bbc:	fa92 f2a2 	rbit	r2, r2
 8003bc0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bc4:	fab2 f282 	clz	r2, r2
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	f042 0220 	orr.w	r2, r2, #32
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	f002 021f 	and.w	r2, r2, #31
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d13a      	bne.n	8003c56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0b2      	b.n	8003d4a <HAL_RCC_ClockConfig+0x2de>
 8003be4:	2302      	movs	r3, #2
 8003be6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	fa93 f3a3 	rbit	r3, r3
 8003bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf2:	fab3 f383 	clz	r3, r3
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d102      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x1a0>
 8003c06:	4b31      	ldr	r3, [pc, #196]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	e00d      	b.n	8003c28 <HAL_RCC_ClockConfig+0x1bc>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	fa93 f3a3 	rbit	r3, r3
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
 8003c18:	2302      	movs	r3, #2
 8003c1a:	623b      	str	r3, [r7, #32]
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	fa93 f3a3 	rbit	r3, r3
 8003c22:	61fb      	str	r3, [r7, #28]
 8003c24:	4b29      	ldr	r3, [pc, #164]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	2202      	movs	r2, #2
 8003c2a:	61ba      	str	r2, [r7, #24]
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	fa92 f2a2 	rbit	r2, r2
 8003c32:	617a      	str	r2, [r7, #20]
  return result;
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	fab2 f282 	clz	r2, r2
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	f042 0220 	orr.w	r2, r2, #32
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	f002 021f 	and.w	r2, r2, #31
 8003c46:	2101      	movs	r1, #1
 8003c48:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e079      	b.n	8003d4a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c56:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f023 0203 	bic.w	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	491a      	ldr	r1, [pc, #104]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c68:	f7fd fd18 	bl	800169c <HAL_GetTick>
 8003c6c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c70:	f7fd fd14 	bl	800169c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e061      	b.n	8003d4a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_RCC_ClockConfig+0x260>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 020c 	and.w	r2, r3, #12
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d1eb      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d214      	bcs.n	8003cd0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca6:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f023 0207 	bic.w	r2, r3, #7
 8003cae:	4906      	ldr	r1, [pc, #24]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb6:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <HAL_RCC_ClockConfig+0x25c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e040      	b.n	8003d4a <HAL_RCC_ClockConfig+0x2de>
 8003cc8:	40022000 	.word	0x40022000
 8003ccc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <HAL_RCC_ClockConfig+0x2e8>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	491a      	ldr	r1, [pc, #104]	; (8003d54 <HAL_RCC_ClockConfig+0x2e8>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfa:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <HAL_RCC_ClockConfig+0x2e8>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4912      	ldr	r1, [pc, #72]	; (8003d54 <HAL_RCC_ClockConfig+0x2e8>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d0e:	f000 f829 	bl	8003d64 <HAL_RCC_GetSysClockFreq>
 8003d12:	4601      	mov	r1, r0
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <HAL_RCC_ClockConfig+0x2e8>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d1c:	22f0      	movs	r2, #240	; 0xf0
 8003d1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	fa92 f2a2 	rbit	r2, r2
 8003d26:	60fa      	str	r2, [r7, #12]
  return result;
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	fab2 f282 	clz	r2, r2
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	40d3      	lsrs	r3, r2
 8003d32:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <HAL_RCC_ClockConfig+0x2ec>)
 8003d34:	5cd3      	ldrb	r3, [r2, r3]
 8003d36:	fa21 f303 	lsr.w	r3, r1, r3
 8003d3a:	4a08      	ldr	r2, [pc, #32]	; (8003d5c <HAL_RCC_ClockConfig+0x2f0>)
 8003d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <HAL_RCC_ClockConfig+0x2f4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fd fc66 	bl	8001614 <HAL_InitTick>
  
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3778      	adds	r7, #120	; 0x78
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	08005438 	.word	0x08005438
 8003d5c:	20000000 	.word	0x20000000
 8003d60:	20000004 	.word	0x20000004

08003d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b08b      	sub	sp, #44	; 0x2c
 8003d68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003d7e:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 030c 	and.w	r3, r3, #12
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d002      	beq.n	8003d94 <HAL_RCC_GetSysClockFreq+0x30>
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d003      	beq.n	8003d9a <HAL_RCC_GetSysClockFreq+0x36>
 8003d92:	e03c      	b.n	8003e0e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d94:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003d96:	623b      	str	r3, [r7, #32]
      break;
 8003d98:	e03c      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003da0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003da4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	fa92 f2a2 	rbit	r2, r2
 8003dac:	607a      	str	r2, [r7, #4]
  return result;
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	fab2 f282 	clz	r2, r2
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	40d3      	lsrs	r3, r2
 8003db8:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003dba:	5cd3      	ldrb	r3, [r2, r3]
 8003dbc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003dbe:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	220f      	movs	r2, #15
 8003dc8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	fa92 f2a2 	rbit	r2, r2
 8003dd0:	60fa      	str	r2, [r7, #12]
  return result;
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	fab2 f282 	clz	r2, r2
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	40d3      	lsrs	r3, r2
 8003ddc:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003dde:	5cd3      	ldrb	r3, [r2, r3]
 8003de0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003dec:	4a0e      	ldr	r2, [pc, #56]	; (8003e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfc:	e004      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	4a0c      	ldr	r2, [pc, #48]	; (8003e34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	623b      	str	r3, [r7, #32]
      break;
 8003e0c:	e002      	b.n	8003e14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e10:	623b      	str	r3, [r7, #32]
      break;
 8003e12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e14:	6a3b      	ldr	r3, [r7, #32]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	372c      	adds	r7, #44	; 0x2c
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000
 8003e28:	007a1200 	.word	0x007a1200
 8003e2c:	08005448 	.word	0x08005448
 8003e30:	08005458 	.word	0x08005458
 8003e34:	003d0900 	.word	0x003d0900

08003e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b092      	sub	sp, #72	; 0x48
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 80cd 	beq.w	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5c:	4b86      	ldr	r3, [pc, #536]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10e      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e68:	4b83      	ldr	r3, [pc, #524]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	4a82      	ldr	r2, [pc, #520]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e72:	61d3      	str	r3, [r2, #28]
 8003e74:	4b80      	ldr	r3, [pc, #512]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e86:	4b7d      	ldr	r3, [pc, #500]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d118      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e92:	4b7a      	ldr	r3, [pc, #488]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a79      	ldr	r2, [pc, #484]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9e:	f7fd fbfd 	bl	800169c <HAL_GetTick>
 8003ea2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea6:	f7fd fbf9 	bl	800169c <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b64      	cmp	r3, #100	; 0x64
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e0db      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb8:	4b70      	ldr	r3, [pc, #448]	; (800407c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ec4:	4b6c      	ldr	r3, [pc, #432]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d07d      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003edc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d076      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ee2:	4b65      	ldr	r3, [pc, #404]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ef0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	fa93 f3a3 	rbit	r3, r3
 8003ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003efc:	fab3 f383 	clz	r3, r3
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	4b5e      	ldr	r3, [pc, #376]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f06:	4413      	add	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f18:	fa93 f3a3 	rbit	r3, r3
 8003f1c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f20:	fab3 f383 	clz	r3, r3
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	461a      	mov	r2, r3
 8003f28:	4b55      	ldr	r3, [pc, #340]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f2a:	4413      	add	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	461a      	mov	r2, r3
 8003f30:	2300      	movs	r3, #0
 8003f32:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f34:	4a50      	ldr	r2, [pc, #320]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f38:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d045      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fd fbaa 	bl	800169c <HAL_GetTick>
 8003f48:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4c:	f7fd fba6 	bl	800169c <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e086      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003f62:	2302      	movs	r3, #2
 8003f64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	fa93 f3a3 	rbit	r3, r3
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6e:	2302      	movs	r3, #2
 8003f70:	623b      	str	r3, [r7, #32]
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	61fb      	str	r3, [r7, #28]
  return result;
 8003f7a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7c:	fab3 f383 	clz	r3, r3
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f043 0302 	orr.w	r3, r3, #2
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d102      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f90:	4b39      	ldr	r3, [pc, #228]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	e007      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003f96:	2302      	movs	r3, #2
 8003f98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	fa93 f3a3 	rbit	r3, r3
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	4b35      	ldr	r3, [pc, #212]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	613a      	str	r2, [r7, #16]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	fa92 f2a2 	rbit	r2, r2
 8003fb0:	60fa      	str	r2, [r7, #12]
  return result;
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	fab2 f282 	clz	r2, r2
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	f002 021f 	and.w	r2, r2, #31
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0bd      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003fd0:	4b29      	ldr	r3, [pc, #164]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4926      	ldr	r1, [pc, #152]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fe2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d105      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fea:	4b23      	ldr	r3, [pc, #140]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	4a22      	ldr	r2, [pc, #136]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004002:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f023 0203 	bic.w	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	491a      	ldr	r1, [pc, #104]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004010:	4313      	orrs	r3, r2
 8004012:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d008      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004020:	4b15      	ldr	r3, [pc, #84]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	f023 0210 	bic.w	r2, r3, #16
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	4912      	ldr	r1, [pc, #72]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800402e:	4313      	orrs	r3, r2
 8004030:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403a:	2b00      	cmp	r3, #0
 800403c:	d008      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800403e:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	490b      	ldr	r1, [pc, #44]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800404c:	4313      	orrs	r3, r2
 800404e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	4903      	ldr	r1, [pc, #12]	; (8004078 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800406a:	4313      	orrs	r3, r2
 800406c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3748      	adds	r7, #72	; 0x48
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40021000 	.word	0x40021000
 800407c:	40007000 	.word	0x40007000
 8004080:	10908100 	.word	0x10908100
 8004084:	00000000 	.word	0x00000000

08004088 <log>:
 8004088:	b538      	push	{r3, r4, r5, lr}
 800408a:	ed2d 8b02 	vpush	{d8}
 800408e:	ec55 4b10 	vmov	r4, r5, d0
 8004092:	f000 f839 	bl	8004108 <__ieee754_log>
 8004096:	4622      	mov	r2, r4
 8004098:	462b      	mov	r3, r5
 800409a:	4620      	mov	r0, r4
 800409c:	4629      	mov	r1, r5
 800409e:	eeb0 8a40 	vmov.f32	s16, s0
 80040a2:	eef0 8a60 	vmov.f32	s17, s1
 80040a6:	f7fc fd39 	bl	8000b1c <__aeabi_dcmpun>
 80040aa:	b998      	cbnz	r0, 80040d4 <log+0x4c>
 80040ac:	2200      	movs	r2, #0
 80040ae:	2300      	movs	r3, #0
 80040b0:	4620      	mov	r0, r4
 80040b2:	4629      	mov	r1, r5
 80040b4:	f7fc fd28 	bl	8000b08 <__aeabi_dcmpgt>
 80040b8:	b960      	cbnz	r0, 80040d4 <log+0x4c>
 80040ba:	2200      	movs	r2, #0
 80040bc:	2300      	movs	r3, #0
 80040be:	4620      	mov	r0, r4
 80040c0:	4629      	mov	r1, r5
 80040c2:	f7fc fcf9 	bl	8000ab8 <__aeabi_dcmpeq>
 80040c6:	b160      	cbz	r0, 80040e2 <log+0x5a>
 80040c8:	f000 f9e2 	bl	8004490 <__errno>
 80040cc:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80040f8 <log+0x70>
 80040d0:	2322      	movs	r3, #34	; 0x22
 80040d2:	6003      	str	r3, [r0, #0]
 80040d4:	eeb0 0a48 	vmov.f32	s0, s16
 80040d8:	eef0 0a68 	vmov.f32	s1, s17
 80040dc:	ecbd 8b02 	vpop	{d8}
 80040e0:	bd38      	pop	{r3, r4, r5, pc}
 80040e2:	f000 f9d5 	bl	8004490 <__errno>
 80040e6:	ecbd 8b02 	vpop	{d8}
 80040ea:	2321      	movs	r3, #33	; 0x21
 80040ec:	6003      	str	r3, [r0, #0]
 80040ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040f2:	4803      	ldr	r0, [pc, #12]	; (8004100 <log+0x78>)
 80040f4:	f000 b9c4 	b.w	8004480 <nan>
 80040f8:	00000000 	.word	0x00000000
 80040fc:	fff00000 	.word	0xfff00000
 8004100:	080054d1 	.word	0x080054d1
 8004104:	00000000 	.word	0x00000000

08004108 <__ieee754_log>:
 8004108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800410c:	ec51 0b10 	vmov	r0, r1, d0
 8004110:	ed2d 8b04 	vpush	{d8-d9}
 8004114:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004118:	b083      	sub	sp, #12
 800411a:	460d      	mov	r5, r1
 800411c:	da29      	bge.n	8004172 <__ieee754_log+0x6a>
 800411e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004122:	4303      	orrs	r3, r0
 8004124:	ee10 2a10 	vmov	r2, s0
 8004128:	d10c      	bne.n	8004144 <__ieee754_log+0x3c>
 800412a:	49cf      	ldr	r1, [pc, #828]	; (8004468 <__ieee754_log+0x360>)
 800412c:	2200      	movs	r2, #0
 800412e:	2300      	movs	r3, #0
 8004130:	2000      	movs	r0, #0
 8004132:	f7fc fb83 	bl	800083c <__aeabi_ddiv>
 8004136:	ec41 0b10 	vmov	d0, r0, r1
 800413a:	b003      	add	sp, #12
 800413c:	ecbd 8b04 	vpop	{d8-d9}
 8004140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004144:	2900      	cmp	r1, #0
 8004146:	da05      	bge.n	8004154 <__ieee754_log+0x4c>
 8004148:	460b      	mov	r3, r1
 800414a:	f7fc f895 	bl	8000278 <__aeabi_dsub>
 800414e:	2200      	movs	r2, #0
 8004150:	2300      	movs	r3, #0
 8004152:	e7ee      	b.n	8004132 <__ieee754_log+0x2a>
 8004154:	4bc5      	ldr	r3, [pc, #788]	; (800446c <__ieee754_log+0x364>)
 8004156:	2200      	movs	r2, #0
 8004158:	f7fc fa46 	bl	80005e8 <__aeabi_dmul>
 800415c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8004160:	460d      	mov	r5, r1
 8004162:	4ac3      	ldr	r2, [pc, #780]	; (8004470 <__ieee754_log+0x368>)
 8004164:	4295      	cmp	r5, r2
 8004166:	dd06      	ble.n	8004176 <__ieee754_log+0x6e>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	f7fc f886 	bl	800027c <__adddf3>
 8004170:	e7e1      	b.n	8004136 <__ieee754_log+0x2e>
 8004172:	2300      	movs	r3, #0
 8004174:	e7f5      	b.n	8004162 <__ieee754_log+0x5a>
 8004176:	152c      	asrs	r4, r5, #20
 8004178:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800417c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004180:	441c      	add	r4, r3
 8004182:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8004186:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800418a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800418e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8004192:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8004196:	ea42 0105 	orr.w	r1, r2, r5
 800419a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800419e:	2200      	movs	r2, #0
 80041a0:	4bb4      	ldr	r3, [pc, #720]	; (8004474 <__ieee754_log+0x36c>)
 80041a2:	f7fc f869 	bl	8000278 <__aeabi_dsub>
 80041a6:	1cab      	adds	r3, r5, #2
 80041a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	4682      	mov	sl, r0
 80041b0:	468b      	mov	fp, r1
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	dc53      	bgt.n	8004260 <__ieee754_log+0x158>
 80041b8:	2300      	movs	r3, #0
 80041ba:	f7fc fc7d 	bl	8000ab8 <__aeabi_dcmpeq>
 80041be:	b1d0      	cbz	r0, 80041f6 <__ieee754_log+0xee>
 80041c0:	2c00      	cmp	r4, #0
 80041c2:	f000 8122 	beq.w	800440a <__ieee754_log+0x302>
 80041c6:	4620      	mov	r0, r4
 80041c8:	f7fc f9a4 	bl	8000514 <__aeabi_i2d>
 80041cc:	a390      	add	r3, pc, #576	; (adr r3, 8004410 <__ieee754_log+0x308>)
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	4606      	mov	r6, r0
 80041d4:	460f      	mov	r7, r1
 80041d6:	f7fc fa07 	bl	80005e8 <__aeabi_dmul>
 80041da:	a38f      	add	r3, pc, #572	; (adr r3, 8004418 <__ieee754_log+0x310>)
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	4604      	mov	r4, r0
 80041e2:	460d      	mov	r5, r1
 80041e4:	4630      	mov	r0, r6
 80041e6:	4639      	mov	r1, r7
 80041e8:	f7fc f9fe 	bl	80005e8 <__aeabi_dmul>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4620      	mov	r0, r4
 80041f2:	4629      	mov	r1, r5
 80041f4:	e7ba      	b.n	800416c <__ieee754_log+0x64>
 80041f6:	a38a      	add	r3, pc, #552	; (adr r3, 8004420 <__ieee754_log+0x318>)
 80041f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fc:	4650      	mov	r0, sl
 80041fe:	4659      	mov	r1, fp
 8004200:	f7fc f9f2 	bl	80005e8 <__aeabi_dmul>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	2000      	movs	r0, #0
 800420a:	499b      	ldr	r1, [pc, #620]	; (8004478 <__ieee754_log+0x370>)
 800420c:	f7fc f834 	bl	8000278 <__aeabi_dsub>
 8004210:	4652      	mov	r2, sl
 8004212:	4606      	mov	r6, r0
 8004214:	460f      	mov	r7, r1
 8004216:	465b      	mov	r3, fp
 8004218:	4650      	mov	r0, sl
 800421a:	4659      	mov	r1, fp
 800421c:	f7fc f9e4 	bl	80005e8 <__aeabi_dmul>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4630      	mov	r0, r6
 8004226:	4639      	mov	r1, r7
 8004228:	f7fc f9de 	bl	80005e8 <__aeabi_dmul>
 800422c:	4606      	mov	r6, r0
 800422e:	460f      	mov	r7, r1
 8004230:	b914      	cbnz	r4, 8004238 <__ieee754_log+0x130>
 8004232:	4632      	mov	r2, r6
 8004234:	463b      	mov	r3, r7
 8004236:	e0a2      	b.n	800437e <__ieee754_log+0x276>
 8004238:	4620      	mov	r0, r4
 800423a:	f7fc f96b 	bl	8000514 <__aeabi_i2d>
 800423e:	a374      	add	r3, pc, #464	; (adr r3, 8004410 <__ieee754_log+0x308>)
 8004240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004244:	4680      	mov	r8, r0
 8004246:	4689      	mov	r9, r1
 8004248:	f7fc f9ce 	bl	80005e8 <__aeabi_dmul>
 800424c:	a372      	add	r3, pc, #456	; (adr r3, 8004418 <__ieee754_log+0x310>)
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	4604      	mov	r4, r0
 8004254:	460d      	mov	r5, r1
 8004256:	4640      	mov	r0, r8
 8004258:	4649      	mov	r1, r9
 800425a:	f7fc f9c5 	bl	80005e8 <__aeabi_dmul>
 800425e:	e0a7      	b.n	80043b0 <__ieee754_log+0x2a8>
 8004260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004264:	f7fc f80a 	bl	800027c <__adddf3>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4650      	mov	r0, sl
 800426e:	4659      	mov	r1, fp
 8004270:	f7fc fae4 	bl	800083c <__aeabi_ddiv>
 8004274:	ec41 0b18 	vmov	d8, r0, r1
 8004278:	4620      	mov	r0, r4
 800427a:	f7fc f94b 	bl	8000514 <__aeabi_i2d>
 800427e:	ec53 2b18 	vmov	r2, r3, d8
 8004282:	ec41 0b19 	vmov	d9, r0, r1
 8004286:	ec51 0b18 	vmov	r0, r1, d8
 800428a:	f7fc f9ad 	bl	80005e8 <__aeabi_dmul>
 800428e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8004292:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4680      	mov	r8, r0
 800429e:	4689      	mov	r9, r1
 80042a0:	f7fc f9a2 	bl	80005e8 <__aeabi_dmul>
 80042a4:	a360      	add	r3, pc, #384	; (adr r3, 8004428 <__ieee754_log+0x320>)
 80042a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042aa:	4606      	mov	r6, r0
 80042ac:	460f      	mov	r7, r1
 80042ae:	f7fc f99b 	bl	80005e8 <__aeabi_dmul>
 80042b2:	a35f      	add	r3, pc, #380	; (adr r3, 8004430 <__ieee754_log+0x328>)
 80042b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b8:	f7fb ffe0 	bl	800027c <__adddf3>
 80042bc:	4632      	mov	r2, r6
 80042be:	463b      	mov	r3, r7
 80042c0:	f7fc f992 	bl	80005e8 <__aeabi_dmul>
 80042c4:	a35c      	add	r3, pc, #368	; (adr r3, 8004438 <__ieee754_log+0x330>)
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f7fb ffd7 	bl	800027c <__adddf3>
 80042ce:	4632      	mov	r2, r6
 80042d0:	463b      	mov	r3, r7
 80042d2:	f7fc f989 	bl	80005e8 <__aeabi_dmul>
 80042d6:	a35a      	add	r3, pc, #360	; (adr r3, 8004440 <__ieee754_log+0x338>)
 80042d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042dc:	f7fb ffce 	bl	800027c <__adddf3>
 80042e0:	4642      	mov	r2, r8
 80042e2:	464b      	mov	r3, r9
 80042e4:	f7fc f980 	bl	80005e8 <__aeabi_dmul>
 80042e8:	a357      	add	r3, pc, #348	; (adr r3, 8004448 <__ieee754_log+0x340>)
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	4680      	mov	r8, r0
 80042f0:	4689      	mov	r9, r1
 80042f2:	4630      	mov	r0, r6
 80042f4:	4639      	mov	r1, r7
 80042f6:	f7fc f977 	bl	80005e8 <__aeabi_dmul>
 80042fa:	a355      	add	r3, pc, #340	; (adr r3, 8004450 <__ieee754_log+0x348>)
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f7fb ffbc 	bl	800027c <__adddf3>
 8004304:	4632      	mov	r2, r6
 8004306:	463b      	mov	r3, r7
 8004308:	f7fc f96e 	bl	80005e8 <__aeabi_dmul>
 800430c:	a352      	add	r3, pc, #328	; (adr r3, 8004458 <__ieee754_log+0x350>)
 800430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004312:	f7fb ffb3 	bl	800027c <__adddf3>
 8004316:	4632      	mov	r2, r6
 8004318:	463b      	mov	r3, r7
 800431a:	f7fc f965 	bl	80005e8 <__aeabi_dmul>
 800431e:	460b      	mov	r3, r1
 8004320:	4602      	mov	r2, r0
 8004322:	4649      	mov	r1, r9
 8004324:	4640      	mov	r0, r8
 8004326:	f7fb ffa9 	bl	800027c <__adddf3>
 800432a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800432e:	9b01      	ldr	r3, [sp, #4]
 8004330:	3551      	adds	r5, #81	; 0x51
 8004332:	431d      	orrs	r5, r3
 8004334:	2d00      	cmp	r5, #0
 8004336:	4680      	mov	r8, r0
 8004338:	4689      	mov	r9, r1
 800433a:	dd48      	ble.n	80043ce <__ieee754_log+0x2c6>
 800433c:	4b4e      	ldr	r3, [pc, #312]	; (8004478 <__ieee754_log+0x370>)
 800433e:	2200      	movs	r2, #0
 8004340:	4650      	mov	r0, sl
 8004342:	4659      	mov	r1, fp
 8004344:	f7fc f950 	bl	80005e8 <__aeabi_dmul>
 8004348:	4652      	mov	r2, sl
 800434a:	465b      	mov	r3, fp
 800434c:	f7fc f94c 	bl	80005e8 <__aeabi_dmul>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4606      	mov	r6, r0
 8004356:	460f      	mov	r7, r1
 8004358:	4640      	mov	r0, r8
 800435a:	4649      	mov	r1, r9
 800435c:	f7fb ff8e 	bl	800027c <__adddf3>
 8004360:	ec53 2b18 	vmov	r2, r3, d8
 8004364:	f7fc f940 	bl	80005e8 <__aeabi_dmul>
 8004368:	4680      	mov	r8, r0
 800436a:	4689      	mov	r9, r1
 800436c:	b964      	cbnz	r4, 8004388 <__ieee754_log+0x280>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4630      	mov	r0, r6
 8004374:	4639      	mov	r1, r7
 8004376:	f7fb ff7f 	bl	8000278 <__aeabi_dsub>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4650      	mov	r0, sl
 8004380:	4659      	mov	r1, fp
 8004382:	f7fb ff79 	bl	8000278 <__aeabi_dsub>
 8004386:	e6d6      	b.n	8004136 <__ieee754_log+0x2e>
 8004388:	a321      	add	r3, pc, #132	; (adr r3, 8004410 <__ieee754_log+0x308>)
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	ec51 0b19 	vmov	r0, r1, d9
 8004392:	f7fc f929 	bl	80005e8 <__aeabi_dmul>
 8004396:	a320      	add	r3, pc, #128	; (adr r3, 8004418 <__ieee754_log+0x310>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	4604      	mov	r4, r0
 800439e:	460d      	mov	r5, r1
 80043a0:	ec51 0b19 	vmov	r0, r1, d9
 80043a4:	f7fc f920 	bl	80005e8 <__aeabi_dmul>
 80043a8:	4642      	mov	r2, r8
 80043aa:	464b      	mov	r3, r9
 80043ac:	f7fb ff66 	bl	800027c <__adddf3>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4630      	mov	r0, r6
 80043b6:	4639      	mov	r1, r7
 80043b8:	f7fb ff5e 	bl	8000278 <__aeabi_dsub>
 80043bc:	4652      	mov	r2, sl
 80043be:	465b      	mov	r3, fp
 80043c0:	f7fb ff5a 	bl	8000278 <__aeabi_dsub>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4620      	mov	r0, r4
 80043ca:	4629      	mov	r1, r5
 80043cc:	e7d9      	b.n	8004382 <__ieee754_log+0x27a>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4650      	mov	r0, sl
 80043d4:	4659      	mov	r1, fp
 80043d6:	f7fb ff4f 	bl	8000278 <__aeabi_dsub>
 80043da:	ec53 2b18 	vmov	r2, r3, d8
 80043de:	f7fc f903 	bl	80005e8 <__aeabi_dmul>
 80043e2:	4606      	mov	r6, r0
 80043e4:	460f      	mov	r7, r1
 80043e6:	2c00      	cmp	r4, #0
 80043e8:	f43f af23 	beq.w	8004232 <__ieee754_log+0x12a>
 80043ec:	a308      	add	r3, pc, #32	; (adr r3, 8004410 <__ieee754_log+0x308>)
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	ec51 0b19 	vmov	r0, r1, d9
 80043f6:	f7fc f8f7 	bl	80005e8 <__aeabi_dmul>
 80043fa:	a307      	add	r3, pc, #28	; (adr r3, 8004418 <__ieee754_log+0x310>)
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	4604      	mov	r4, r0
 8004402:	460d      	mov	r5, r1
 8004404:	ec51 0b19 	vmov	r0, r1, d9
 8004408:	e727      	b.n	800425a <__ieee754_log+0x152>
 800440a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8004460 <__ieee754_log+0x358>
 800440e:	e694      	b.n	800413a <__ieee754_log+0x32>
 8004410:	fee00000 	.word	0xfee00000
 8004414:	3fe62e42 	.word	0x3fe62e42
 8004418:	35793c76 	.word	0x35793c76
 800441c:	3dea39ef 	.word	0x3dea39ef
 8004420:	55555555 	.word	0x55555555
 8004424:	3fd55555 	.word	0x3fd55555
 8004428:	df3e5244 	.word	0xdf3e5244
 800442c:	3fc2f112 	.word	0x3fc2f112
 8004430:	96cb03de 	.word	0x96cb03de
 8004434:	3fc74664 	.word	0x3fc74664
 8004438:	94229359 	.word	0x94229359
 800443c:	3fd24924 	.word	0x3fd24924
 8004440:	55555593 	.word	0x55555593
 8004444:	3fe55555 	.word	0x3fe55555
 8004448:	d078c69f 	.word	0xd078c69f
 800444c:	3fc39a09 	.word	0x3fc39a09
 8004450:	1d8e78af 	.word	0x1d8e78af
 8004454:	3fcc71c5 	.word	0x3fcc71c5
 8004458:	9997fa04 	.word	0x9997fa04
 800445c:	3fd99999 	.word	0x3fd99999
	...
 8004468:	c3500000 	.word	0xc3500000
 800446c:	43500000 	.word	0x43500000
 8004470:	7fefffff 	.word	0x7fefffff
 8004474:	3ff00000 	.word	0x3ff00000
 8004478:	3fe00000 	.word	0x3fe00000
 800447c:	00000000 	.word	0x00000000

08004480 <nan>:
 8004480:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004488 <nan+0x8>
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	00000000 	.word	0x00000000
 800448c:	7ff80000 	.word	0x7ff80000

08004490 <__errno>:
 8004490:	4b01      	ldr	r3, [pc, #4]	; (8004498 <__errno+0x8>)
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	2000000c 	.word	0x2000000c

0800449c <__libc_init_array>:
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	4d0d      	ldr	r5, [pc, #52]	; (80044d4 <__libc_init_array+0x38>)
 80044a0:	4c0d      	ldr	r4, [pc, #52]	; (80044d8 <__libc_init_array+0x3c>)
 80044a2:	1b64      	subs	r4, r4, r5
 80044a4:	10a4      	asrs	r4, r4, #2
 80044a6:	2600      	movs	r6, #0
 80044a8:	42a6      	cmp	r6, r4
 80044aa:	d109      	bne.n	80044c0 <__libc_init_array+0x24>
 80044ac:	4d0b      	ldr	r5, [pc, #44]	; (80044dc <__libc_init_array+0x40>)
 80044ae:	4c0c      	ldr	r4, [pc, #48]	; (80044e0 <__libc_init_array+0x44>)
 80044b0:	f000 ffae 	bl	8005410 <_init>
 80044b4:	1b64      	subs	r4, r4, r5
 80044b6:	10a4      	asrs	r4, r4, #2
 80044b8:	2600      	movs	r6, #0
 80044ba:	42a6      	cmp	r6, r4
 80044bc:	d105      	bne.n	80044ca <__libc_init_array+0x2e>
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c4:	4798      	blx	r3
 80044c6:	3601      	adds	r6, #1
 80044c8:	e7ee      	b.n	80044a8 <__libc_init_array+0xc>
 80044ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ce:	4798      	blx	r3
 80044d0:	3601      	adds	r6, #1
 80044d2:	e7f2      	b.n	80044ba <__libc_init_array+0x1e>
 80044d4:	08005500 	.word	0x08005500
 80044d8:	08005500 	.word	0x08005500
 80044dc:	08005500 	.word	0x08005500
 80044e0:	08005504 	.word	0x08005504

080044e4 <memset>:
 80044e4:	4402      	add	r2, r0
 80044e6:	4603      	mov	r3, r0
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d100      	bne.n	80044ee <memset+0xa>
 80044ec:	4770      	bx	lr
 80044ee:	f803 1b01 	strb.w	r1, [r3], #1
 80044f2:	e7f9      	b.n	80044e8 <memset+0x4>

080044f4 <iprintf>:
 80044f4:	b40f      	push	{r0, r1, r2, r3}
 80044f6:	4b0a      	ldr	r3, [pc, #40]	; (8004520 <iprintf+0x2c>)
 80044f8:	b513      	push	{r0, r1, r4, lr}
 80044fa:	681c      	ldr	r4, [r3, #0]
 80044fc:	b124      	cbz	r4, 8004508 <iprintf+0x14>
 80044fe:	69a3      	ldr	r3, [r4, #24]
 8004500:	b913      	cbnz	r3, 8004508 <iprintf+0x14>
 8004502:	4620      	mov	r0, r4
 8004504:	f000 f866 	bl	80045d4 <__sinit>
 8004508:	ab05      	add	r3, sp, #20
 800450a:	9a04      	ldr	r2, [sp, #16]
 800450c:	68a1      	ldr	r1, [r4, #8]
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	4620      	mov	r0, r4
 8004512:	f000 f9bd 	bl	8004890 <_vfiprintf_r>
 8004516:	b002      	add	sp, #8
 8004518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800451c:	b004      	add	sp, #16
 800451e:	4770      	bx	lr
 8004520:	2000000c 	.word	0x2000000c

08004524 <std>:
 8004524:	2300      	movs	r3, #0
 8004526:	b510      	push	{r4, lr}
 8004528:	4604      	mov	r4, r0
 800452a:	e9c0 3300 	strd	r3, r3, [r0]
 800452e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004532:	6083      	str	r3, [r0, #8]
 8004534:	8181      	strh	r1, [r0, #12]
 8004536:	6643      	str	r3, [r0, #100]	; 0x64
 8004538:	81c2      	strh	r2, [r0, #14]
 800453a:	6183      	str	r3, [r0, #24]
 800453c:	4619      	mov	r1, r3
 800453e:	2208      	movs	r2, #8
 8004540:	305c      	adds	r0, #92	; 0x5c
 8004542:	f7ff ffcf 	bl	80044e4 <memset>
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <std+0x38>)
 8004548:	6263      	str	r3, [r4, #36]	; 0x24
 800454a:	4b05      	ldr	r3, [pc, #20]	; (8004560 <std+0x3c>)
 800454c:	62a3      	str	r3, [r4, #40]	; 0x28
 800454e:	4b05      	ldr	r3, [pc, #20]	; (8004564 <std+0x40>)
 8004550:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004552:	4b05      	ldr	r3, [pc, #20]	; (8004568 <std+0x44>)
 8004554:	6224      	str	r4, [r4, #32]
 8004556:	6323      	str	r3, [r4, #48]	; 0x30
 8004558:	bd10      	pop	{r4, pc}
 800455a:	bf00      	nop
 800455c:	08004e39 	.word	0x08004e39
 8004560:	08004e5b 	.word	0x08004e5b
 8004564:	08004e93 	.word	0x08004e93
 8004568:	08004eb7 	.word	0x08004eb7

0800456c <_cleanup_r>:
 800456c:	4901      	ldr	r1, [pc, #4]	; (8004574 <_cleanup_r+0x8>)
 800456e:	f000 b8af 	b.w	80046d0 <_fwalk_reent>
 8004572:	bf00      	nop
 8004574:	08005191 	.word	0x08005191

08004578 <__sfmoreglue>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	2268      	movs	r2, #104	; 0x68
 800457c:	1e4d      	subs	r5, r1, #1
 800457e:	4355      	muls	r5, r2
 8004580:	460e      	mov	r6, r1
 8004582:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004586:	f000 f8e5 	bl	8004754 <_malloc_r>
 800458a:	4604      	mov	r4, r0
 800458c:	b140      	cbz	r0, 80045a0 <__sfmoreglue+0x28>
 800458e:	2100      	movs	r1, #0
 8004590:	e9c0 1600 	strd	r1, r6, [r0]
 8004594:	300c      	adds	r0, #12
 8004596:	60a0      	str	r0, [r4, #8]
 8004598:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800459c:	f7ff ffa2 	bl	80044e4 <memset>
 80045a0:	4620      	mov	r0, r4
 80045a2:	bd70      	pop	{r4, r5, r6, pc}

080045a4 <__sfp_lock_acquire>:
 80045a4:	4801      	ldr	r0, [pc, #4]	; (80045ac <__sfp_lock_acquire+0x8>)
 80045a6:	f000 b8b3 	b.w	8004710 <__retarget_lock_acquire_recursive>
 80045aa:	bf00      	nop
 80045ac:	200000e9 	.word	0x200000e9

080045b0 <__sfp_lock_release>:
 80045b0:	4801      	ldr	r0, [pc, #4]	; (80045b8 <__sfp_lock_release+0x8>)
 80045b2:	f000 b8ae 	b.w	8004712 <__retarget_lock_release_recursive>
 80045b6:	bf00      	nop
 80045b8:	200000e9 	.word	0x200000e9

080045bc <__sinit_lock_acquire>:
 80045bc:	4801      	ldr	r0, [pc, #4]	; (80045c4 <__sinit_lock_acquire+0x8>)
 80045be:	f000 b8a7 	b.w	8004710 <__retarget_lock_acquire_recursive>
 80045c2:	bf00      	nop
 80045c4:	200000ea 	.word	0x200000ea

080045c8 <__sinit_lock_release>:
 80045c8:	4801      	ldr	r0, [pc, #4]	; (80045d0 <__sinit_lock_release+0x8>)
 80045ca:	f000 b8a2 	b.w	8004712 <__retarget_lock_release_recursive>
 80045ce:	bf00      	nop
 80045d0:	200000ea 	.word	0x200000ea

080045d4 <__sinit>:
 80045d4:	b510      	push	{r4, lr}
 80045d6:	4604      	mov	r4, r0
 80045d8:	f7ff fff0 	bl	80045bc <__sinit_lock_acquire>
 80045dc:	69a3      	ldr	r3, [r4, #24]
 80045de:	b11b      	cbz	r3, 80045e8 <__sinit+0x14>
 80045e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045e4:	f7ff bff0 	b.w	80045c8 <__sinit_lock_release>
 80045e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80045ec:	6523      	str	r3, [r4, #80]	; 0x50
 80045ee:	4b13      	ldr	r3, [pc, #76]	; (800463c <__sinit+0x68>)
 80045f0:	4a13      	ldr	r2, [pc, #76]	; (8004640 <__sinit+0x6c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80045f6:	42a3      	cmp	r3, r4
 80045f8:	bf04      	itt	eq
 80045fa:	2301      	moveq	r3, #1
 80045fc:	61a3      	streq	r3, [r4, #24]
 80045fe:	4620      	mov	r0, r4
 8004600:	f000 f820 	bl	8004644 <__sfp>
 8004604:	6060      	str	r0, [r4, #4]
 8004606:	4620      	mov	r0, r4
 8004608:	f000 f81c 	bl	8004644 <__sfp>
 800460c:	60a0      	str	r0, [r4, #8]
 800460e:	4620      	mov	r0, r4
 8004610:	f000 f818 	bl	8004644 <__sfp>
 8004614:	2200      	movs	r2, #0
 8004616:	60e0      	str	r0, [r4, #12]
 8004618:	2104      	movs	r1, #4
 800461a:	6860      	ldr	r0, [r4, #4]
 800461c:	f7ff ff82 	bl	8004524 <std>
 8004620:	68a0      	ldr	r0, [r4, #8]
 8004622:	2201      	movs	r2, #1
 8004624:	2109      	movs	r1, #9
 8004626:	f7ff ff7d 	bl	8004524 <std>
 800462a:	68e0      	ldr	r0, [r4, #12]
 800462c:	2202      	movs	r2, #2
 800462e:	2112      	movs	r1, #18
 8004630:	f7ff ff78 	bl	8004524 <std>
 8004634:	2301      	movs	r3, #1
 8004636:	61a3      	str	r3, [r4, #24]
 8004638:	e7d2      	b.n	80045e0 <__sinit+0xc>
 800463a:	bf00      	nop
 800463c:	08005468 	.word	0x08005468
 8004640:	0800456d 	.word	0x0800456d

08004644 <__sfp>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	4607      	mov	r7, r0
 8004648:	f7ff ffac 	bl	80045a4 <__sfp_lock_acquire>
 800464c:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <__sfp+0x84>)
 800464e:	681e      	ldr	r6, [r3, #0]
 8004650:	69b3      	ldr	r3, [r6, #24]
 8004652:	b913      	cbnz	r3, 800465a <__sfp+0x16>
 8004654:	4630      	mov	r0, r6
 8004656:	f7ff ffbd 	bl	80045d4 <__sinit>
 800465a:	3648      	adds	r6, #72	; 0x48
 800465c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004660:	3b01      	subs	r3, #1
 8004662:	d503      	bpl.n	800466c <__sfp+0x28>
 8004664:	6833      	ldr	r3, [r6, #0]
 8004666:	b30b      	cbz	r3, 80046ac <__sfp+0x68>
 8004668:	6836      	ldr	r6, [r6, #0]
 800466a:	e7f7      	b.n	800465c <__sfp+0x18>
 800466c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004670:	b9d5      	cbnz	r5, 80046a8 <__sfp+0x64>
 8004672:	4b16      	ldr	r3, [pc, #88]	; (80046cc <__sfp+0x88>)
 8004674:	60e3      	str	r3, [r4, #12]
 8004676:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800467a:	6665      	str	r5, [r4, #100]	; 0x64
 800467c:	f000 f847 	bl	800470e <__retarget_lock_init_recursive>
 8004680:	f7ff ff96 	bl	80045b0 <__sfp_lock_release>
 8004684:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004688:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800468c:	6025      	str	r5, [r4, #0]
 800468e:	61a5      	str	r5, [r4, #24]
 8004690:	2208      	movs	r2, #8
 8004692:	4629      	mov	r1, r5
 8004694:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004698:	f7ff ff24 	bl	80044e4 <memset>
 800469c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046a4:	4620      	mov	r0, r4
 80046a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046a8:	3468      	adds	r4, #104	; 0x68
 80046aa:	e7d9      	b.n	8004660 <__sfp+0x1c>
 80046ac:	2104      	movs	r1, #4
 80046ae:	4638      	mov	r0, r7
 80046b0:	f7ff ff62 	bl	8004578 <__sfmoreglue>
 80046b4:	4604      	mov	r4, r0
 80046b6:	6030      	str	r0, [r6, #0]
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d1d5      	bne.n	8004668 <__sfp+0x24>
 80046bc:	f7ff ff78 	bl	80045b0 <__sfp_lock_release>
 80046c0:	230c      	movs	r3, #12
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	e7ee      	b.n	80046a4 <__sfp+0x60>
 80046c6:	bf00      	nop
 80046c8:	08005468 	.word	0x08005468
 80046cc:	ffff0001 	.word	0xffff0001

080046d0 <_fwalk_reent>:
 80046d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046d4:	4606      	mov	r6, r0
 80046d6:	4688      	mov	r8, r1
 80046d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046dc:	2700      	movs	r7, #0
 80046de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046e2:	f1b9 0901 	subs.w	r9, r9, #1
 80046e6:	d505      	bpl.n	80046f4 <_fwalk_reent+0x24>
 80046e8:	6824      	ldr	r4, [r4, #0]
 80046ea:	2c00      	cmp	r4, #0
 80046ec:	d1f7      	bne.n	80046de <_fwalk_reent+0xe>
 80046ee:	4638      	mov	r0, r7
 80046f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046f4:	89ab      	ldrh	r3, [r5, #12]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d907      	bls.n	800470a <_fwalk_reent+0x3a>
 80046fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046fe:	3301      	adds	r3, #1
 8004700:	d003      	beq.n	800470a <_fwalk_reent+0x3a>
 8004702:	4629      	mov	r1, r5
 8004704:	4630      	mov	r0, r6
 8004706:	47c0      	blx	r8
 8004708:	4307      	orrs	r7, r0
 800470a:	3568      	adds	r5, #104	; 0x68
 800470c:	e7e9      	b.n	80046e2 <_fwalk_reent+0x12>

0800470e <__retarget_lock_init_recursive>:
 800470e:	4770      	bx	lr

08004710 <__retarget_lock_acquire_recursive>:
 8004710:	4770      	bx	lr

08004712 <__retarget_lock_release_recursive>:
 8004712:	4770      	bx	lr

08004714 <sbrk_aligned>:
 8004714:	b570      	push	{r4, r5, r6, lr}
 8004716:	4e0e      	ldr	r6, [pc, #56]	; (8004750 <sbrk_aligned+0x3c>)
 8004718:	460c      	mov	r4, r1
 800471a:	6831      	ldr	r1, [r6, #0]
 800471c:	4605      	mov	r5, r0
 800471e:	b911      	cbnz	r1, 8004726 <sbrk_aligned+0x12>
 8004720:	f000 fb7a 	bl	8004e18 <_sbrk_r>
 8004724:	6030      	str	r0, [r6, #0]
 8004726:	4621      	mov	r1, r4
 8004728:	4628      	mov	r0, r5
 800472a:	f000 fb75 	bl	8004e18 <_sbrk_r>
 800472e:	1c43      	adds	r3, r0, #1
 8004730:	d00a      	beq.n	8004748 <sbrk_aligned+0x34>
 8004732:	1cc4      	adds	r4, r0, #3
 8004734:	f024 0403 	bic.w	r4, r4, #3
 8004738:	42a0      	cmp	r0, r4
 800473a:	d007      	beq.n	800474c <sbrk_aligned+0x38>
 800473c:	1a21      	subs	r1, r4, r0
 800473e:	4628      	mov	r0, r5
 8004740:	f000 fb6a 	bl	8004e18 <_sbrk_r>
 8004744:	3001      	adds	r0, #1
 8004746:	d101      	bne.n	800474c <sbrk_aligned+0x38>
 8004748:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800474c:	4620      	mov	r0, r4
 800474e:	bd70      	pop	{r4, r5, r6, pc}
 8004750:	200000f0 	.word	0x200000f0

08004754 <_malloc_r>:
 8004754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004758:	1ccd      	adds	r5, r1, #3
 800475a:	f025 0503 	bic.w	r5, r5, #3
 800475e:	3508      	adds	r5, #8
 8004760:	2d0c      	cmp	r5, #12
 8004762:	bf38      	it	cc
 8004764:	250c      	movcc	r5, #12
 8004766:	2d00      	cmp	r5, #0
 8004768:	4607      	mov	r7, r0
 800476a:	db01      	blt.n	8004770 <_malloc_r+0x1c>
 800476c:	42a9      	cmp	r1, r5
 800476e:	d905      	bls.n	800477c <_malloc_r+0x28>
 8004770:	230c      	movs	r3, #12
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	2600      	movs	r6, #0
 8004776:	4630      	mov	r0, r6
 8004778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800477c:	4e2e      	ldr	r6, [pc, #184]	; (8004838 <_malloc_r+0xe4>)
 800477e:	f000 fdbb 	bl	80052f8 <__malloc_lock>
 8004782:	6833      	ldr	r3, [r6, #0]
 8004784:	461c      	mov	r4, r3
 8004786:	bb34      	cbnz	r4, 80047d6 <_malloc_r+0x82>
 8004788:	4629      	mov	r1, r5
 800478a:	4638      	mov	r0, r7
 800478c:	f7ff ffc2 	bl	8004714 <sbrk_aligned>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	4604      	mov	r4, r0
 8004794:	d14d      	bne.n	8004832 <_malloc_r+0xde>
 8004796:	6834      	ldr	r4, [r6, #0]
 8004798:	4626      	mov	r6, r4
 800479a:	2e00      	cmp	r6, #0
 800479c:	d140      	bne.n	8004820 <_malloc_r+0xcc>
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	4631      	mov	r1, r6
 80047a2:	4638      	mov	r0, r7
 80047a4:	eb04 0803 	add.w	r8, r4, r3
 80047a8:	f000 fb36 	bl	8004e18 <_sbrk_r>
 80047ac:	4580      	cmp	r8, r0
 80047ae:	d13a      	bne.n	8004826 <_malloc_r+0xd2>
 80047b0:	6821      	ldr	r1, [r4, #0]
 80047b2:	3503      	adds	r5, #3
 80047b4:	1a6d      	subs	r5, r5, r1
 80047b6:	f025 0503 	bic.w	r5, r5, #3
 80047ba:	3508      	adds	r5, #8
 80047bc:	2d0c      	cmp	r5, #12
 80047be:	bf38      	it	cc
 80047c0:	250c      	movcc	r5, #12
 80047c2:	4629      	mov	r1, r5
 80047c4:	4638      	mov	r0, r7
 80047c6:	f7ff ffa5 	bl	8004714 <sbrk_aligned>
 80047ca:	3001      	adds	r0, #1
 80047cc:	d02b      	beq.n	8004826 <_malloc_r+0xd2>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	442b      	add	r3, r5
 80047d2:	6023      	str	r3, [r4, #0]
 80047d4:	e00e      	b.n	80047f4 <_malloc_r+0xa0>
 80047d6:	6822      	ldr	r2, [r4, #0]
 80047d8:	1b52      	subs	r2, r2, r5
 80047da:	d41e      	bmi.n	800481a <_malloc_r+0xc6>
 80047dc:	2a0b      	cmp	r2, #11
 80047de:	d916      	bls.n	800480e <_malloc_r+0xba>
 80047e0:	1961      	adds	r1, r4, r5
 80047e2:	42a3      	cmp	r3, r4
 80047e4:	6025      	str	r5, [r4, #0]
 80047e6:	bf18      	it	ne
 80047e8:	6059      	strne	r1, [r3, #4]
 80047ea:	6863      	ldr	r3, [r4, #4]
 80047ec:	bf08      	it	eq
 80047ee:	6031      	streq	r1, [r6, #0]
 80047f0:	5162      	str	r2, [r4, r5]
 80047f2:	604b      	str	r3, [r1, #4]
 80047f4:	4638      	mov	r0, r7
 80047f6:	f104 060b 	add.w	r6, r4, #11
 80047fa:	f000 fd83 	bl	8005304 <__malloc_unlock>
 80047fe:	f026 0607 	bic.w	r6, r6, #7
 8004802:	1d23      	adds	r3, r4, #4
 8004804:	1af2      	subs	r2, r6, r3
 8004806:	d0b6      	beq.n	8004776 <_malloc_r+0x22>
 8004808:	1b9b      	subs	r3, r3, r6
 800480a:	50a3      	str	r3, [r4, r2]
 800480c:	e7b3      	b.n	8004776 <_malloc_r+0x22>
 800480e:	6862      	ldr	r2, [r4, #4]
 8004810:	42a3      	cmp	r3, r4
 8004812:	bf0c      	ite	eq
 8004814:	6032      	streq	r2, [r6, #0]
 8004816:	605a      	strne	r2, [r3, #4]
 8004818:	e7ec      	b.n	80047f4 <_malloc_r+0xa0>
 800481a:	4623      	mov	r3, r4
 800481c:	6864      	ldr	r4, [r4, #4]
 800481e:	e7b2      	b.n	8004786 <_malloc_r+0x32>
 8004820:	4634      	mov	r4, r6
 8004822:	6876      	ldr	r6, [r6, #4]
 8004824:	e7b9      	b.n	800479a <_malloc_r+0x46>
 8004826:	230c      	movs	r3, #12
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	4638      	mov	r0, r7
 800482c:	f000 fd6a 	bl	8005304 <__malloc_unlock>
 8004830:	e7a1      	b.n	8004776 <_malloc_r+0x22>
 8004832:	6025      	str	r5, [r4, #0]
 8004834:	e7de      	b.n	80047f4 <_malloc_r+0xa0>
 8004836:	bf00      	nop
 8004838:	200000ec 	.word	0x200000ec

0800483c <__sfputc_r>:
 800483c:	6893      	ldr	r3, [r2, #8]
 800483e:	3b01      	subs	r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	b410      	push	{r4}
 8004844:	6093      	str	r3, [r2, #8]
 8004846:	da08      	bge.n	800485a <__sfputc_r+0x1e>
 8004848:	6994      	ldr	r4, [r2, #24]
 800484a:	42a3      	cmp	r3, r4
 800484c:	db01      	blt.n	8004852 <__sfputc_r+0x16>
 800484e:	290a      	cmp	r1, #10
 8004850:	d103      	bne.n	800485a <__sfputc_r+0x1e>
 8004852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004856:	f000 bb33 	b.w	8004ec0 <__swbuf_r>
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	1c58      	adds	r0, r3, #1
 800485e:	6010      	str	r0, [r2, #0]
 8004860:	7019      	strb	r1, [r3, #0]
 8004862:	4608      	mov	r0, r1
 8004864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004868:	4770      	bx	lr

0800486a <__sfputs_r>:
 800486a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486c:	4606      	mov	r6, r0
 800486e:	460f      	mov	r7, r1
 8004870:	4614      	mov	r4, r2
 8004872:	18d5      	adds	r5, r2, r3
 8004874:	42ac      	cmp	r4, r5
 8004876:	d101      	bne.n	800487c <__sfputs_r+0x12>
 8004878:	2000      	movs	r0, #0
 800487a:	e007      	b.n	800488c <__sfputs_r+0x22>
 800487c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004880:	463a      	mov	r2, r7
 8004882:	4630      	mov	r0, r6
 8004884:	f7ff ffda 	bl	800483c <__sfputc_r>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d1f3      	bne.n	8004874 <__sfputs_r+0xa>
 800488c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004890 <_vfiprintf_r>:
 8004890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	460d      	mov	r5, r1
 8004896:	b09d      	sub	sp, #116	; 0x74
 8004898:	4614      	mov	r4, r2
 800489a:	4698      	mov	r8, r3
 800489c:	4606      	mov	r6, r0
 800489e:	b118      	cbz	r0, 80048a8 <_vfiprintf_r+0x18>
 80048a0:	6983      	ldr	r3, [r0, #24]
 80048a2:	b90b      	cbnz	r3, 80048a8 <_vfiprintf_r+0x18>
 80048a4:	f7ff fe96 	bl	80045d4 <__sinit>
 80048a8:	4b89      	ldr	r3, [pc, #548]	; (8004ad0 <_vfiprintf_r+0x240>)
 80048aa:	429d      	cmp	r5, r3
 80048ac:	d11b      	bne.n	80048e6 <_vfiprintf_r+0x56>
 80048ae:	6875      	ldr	r5, [r6, #4]
 80048b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048b2:	07d9      	lsls	r1, r3, #31
 80048b4:	d405      	bmi.n	80048c2 <_vfiprintf_r+0x32>
 80048b6:	89ab      	ldrh	r3, [r5, #12]
 80048b8:	059a      	lsls	r2, r3, #22
 80048ba:	d402      	bmi.n	80048c2 <_vfiprintf_r+0x32>
 80048bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048be:	f7ff ff27 	bl	8004710 <__retarget_lock_acquire_recursive>
 80048c2:	89ab      	ldrh	r3, [r5, #12]
 80048c4:	071b      	lsls	r3, r3, #28
 80048c6:	d501      	bpl.n	80048cc <_vfiprintf_r+0x3c>
 80048c8:	692b      	ldr	r3, [r5, #16]
 80048ca:	b9eb      	cbnz	r3, 8004908 <_vfiprintf_r+0x78>
 80048cc:	4629      	mov	r1, r5
 80048ce:	4630      	mov	r0, r6
 80048d0:	f000 fb5a 	bl	8004f88 <__swsetup_r>
 80048d4:	b1c0      	cbz	r0, 8004908 <_vfiprintf_r+0x78>
 80048d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048d8:	07dc      	lsls	r4, r3, #31
 80048da:	d50e      	bpl.n	80048fa <_vfiprintf_r+0x6a>
 80048dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048e0:	b01d      	add	sp, #116	; 0x74
 80048e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e6:	4b7b      	ldr	r3, [pc, #492]	; (8004ad4 <_vfiprintf_r+0x244>)
 80048e8:	429d      	cmp	r5, r3
 80048ea:	d101      	bne.n	80048f0 <_vfiprintf_r+0x60>
 80048ec:	68b5      	ldr	r5, [r6, #8]
 80048ee:	e7df      	b.n	80048b0 <_vfiprintf_r+0x20>
 80048f0:	4b79      	ldr	r3, [pc, #484]	; (8004ad8 <_vfiprintf_r+0x248>)
 80048f2:	429d      	cmp	r5, r3
 80048f4:	bf08      	it	eq
 80048f6:	68f5      	ldreq	r5, [r6, #12]
 80048f8:	e7da      	b.n	80048b0 <_vfiprintf_r+0x20>
 80048fa:	89ab      	ldrh	r3, [r5, #12]
 80048fc:	0598      	lsls	r0, r3, #22
 80048fe:	d4ed      	bmi.n	80048dc <_vfiprintf_r+0x4c>
 8004900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004902:	f7ff ff06 	bl	8004712 <__retarget_lock_release_recursive>
 8004906:	e7e9      	b.n	80048dc <_vfiprintf_r+0x4c>
 8004908:	2300      	movs	r3, #0
 800490a:	9309      	str	r3, [sp, #36]	; 0x24
 800490c:	2320      	movs	r3, #32
 800490e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004912:	f8cd 800c 	str.w	r8, [sp, #12]
 8004916:	2330      	movs	r3, #48	; 0x30
 8004918:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004adc <_vfiprintf_r+0x24c>
 800491c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004920:	f04f 0901 	mov.w	r9, #1
 8004924:	4623      	mov	r3, r4
 8004926:	469a      	mov	sl, r3
 8004928:	f813 2b01 	ldrb.w	r2, [r3], #1
 800492c:	b10a      	cbz	r2, 8004932 <_vfiprintf_r+0xa2>
 800492e:	2a25      	cmp	r2, #37	; 0x25
 8004930:	d1f9      	bne.n	8004926 <_vfiprintf_r+0x96>
 8004932:	ebba 0b04 	subs.w	fp, sl, r4
 8004936:	d00b      	beq.n	8004950 <_vfiprintf_r+0xc0>
 8004938:	465b      	mov	r3, fp
 800493a:	4622      	mov	r2, r4
 800493c:	4629      	mov	r1, r5
 800493e:	4630      	mov	r0, r6
 8004940:	f7ff ff93 	bl	800486a <__sfputs_r>
 8004944:	3001      	adds	r0, #1
 8004946:	f000 80aa 	beq.w	8004a9e <_vfiprintf_r+0x20e>
 800494a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800494c:	445a      	add	r2, fp
 800494e:	9209      	str	r2, [sp, #36]	; 0x24
 8004950:	f89a 3000 	ldrb.w	r3, [sl]
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 80a2 	beq.w	8004a9e <_vfiprintf_r+0x20e>
 800495a:	2300      	movs	r3, #0
 800495c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004960:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004964:	f10a 0a01 	add.w	sl, sl, #1
 8004968:	9304      	str	r3, [sp, #16]
 800496a:	9307      	str	r3, [sp, #28]
 800496c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004970:	931a      	str	r3, [sp, #104]	; 0x68
 8004972:	4654      	mov	r4, sl
 8004974:	2205      	movs	r2, #5
 8004976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800497a:	4858      	ldr	r0, [pc, #352]	; (8004adc <_vfiprintf_r+0x24c>)
 800497c:	f7fb fc28 	bl	80001d0 <memchr>
 8004980:	9a04      	ldr	r2, [sp, #16]
 8004982:	b9d8      	cbnz	r0, 80049bc <_vfiprintf_r+0x12c>
 8004984:	06d1      	lsls	r1, r2, #27
 8004986:	bf44      	itt	mi
 8004988:	2320      	movmi	r3, #32
 800498a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800498e:	0713      	lsls	r3, r2, #28
 8004990:	bf44      	itt	mi
 8004992:	232b      	movmi	r3, #43	; 0x2b
 8004994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004998:	f89a 3000 	ldrb.w	r3, [sl]
 800499c:	2b2a      	cmp	r3, #42	; 0x2a
 800499e:	d015      	beq.n	80049cc <_vfiprintf_r+0x13c>
 80049a0:	9a07      	ldr	r2, [sp, #28]
 80049a2:	4654      	mov	r4, sl
 80049a4:	2000      	movs	r0, #0
 80049a6:	f04f 0c0a 	mov.w	ip, #10
 80049aa:	4621      	mov	r1, r4
 80049ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049b0:	3b30      	subs	r3, #48	; 0x30
 80049b2:	2b09      	cmp	r3, #9
 80049b4:	d94e      	bls.n	8004a54 <_vfiprintf_r+0x1c4>
 80049b6:	b1b0      	cbz	r0, 80049e6 <_vfiprintf_r+0x156>
 80049b8:	9207      	str	r2, [sp, #28]
 80049ba:	e014      	b.n	80049e6 <_vfiprintf_r+0x156>
 80049bc:	eba0 0308 	sub.w	r3, r0, r8
 80049c0:	fa09 f303 	lsl.w	r3, r9, r3
 80049c4:	4313      	orrs	r3, r2
 80049c6:	9304      	str	r3, [sp, #16]
 80049c8:	46a2      	mov	sl, r4
 80049ca:	e7d2      	b.n	8004972 <_vfiprintf_r+0xe2>
 80049cc:	9b03      	ldr	r3, [sp, #12]
 80049ce:	1d19      	adds	r1, r3, #4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	9103      	str	r1, [sp, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bfbb      	ittet	lt
 80049d8:	425b      	neglt	r3, r3
 80049da:	f042 0202 	orrlt.w	r2, r2, #2
 80049de:	9307      	strge	r3, [sp, #28]
 80049e0:	9307      	strlt	r3, [sp, #28]
 80049e2:	bfb8      	it	lt
 80049e4:	9204      	strlt	r2, [sp, #16]
 80049e6:	7823      	ldrb	r3, [r4, #0]
 80049e8:	2b2e      	cmp	r3, #46	; 0x2e
 80049ea:	d10c      	bne.n	8004a06 <_vfiprintf_r+0x176>
 80049ec:	7863      	ldrb	r3, [r4, #1]
 80049ee:	2b2a      	cmp	r3, #42	; 0x2a
 80049f0:	d135      	bne.n	8004a5e <_vfiprintf_r+0x1ce>
 80049f2:	9b03      	ldr	r3, [sp, #12]
 80049f4:	1d1a      	adds	r2, r3, #4
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	9203      	str	r2, [sp, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bfb8      	it	lt
 80049fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004a02:	3402      	adds	r4, #2
 8004a04:	9305      	str	r3, [sp, #20]
 8004a06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004aec <_vfiprintf_r+0x25c>
 8004a0a:	7821      	ldrb	r1, [r4, #0]
 8004a0c:	2203      	movs	r2, #3
 8004a0e:	4650      	mov	r0, sl
 8004a10:	f7fb fbde 	bl	80001d0 <memchr>
 8004a14:	b140      	cbz	r0, 8004a28 <_vfiprintf_r+0x198>
 8004a16:	2340      	movs	r3, #64	; 0x40
 8004a18:	eba0 000a 	sub.w	r0, r0, sl
 8004a1c:	fa03 f000 	lsl.w	r0, r3, r0
 8004a20:	9b04      	ldr	r3, [sp, #16]
 8004a22:	4303      	orrs	r3, r0
 8004a24:	3401      	adds	r4, #1
 8004a26:	9304      	str	r3, [sp, #16]
 8004a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a2c:	482c      	ldr	r0, [pc, #176]	; (8004ae0 <_vfiprintf_r+0x250>)
 8004a2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a32:	2206      	movs	r2, #6
 8004a34:	f7fb fbcc 	bl	80001d0 <memchr>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d03f      	beq.n	8004abc <_vfiprintf_r+0x22c>
 8004a3c:	4b29      	ldr	r3, [pc, #164]	; (8004ae4 <_vfiprintf_r+0x254>)
 8004a3e:	bb1b      	cbnz	r3, 8004a88 <_vfiprintf_r+0x1f8>
 8004a40:	9b03      	ldr	r3, [sp, #12]
 8004a42:	3307      	adds	r3, #7
 8004a44:	f023 0307 	bic.w	r3, r3, #7
 8004a48:	3308      	adds	r3, #8
 8004a4a:	9303      	str	r3, [sp, #12]
 8004a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a4e:	443b      	add	r3, r7
 8004a50:	9309      	str	r3, [sp, #36]	; 0x24
 8004a52:	e767      	b.n	8004924 <_vfiprintf_r+0x94>
 8004a54:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a58:	460c      	mov	r4, r1
 8004a5a:	2001      	movs	r0, #1
 8004a5c:	e7a5      	b.n	80049aa <_vfiprintf_r+0x11a>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	3401      	adds	r4, #1
 8004a62:	9305      	str	r3, [sp, #20]
 8004a64:	4619      	mov	r1, r3
 8004a66:	f04f 0c0a 	mov.w	ip, #10
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a70:	3a30      	subs	r2, #48	; 0x30
 8004a72:	2a09      	cmp	r2, #9
 8004a74:	d903      	bls.n	8004a7e <_vfiprintf_r+0x1ee>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0c5      	beq.n	8004a06 <_vfiprintf_r+0x176>
 8004a7a:	9105      	str	r1, [sp, #20]
 8004a7c:	e7c3      	b.n	8004a06 <_vfiprintf_r+0x176>
 8004a7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a82:	4604      	mov	r4, r0
 8004a84:	2301      	movs	r3, #1
 8004a86:	e7f0      	b.n	8004a6a <_vfiprintf_r+0x1da>
 8004a88:	ab03      	add	r3, sp, #12
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	462a      	mov	r2, r5
 8004a8e:	4b16      	ldr	r3, [pc, #88]	; (8004ae8 <_vfiprintf_r+0x258>)
 8004a90:	a904      	add	r1, sp, #16
 8004a92:	4630      	mov	r0, r6
 8004a94:	f3af 8000 	nop.w
 8004a98:	4607      	mov	r7, r0
 8004a9a:	1c78      	adds	r0, r7, #1
 8004a9c:	d1d6      	bne.n	8004a4c <_vfiprintf_r+0x1bc>
 8004a9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004aa0:	07d9      	lsls	r1, r3, #31
 8004aa2:	d405      	bmi.n	8004ab0 <_vfiprintf_r+0x220>
 8004aa4:	89ab      	ldrh	r3, [r5, #12]
 8004aa6:	059a      	lsls	r2, r3, #22
 8004aa8:	d402      	bmi.n	8004ab0 <_vfiprintf_r+0x220>
 8004aaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004aac:	f7ff fe31 	bl	8004712 <__retarget_lock_release_recursive>
 8004ab0:	89ab      	ldrh	r3, [r5, #12]
 8004ab2:	065b      	lsls	r3, r3, #25
 8004ab4:	f53f af12 	bmi.w	80048dc <_vfiprintf_r+0x4c>
 8004ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004aba:	e711      	b.n	80048e0 <_vfiprintf_r+0x50>
 8004abc:	ab03      	add	r3, sp, #12
 8004abe:	9300      	str	r3, [sp, #0]
 8004ac0:	462a      	mov	r2, r5
 8004ac2:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <_vfiprintf_r+0x258>)
 8004ac4:	a904      	add	r1, sp, #16
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	f000 f880 	bl	8004bcc <_printf_i>
 8004acc:	e7e4      	b.n	8004a98 <_vfiprintf_r+0x208>
 8004ace:	bf00      	nop
 8004ad0:	0800548c 	.word	0x0800548c
 8004ad4:	080054ac 	.word	0x080054ac
 8004ad8:	0800546c 	.word	0x0800546c
 8004adc:	080054cc 	.word	0x080054cc
 8004ae0:	080054d6 	.word	0x080054d6
 8004ae4:	00000000 	.word	0x00000000
 8004ae8:	0800486b 	.word	0x0800486b
 8004aec:	080054d2 	.word	0x080054d2

08004af0 <_printf_common>:
 8004af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af4:	4616      	mov	r6, r2
 8004af6:	4699      	mov	r9, r3
 8004af8:	688a      	ldr	r2, [r1, #8]
 8004afa:	690b      	ldr	r3, [r1, #16]
 8004afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b00:	4293      	cmp	r3, r2
 8004b02:	bfb8      	it	lt
 8004b04:	4613      	movlt	r3, r2
 8004b06:	6033      	str	r3, [r6, #0]
 8004b08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b0c:	4607      	mov	r7, r0
 8004b0e:	460c      	mov	r4, r1
 8004b10:	b10a      	cbz	r2, 8004b16 <_printf_common+0x26>
 8004b12:	3301      	adds	r3, #1
 8004b14:	6033      	str	r3, [r6, #0]
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	0699      	lsls	r1, r3, #26
 8004b1a:	bf42      	ittt	mi
 8004b1c:	6833      	ldrmi	r3, [r6, #0]
 8004b1e:	3302      	addmi	r3, #2
 8004b20:	6033      	strmi	r3, [r6, #0]
 8004b22:	6825      	ldr	r5, [r4, #0]
 8004b24:	f015 0506 	ands.w	r5, r5, #6
 8004b28:	d106      	bne.n	8004b38 <_printf_common+0x48>
 8004b2a:	f104 0a19 	add.w	sl, r4, #25
 8004b2e:	68e3      	ldr	r3, [r4, #12]
 8004b30:	6832      	ldr	r2, [r6, #0]
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	42ab      	cmp	r3, r5
 8004b36:	dc26      	bgt.n	8004b86 <_printf_common+0x96>
 8004b38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b3c:	1e13      	subs	r3, r2, #0
 8004b3e:	6822      	ldr	r2, [r4, #0]
 8004b40:	bf18      	it	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	0692      	lsls	r2, r2, #26
 8004b46:	d42b      	bmi.n	8004ba0 <_printf_common+0xb0>
 8004b48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	4638      	mov	r0, r7
 8004b50:	47c0      	blx	r8
 8004b52:	3001      	adds	r0, #1
 8004b54:	d01e      	beq.n	8004b94 <_printf_common+0xa4>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	68e5      	ldr	r5, [r4, #12]
 8004b5a:	6832      	ldr	r2, [r6, #0]
 8004b5c:	f003 0306 	and.w	r3, r3, #6
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	bf08      	it	eq
 8004b64:	1aad      	subeq	r5, r5, r2
 8004b66:	68a3      	ldr	r3, [r4, #8]
 8004b68:	6922      	ldr	r2, [r4, #16]
 8004b6a:	bf0c      	ite	eq
 8004b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b70:	2500      	movne	r5, #0
 8004b72:	4293      	cmp	r3, r2
 8004b74:	bfc4      	itt	gt
 8004b76:	1a9b      	subgt	r3, r3, r2
 8004b78:	18ed      	addgt	r5, r5, r3
 8004b7a:	2600      	movs	r6, #0
 8004b7c:	341a      	adds	r4, #26
 8004b7e:	42b5      	cmp	r5, r6
 8004b80:	d11a      	bne.n	8004bb8 <_printf_common+0xc8>
 8004b82:	2000      	movs	r0, #0
 8004b84:	e008      	b.n	8004b98 <_printf_common+0xa8>
 8004b86:	2301      	movs	r3, #1
 8004b88:	4652      	mov	r2, sl
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	47c0      	blx	r8
 8004b90:	3001      	adds	r0, #1
 8004b92:	d103      	bne.n	8004b9c <_printf_common+0xac>
 8004b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b9c:	3501      	adds	r5, #1
 8004b9e:	e7c6      	b.n	8004b2e <_printf_common+0x3e>
 8004ba0:	18e1      	adds	r1, r4, r3
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	2030      	movs	r0, #48	; 0x30
 8004ba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004baa:	4422      	add	r2, r4
 8004bac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bb4:	3302      	adds	r3, #2
 8004bb6:	e7c7      	b.n	8004b48 <_printf_common+0x58>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	4622      	mov	r2, r4
 8004bbc:	4649      	mov	r1, r9
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	47c0      	blx	r8
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d0e6      	beq.n	8004b94 <_printf_common+0xa4>
 8004bc6:	3601      	adds	r6, #1
 8004bc8:	e7d9      	b.n	8004b7e <_printf_common+0x8e>
	...

08004bcc <_printf_i>:
 8004bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd0:	7e0f      	ldrb	r7, [r1, #24]
 8004bd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bd4:	2f78      	cmp	r7, #120	; 0x78
 8004bd6:	4691      	mov	r9, r2
 8004bd8:	4680      	mov	r8, r0
 8004bda:	460c      	mov	r4, r1
 8004bdc:	469a      	mov	sl, r3
 8004bde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004be2:	d807      	bhi.n	8004bf4 <_printf_i+0x28>
 8004be4:	2f62      	cmp	r7, #98	; 0x62
 8004be6:	d80a      	bhi.n	8004bfe <_printf_i+0x32>
 8004be8:	2f00      	cmp	r7, #0
 8004bea:	f000 80d8 	beq.w	8004d9e <_printf_i+0x1d2>
 8004bee:	2f58      	cmp	r7, #88	; 0x58
 8004bf0:	f000 80a3 	beq.w	8004d3a <_printf_i+0x16e>
 8004bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bfc:	e03a      	b.n	8004c74 <_printf_i+0xa8>
 8004bfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c02:	2b15      	cmp	r3, #21
 8004c04:	d8f6      	bhi.n	8004bf4 <_printf_i+0x28>
 8004c06:	a101      	add	r1, pc, #4	; (adr r1, 8004c0c <_printf_i+0x40>)
 8004c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c0c:	08004c65 	.word	0x08004c65
 8004c10:	08004c79 	.word	0x08004c79
 8004c14:	08004bf5 	.word	0x08004bf5
 8004c18:	08004bf5 	.word	0x08004bf5
 8004c1c:	08004bf5 	.word	0x08004bf5
 8004c20:	08004bf5 	.word	0x08004bf5
 8004c24:	08004c79 	.word	0x08004c79
 8004c28:	08004bf5 	.word	0x08004bf5
 8004c2c:	08004bf5 	.word	0x08004bf5
 8004c30:	08004bf5 	.word	0x08004bf5
 8004c34:	08004bf5 	.word	0x08004bf5
 8004c38:	08004d85 	.word	0x08004d85
 8004c3c:	08004ca9 	.word	0x08004ca9
 8004c40:	08004d67 	.word	0x08004d67
 8004c44:	08004bf5 	.word	0x08004bf5
 8004c48:	08004bf5 	.word	0x08004bf5
 8004c4c:	08004da7 	.word	0x08004da7
 8004c50:	08004bf5 	.word	0x08004bf5
 8004c54:	08004ca9 	.word	0x08004ca9
 8004c58:	08004bf5 	.word	0x08004bf5
 8004c5c:	08004bf5 	.word	0x08004bf5
 8004c60:	08004d6f 	.word	0x08004d6f
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	1d1a      	adds	r2, r3, #4
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	602a      	str	r2, [r5, #0]
 8004c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0a3      	b.n	8004dc0 <_printf_i+0x1f4>
 8004c78:	6820      	ldr	r0, [r4, #0]
 8004c7a:	6829      	ldr	r1, [r5, #0]
 8004c7c:	0606      	lsls	r6, r0, #24
 8004c7e:	f101 0304 	add.w	r3, r1, #4
 8004c82:	d50a      	bpl.n	8004c9a <_printf_i+0xce>
 8004c84:	680e      	ldr	r6, [r1, #0]
 8004c86:	602b      	str	r3, [r5, #0]
 8004c88:	2e00      	cmp	r6, #0
 8004c8a:	da03      	bge.n	8004c94 <_printf_i+0xc8>
 8004c8c:	232d      	movs	r3, #45	; 0x2d
 8004c8e:	4276      	negs	r6, r6
 8004c90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c94:	485e      	ldr	r0, [pc, #376]	; (8004e10 <_printf_i+0x244>)
 8004c96:	230a      	movs	r3, #10
 8004c98:	e019      	b.n	8004cce <_printf_i+0x102>
 8004c9a:	680e      	ldr	r6, [r1, #0]
 8004c9c:	602b      	str	r3, [r5, #0]
 8004c9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ca2:	bf18      	it	ne
 8004ca4:	b236      	sxthne	r6, r6
 8004ca6:	e7ef      	b.n	8004c88 <_printf_i+0xbc>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	6820      	ldr	r0, [r4, #0]
 8004cac:	1d19      	adds	r1, r3, #4
 8004cae:	6029      	str	r1, [r5, #0]
 8004cb0:	0601      	lsls	r1, r0, #24
 8004cb2:	d501      	bpl.n	8004cb8 <_printf_i+0xec>
 8004cb4:	681e      	ldr	r6, [r3, #0]
 8004cb6:	e002      	b.n	8004cbe <_printf_i+0xf2>
 8004cb8:	0646      	lsls	r6, r0, #25
 8004cba:	d5fb      	bpl.n	8004cb4 <_printf_i+0xe8>
 8004cbc:	881e      	ldrh	r6, [r3, #0]
 8004cbe:	4854      	ldr	r0, [pc, #336]	; (8004e10 <_printf_i+0x244>)
 8004cc0:	2f6f      	cmp	r7, #111	; 0x6f
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2308      	moveq	r3, #8
 8004cc6:	230a      	movne	r3, #10
 8004cc8:	2100      	movs	r1, #0
 8004cca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cce:	6865      	ldr	r5, [r4, #4]
 8004cd0:	60a5      	str	r5, [r4, #8]
 8004cd2:	2d00      	cmp	r5, #0
 8004cd4:	bfa2      	ittt	ge
 8004cd6:	6821      	ldrge	r1, [r4, #0]
 8004cd8:	f021 0104 	bicge.w	r1, r1, #4
 8004cdc:	6021      	strge	r1, [r4, #0]
 8004cde:	b90e      	cbnz	r6, 8004ce4 <_printf_i+0x118>
 8004ce0:	2d00      	cmp	r5, #0
 8004ce2:	d04d      	beq.n	8004d80 <_printf_i+0x1b4>
 8004ce4:	4615      	mov	r5, r2
 8004ce6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cea:	fb03 6711 	mls	r7, r3, r1, r6
 8004cee:	5dc7      	ldrb	r7, [r0, r7]
 8004cf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cf4:	4637      	mov	r7, r6
 8004cf6:	42bb      	cmp	r3, r7
 8004cf8:	460e      	mov	r6, r1
 8004cfa:	d9f4      	bls.n	8004ce6 <_printf_i+0x11a>
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d10b      	bne.n	8004d18 <_printf_i+0x14c>
 8004d00:	6823      	ldr	r3, [r4, #0]
 8004d02:	07de      	lsls	r6, r3, #31
 8004d04:	d508      	bpl.n	8004d18 <_printf_i+0x14c>
 8004d06:	6923      	ldr	r3, [r4, #16]
 8004d08:	6861      	ldr	r1, [r4, #4]
 8004d0a:	4299      	cmp	r1, r3
 8004d0c:	bfde      	ittt	le
 8004d0e:	2330      	movle	r3, #48	; 0x30
 8004d10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004d18:	1b52      	subs	r2, r2, r5
 8004d1a:	6122      	str	r2, [r4, #16]
 8004d1c:	f8cd a000 	str.w	sl, [sp]
 8004d20:	464b      	mov	r3, r9
 8004d22:	aa03      	add	r2, sp, #12
 8004d24:	4621      	mov	r1, r4
 8004d26:	4640      	mov	r0, r8
 8004d28:	f7ff fee2 	bl	8004af0 <_printf_common>
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d14c      	bne.n	8004dca <_printf_i+0x1fe>
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d34:	b004      	add	sp, #16
 8004d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3a:	4835      	ldr	r0, [pc, #212]	; (8004e10 <_printf_i+0x244>)
 8004d3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d40:	6829      	ldr	r1, [r5, #0]
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d48:	6029      	str	r1, [r5, #0]
 8004d4a:	061d      	lsls	r5, r3, #24
 8004d4c:	d514      	bpl.n	8004d78 <_printf_i+0x1ac>
 8004d4e:	07df      	lsls	r7, r3, #31
 8004d50:	bf44      	itt	mi
 8004d52:	f043 0320 	orrmi.w	r3, r3, #32
 8004d56:	6023      	strmi	r3, [r4, #0]
 8004d58:	b91e      	cbnz	r6, 8004d62 <_printf_i+0x196>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	f023 0320 	bic.w	r3, r3, #32
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	2310      	movs	r3, #16
 8004d64:	e7b0      	b.n	8004cc8 <_printf_i+0xfc>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	f043 0320 	orr.w	r3, r3, #32
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	2378      	movs	r3, #120	; 0x78
 8004d70:	4828      	ldr	r0, [pc, #160]	; (8004e14 <_printf_i+0x248>)
 8004d72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d76:	e7e3      	b.n	8004d40 <_printf_i+0x174>
 8004d78:	0659      	lsls	r1, r3, #25
 8004d7a:	bf48      	it	mi
 8004d7c:	b2b6      	uxthmi	r6, r6
 8004d7e:	e7e6      	b.n	8004d4e <_printf_i+0x182>
 8004d80:	4615      	mov	r5, r2
 8004d82:	e7bb      	b.n	8004cfc <_printf_i+0x130>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	6826      	ldr	r6, [r4, #0]
 8004d88:	6961      	ldr	r1, [r4, #20]
 8004d8a:	1d18      	adds	r0, r3, #4
 8004d8c:	6028      	str	r0, [r5, #0]
 8004d8e:	0635      	lsls	r5, r6, #24
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	d501      	bpl.n	8004d98 <_printf_i+0x1cc>
 8004d94:	6019      	str	r1, [r3, #0]
 8004d96:	e002      	b.n	8004d9e <_printf_i+0x1d2>
 8004d98:	0670      	lsls	r0, r6, #25
 8004d9a:	d5fb      	bpl.n	8004d94 <_printf_i+0x1c8>
 8004d9c:	8019      	strh	r1, [r3, #0]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	6123      	str	r3, [r4, #16]
 8004da2:	4615      	mov	r5, r2
 8004da4:	e7ba      	b.n	8004d1c <_printf_i+0x150>
 8004da6:	682b      	ldr	r3, [r5, #0]
 8004da8:	1d1a      	adds	r2, r3, #4
 8004daa:	602a      	str	r2, [r5, #0]
 8004dac:	681d      	ldr	r5, [r3, #0]
 8004dae:	6862      	ldr	r2, [r4, #4]
 8004db0:	2100      	movs	r1, #0
 8004db2:	4628      	mov	r0, r5
 8004db4:	f7fb fa0c 	bl	80001d0 <memchr>
 8004db8:	b108      	cbz	r0, 8004dbe <_printf_i+0x1f2>
 8004dba:	1b40      	subs	r0, r0, r5
 8004dbc:	6060      	str	r0, [r4, #4]
 8004dbe:	6863      	ldr	r3, [r4, #4]
 8004dc0:	6123      	str	r3, [r4, #16]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dc8:	e7a8      	b.n	8004d1c <_printf_i+0x150>
 8004dca:	6923      	ldr	r3, [r4, #16]
 8004dcc:	462a      	mov	r2, r5
 8004dce:	4649      	mov	r1, r9
 8004dd0:	4640      	mov	r0, r8
 8004dd2:	47d0      	blx	sl
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d0ab      	beq.n	8004d30 <_printf_i+0x164>
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	079b      	lsls	r3, r3, #30
 8004ddc:	d413      	bmi.n	8004e06 <_printf_i+0x23a>
 8004dde:	68e0      	ldr	r0, [r4, #12]
 8004de0:	9b03      	ldr	r3, [sp, #12]
 8004de2:	4298      	cmp	r0, r3
 8004de4:	bfb8      	it	lt
 8004de6:	4618      	movlt	r0, r3
 8004de8:	e7a4      	b.n	8004d34 <_printf_i+0x168>
 8004dea:	2301      	movs	r3, #1
 8004dec:	4632      	mov	r2, r6
 8004dee:	4649      	mov	r1, r9
 8004df0:	4640      	mov	r0, r8
 8004df2:	47d0      	blx	sl
 8004df4:	3001      	adds	r0, #1
 8004df6:	d09b      	beq.n	8004d30 <_printf_i+0x164>
 8004df8:	3501      	adds	r5, #1
 8004dfa:	68e3      	ldr	r3, [r4, #12]
 8004dfc:	9903      	ldr	r1, [sp, #12]
 8004dfe:	1a5b      	subs	r3, r3, r1
 8004e00:	42ab      	cmp	r3, r5
 8004e02:	dcf2      	bgt.n	8004dea <_printf_i+0x21e>
 8004e04:	e7eb      	b.n	8004dde <_printf_i+0x212>
 8004e06:	2500      	movs	r5, #0
 8004e08:	f104 0619 	add.w	r6, r4, #25
 8004e0c:	e7f5      	b.n	8004dfa <_printf_i+0x22e>
 8004e0e:	bf00      	nop
 8004e10:	080054dd 	.word	0x080054dd
 8004e14:	080054ee 	.word	0x080054ee

08004e18 <_sbrk_r>:
 8004e18:	b538      	push	{r3, r4, r5, lr}
 8004e1a:	4d06      	ldr	r5, [pc, #24]	; (8004e34 <_sbrk_r+0x1c>)
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	4604      	mov	r4, r0
 8004e20:	4608      	mov	r0, r1
 8004e22:	602b      	str	r3, [r5, #0]
 8004e24:	f7fc fa76 	bl	8001314 <_sbrk>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	d102      	bne.n	8004e32 <_sbrk_r+0x1a>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	b103      	cbz	r3, 8004e32 <_sbrk_r+0x1a>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	bd38      	pop	{r3, r4, r5, pc}
 8004e34:	200000f4 	.word	0x200000f4

08004e38 <__sread>:
 8004e38:	b510      	push	{r4, lr}
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e40:	f000 fab2 	bl	80053a8 <_read_r>
 8004e44:	2800      	cmp	r0, #0
 8004e46:	bfab      	itete	ge
 8004e48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e4a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e4c:	181b      	addge	r3, r3, r0
 8004e4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e52:	bfac      	ite	ge
 8004e54:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e56:	81a3      	strhlt	r3, [r4, #12]
 8004e58:	bd10      	pop	{r4, pc}

08004e5a <__swrite>:
 8004e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5e:	461f      	mov	r7, r3
 8004e60:	898b      	ldrh	r3, [r1, #12]
 8004e62:	05db      	lsls	r3, r3, #23
 8004e64:	4605      	mov	r5, r0
 8004e66:	460c      	mov	r4, r1
 8004e68:	4616      	mov	r6, r2
 8004e6a:	d505      	bpl.n	8004e78 <__swrite+0x1e>
 8004e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e70:	2302      	movs	r3, #2
 8004e72:	2200      	movs	r2, #0
 8004e74:	f000 f9c8 	bl	8005208 <_lseek_r>
 8004e78:	89a3      	ldrh	r3, [r4, #12]
 8004e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e82:	81a3      	strh	r3, [r4, #12]
 8004e84:	4632      	mov	r2, r6
 8004e86:	463b      	mov	r3, r7
 8004e88:	4628      	mov	r0, r5
 8004e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8e:	f000 b869 	b.w	8004f64 <_write_r>

08004e92 <__sseek>:
 8004e92:	b510      	push	{r4, lr}
 8004e94:	460c      	mov	r4, r1
 8004e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e9a:	f000 f9b5 	bl	8005208 <_lseek_r>
 8004e9e:	1c43      	adds	r3, r0, #1
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	bf15      	itete	ne
 8004ea4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ea6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004eaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004eae:	81a3      	strheq	r3, [r4, #12]
 8004eb0:	bf18      	it	ne
 8004eb2:	81a3      	strhne	r3, [r4, #12]
 8004eb4:	bd10      	pop	{r4, pc}

08004eb6 <__sclose>:
 8004eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eba:	f000 b8d3 	b.w	8005064 <_close_r>
	...

08004ec0 <__swbuf_r>:
 8004ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ec2:	460e      	mov	r6, r1
 8004ec4:	4614      	mov	r4, r2
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	b118      	cbz	r0, 8004ed2 <__swbuf_r+0x12>
 8004eca:	6983      	ldr	r3, [r0, #24]
 8004ecc:	b90b      	cbnz	r3, 8004ed2 <__swbuf_r+0x12>
 8004ece:	f7ff fb81 	bl	80045d4 <__sinit>
 8004ed2:	4b21      	ldr	r3, [pc, #132]	; (8004f58 <__swbuf_r+0x98>)
 8004ed4:	429c      	cmp	r4, r3
 8004ed6:	d12b      	bne.n	8004f30 <__swbuf_r+0x70>
 8004ed8:	686c      	ldr	r4, [r5, #4]
 8004eda:	69a3      	ldr	r3, [r4, #24]
 8004edc:	60a3      	str	r3, [r4, #8]
 8004ede:	89a3      	ldrh	r3, [r4, #12]
 8004ee0:	071a      	lsls	r2, r3, #28
 8004ee2:	d52f      	bpl.n	8004f44 <__swbuf_r+0x84>
 8004ee4:	6923      	ldr	r3, [r4, #16]
 8004ee6:	b36b      	cbz	r3, 8004f44 <__swbuf_r+0x84>
 8004ee8:	6923      	ldr	r3, [r4, #16]
 8004eea:	6820      	ldr	r0, [r4, #0]
 8004eec:	1ac0      	subs	r0, r0, r3
 8004eee:	6963      	ldr	r3, [r4, #20]
 8004ef0:	b2f6      	uxtb	r6, r6
 8004ef2:	4283      	cmp	r3, r0
 8004ef4:	4637      	mov	r7, r6
 8004ef6:	dc04      	bgt.n	8004f02 <__swbuf_r+0x42>
 8004ef8:	4621      	mov	r1, r4
 8004efa:	4628      	mov	r0, r5
 8004efc:	f000 f948 	bl	8005190 <_fflush_r>
 8004f00:	bb30      	cbnz	r0, 8004f50 <__swbuf_r+0x90>
 8004f02:	68a3      	ldr	r3, [r4, #8]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	60a3      	str	r3, [r4, #8]
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	6022      	str	r2, [r4, #0]
 8004f0e:	701e      	strb	r6, [r3, #0]
 8004f10:	6963      	ldr	r3, [r4, #20]
 8004f12:	3001      	adds	r0, #1
 8004f14:	4283      	cmp	r3, r0
 8004f16:	d004      	beq.n	8004f22 <__swbuf_r+0x62>
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	07db      	lsls	r3, r3, #31
 8004f1c:	d506      	bpl.n	8004f2c <__swbuf_r+0x6c>
 8004f1e:	2e0a      	cmp	r6, #10
 8004f20:	d104      	bne.n	8004f2c <__swbuf_r+0x6c>
 8004f22:	4621      	mov	r1, r4
 8004f24:	4628      	mov	r0, r5
 8004f26:	f000 f933 	bl	8005190 <_fflush_r>
 8004f2a:	b988      	cbnz	r0, 8004f50 <__swbuf_r+0x90>
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f30:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <__swbuf_r+0x9c>)
 8004f32:	429c      	cmp	r4, r3
 8004f34:	d101      	bne.n	8004f3a <__swbuf_r+0x7a>
 8004f36:	68ac      	ldr	r4, [r5, #8]
 8004f38:	e7cf      	b.n	8004eda <__swbuf_r+0x1a>
 8004f3a:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <__swbuf_r+0xa0>)
 8004f3c:	429c      	cmp	r4, r3
 8004f3e:	bf08      	it	eq
 8004f40:	68ec      	ldreq	r4, [r5, #12]
 8004f42:	e7ca      	b.n	8004eda <__swbuf_r+0x1a>
 8004f44:	4621      	mov	r1, r4
 8004f46:	4628      	mov	r0, r5
 8004f48:	f000 f81e 	bl	8004f88 <__swsetup_r>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d0cb      	beq.n	8004ee8 <__swbuf_r+0x28>
 8004f50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004f54:	e7ea      	b.n	8004f2c <__swbuf_r+0x6c>
 8004f56:	bf00      	nop
 8004f58:	0800548c 	.word	0x0800548c
 8004f5c:	080054ac 	.word	0x080054ac
 8004f60:	0800546c 	.word	0x0800546c

08004f64 <_write_r>:
 8004f64:	b538      	push	{r3, r4, r5, lr}
 8004f66:	4d07      	ldr	r5, [pc, #28]	; (8004f84 <_write_r+0x20>)
 8004f68:	4604      	mov	r4, r0
 8004f6a:	4608      	mov	r0, r1
 8004f6c:	4611      	mov	r1, r2
 8004f6e:	2200      	movs	r2, #0
 8004f70:	602a      	str	r2, [r5, #0]
 8004f72:	461a      	mov	r2, r3
 8004f74:	f7fc f97d 	bl	8001272 <_write>
 8004f78:	1c43      	adds	r3, r0, #1
 8004f7a:	d102      	bne.n	8004f82 <_write_r+0x1e>
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	b103      	cbz	r3, 8004f82 <_write_r+0x1e>
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	bd38      	pop	{r3, r4, r5, pc}
 8004f84:	200000f4 	.word	0x200000f4

08004f88 <__swsetup_r>:
 8004f88:	4b32      	ldr	r3, [pc, #200]	; (8005054 <__swsetup_r+0xcc>)
 8004f8a:	b570      	push	{r4, r5, r6, lr}
 8004f8c:	681d      	ldr	r5, [r3, #0]
 8004f8e:	4606      	mov	r6, r0
 8004f90:	460c      	mov	r4, r1
 8004f92:	b125      	cbz	r5, 8004f9e <__swsetup_r+0x16>
 8004f94:	69ab      	ldr	r3, [r5, #24]
 8004f96:	b913      	cbnz	r3, 8004f9e <__swsetup_r+0x16>
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f7ff fb1b 	bl	80045d4 <__sinit>
 8004f9e:	4b2e      	ldr	r3, [pc, #184]	; (8005058 <__swsetup_r+0xd0>)
 8004fa0:	429c      	cmp	r4, r3
 8004fa2:	d10f      	bne.n	8004fc4 <__swsetup_r+0x3c>
 8004fa4:	686c      	ldr	r4, [r5, #4]
 8004fa6:	89a3      	ldrh	r3, [r4, #12]
 8004fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fac:	0719      	lsls	r1, r3, #28
 8004fae:	d42c      	bmi.n	800500a <__swsetup_r+0x82>
 8004fb0:	06dd      	lsls	r5, r3, #27
 8004fb2:	d411      	bmi.n	8004fd8 <__swsetup_r+0x50>
 8004fb4:	2309      	movs	r3, #9
 8004fb6:	6033      	str	r3, [r6, #0]
 8004fb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004fbc:	81a3      	strh	r3, [r4, #12]
 8004fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fc2:	e03e      	b.n	8005042 <__swsetup_r+0xba>
 8004fc4:	4b25      	ldr	r3, [pc, #148]	; (800505c <__swsetup_r+0xd4>)
 8004fc6:	429c      	cmp	r4, r3
 8004fc8:	d101      	bne.n	8004fce <__swsetup_r+0x46>
 8004fca:	68ac      	ldr	r4, [r5, #8]
 8004fcc:	e7eb      	b.n	8004fa6 <__swsetup_r+0x1e>
 8004fce:	4b24      	ldr	r3, [pc, #144]	; (8005060 <__swsetup_r+0xd8>)
 8004fd0:	429c      	cmp	r4, r3
 8004fd2:	bf08      	it	eq
 8004fd4:	68ec      	ldreq	r4, [r5, #12]
 8004fd6:	e7e6      	b.n	8004fa6 <__swsetup_r+0x1e>
 8004fd8:	0758      	lsls	r0, r3, #29
 8004fda:	d512      	bpl.n	8005002 <__swsetup_r+0x7a>
 8004fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fde:	b141      	cbz	r1, 8004ff2 <__swsetup_r+0x6a>
 8004fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fe4:	4299      	cmp	r1, r3
 8004fe6:	d002      	beq.n	8004fee <__swsetup_r+0x66>
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f000 f991 	bl	8005310 <_free_r>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	6363      	str	r3, [r4, #52]	; 0x34
 8004ff2:	89a3      	ldrh	r3, [r4, #12]
 8004ff4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ff8:	81a3      	strh	r3, [r4, #12]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	6063      	str	r3, [r4, #4]
 8004ffe:	6923      	ldr	r3, [r4, #16]
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	f043 0308 	orr.w	r3, r3, #8
 8005008:	81a3      	strh	r3, [r4, #12]
 800500a:	6923      	ldr	r3, [r4, #16]
 800500c:	b94b      	cbnz	r3, 8005022 <__swsetup_r+0x9a>
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005018:	d003      	beq.n	8005022 <__swsetup_r+0x9a>
 800501a:	4621      	mov	r1, r4
 800501c:	4630      	mov	r0, r6
 800501e:	f000 f92b 	bl	8005278 <__smakebuf_r>
 8005022:	89a0      	ldrh	r0, [r4, #12]
 8005024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005028:	f010 0301 	ands.w	r3, r0, #1
 800502c:	d00a      	beq.n	8005044 <__swsetup_r+0xbc>
 800502e:	2300      	movs	r3, #0
 8005030:	60a3      	str	r3, [r4, #8]
 8005032:	6963      	ldr	r3, [r4, #20]
 8005034:	425b      	negs	r3, r3
 8005036:	61a3      	str	r3, [r4, #24]
 8005038:	6923      	ldr	r3, [r4, #16]
 800503a:	b943      	cbnz	r3, 800504e <__swsetup_r+0xc6>
 800503c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005040:	d1ba      	bne.n	8004fb8 <__swsetup_r+0x30>
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	0781      	lsls	r1, r0, #30
 8005046:	bf58      	it	pl
 8005048:	6963      	ldrpl	r3, [r4, #20]
 800504a:	60a3      	str	r3, [r4, #8]
 800504c:	e7f4      	b.n	8005038 <__swsetup_r+0xb0>
 800504e:	2000      	movs	r0, #0
 8005050:	e7f7      	b.n	8005042 <__swsetup_r+0xba>
 8005052:	bf00      	nop
 8005054:	2000000c 	.word	0x2000000c
 8005058:	0800548c 	.word	0x0800548c
 800505c:	080054ac 	.word	0x080054ac
 8005060:	0800546c 	.word	0x0800546c

08005064 <_close_r>:
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4d06      	ldr	r5, [pc, #24]	; (8005080 <_close_r+0x1c>)
 8005068:	2300      	movs	r3, #0
 800506a:	4604      	mov	r4, r0
 800506c:	4608      	mov	r0, r1
 800506e:	602b      	str	r3, [r5, #0]
 8005070:	f7fc f91b 	bl	80012aa <_close>
 8005074:	1c43      	adds	r3, r0, #1
 8005076:	d102      	bne.n	800507e <_close_r+0x1a>
 8005078:	682b      	ldr	r3, [r5, #0]
 800507a:	b103      	cbz	r3, 800507e <_close_r+0x1a>
 800507c:	6023      	str	r3, [r4, #0]
 800507e:	bd38      	pop	{r3, r4, r5, pc}
 8005080:	200000f4 	.word	0x200000f4

08005084 <__sflush_r>:
 8005084:	898a      	ldrh	r2, [r1, #12]
 8005086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800508a:	4605      	mov	r5, r0
 800508c:	0710      	lsls	r0, r2, #28
 800508e:	460c      	mov	r4, r1
 8005090:	d458      	bmi.n	8005144 <__sflush_r+0xc0>
 8005092:	684b      	ldr	r3, [r1, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	dc05      	bgt.n	80050a4 <__sflush_r+0x20>
 8005098:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	dc02      	bgt.n	80050a4 <__sflush_r+0x20>
 800509e:	2000      	movs	r0, #0
 80050a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050a6:	2e00      	cmp	r6, #0
 80050a8:	d0f9      	beq.n	800509e <__sflush_r+0x1a>
 80050aa:	2300      	movs	r3, #0
 80050ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80050b0:	682f      	ldr	r7, [r5, #0]
 80050b2:	602b      	str	r3, [r5, #0]
 80050b4:	d032      	beq.n	800511c <__sflush_r+0x98>
 80050b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	075a      	lsls	r2, r3, #29
 80050bc:	d505      	bpl.n	80050ca <__sflush_r+0x46>
 80050be:	6863      	ldr	r3, [r4, #4]
 80050c0:	1ac0      	subs	r0, r0, r3
 80050c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80050c4:	b10b      	cbz	r3, 80050ca <__sflush_r+0x46>
 80050c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050c8:	1ac0      	subs	r0, r0, r3
 80050ca:	2300      	movs	r3, #0
 80050cc:	4602      	mov	r2, r0
 80050ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80050d0:	6a21      	ldr	r1, [r4, #32]
 80050d2:	4628      	mov	r0, r5
 80050d4:	47b0      	blx	r6
 80050d6:	1c43      	adds	r3, r0, #1
 80050d8:	89a3      	ldrh	r3, [r4, #12]
 80050da:	d106      	bne.n	80050ea <__sflush_r+0x66>
 80050dc:	6829      	ldr	r1, [r5, #0]
 80050de:	291d      	cmp	r1, #29
 80050e0:	d82c      	bhi.n	800513c <__sflush_r+0xb8>
 80050e2:	4a2a      	ldr	r2, [pc, #168]	; (800518c <__sflush_r+0x108>)
 80050e4:	40ca      	lsrs	r2, r1
 80050e6:	07d6      	lsls	r6, r2, #31
 80050e8:	d528      	bpl.n	800513c <__sflush_r+0xb8>
 80050ea:	2200      	movs	r2, #0
 80050ec:	6062      	str	r2, [r4, #4]
 80050ee:	04d9      	lsls	r1, r3, #19
 80050f0:	6922      	ldr	r2, [r4, #16]
 80050f2:	6022      	str	r2, [r4, #0]
 80050f4:	d504      	bpl.n	8005100 <__sflush_r+0x7c>
 80050f6:	1c42      	adds	r2, r0, #1
 80050f8:	d101      	bne.n	80050fe <__sflush_r+0x7a>
 80050fa:	682b      	ldr	r3, [r5, #0]
 80050fc:	b903      	cbnz	r3, 8005100 <__sflush_r+0x7c>
 80050fe:	6560      	str	r0, [r4, #84]	; 0x54
 8005100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005102:	602f      	str	r7, [r5, #0]
 8005104:	2900      	cmp	r1, #0
 8005106:	d0ca      	beq.n	800509e <__sflush_r+0x1a>
 8005108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800510c:	4299      	cmp	r1, r3
 800510e:	d002      	beq.n	8005116 <__sflush_r+0x92>
 8005110:	4628      	mov	r0, r5
 8005112:	f000 f8fd 	bl	8005310 <_free_r>
 8005116:	2000      	movs	r0, #0
 8005118:	6360      	str	r0, [r4, #52]	; 0x34
 800511a:	e7c1      	b.n	80050a0 <__sflush_r+0x1c>
 800511c:	6a21      	ldr	r1, [r4, #32]
 800511e:	2301      	movs	r3, #1
 8005120:	4628      	mov	r0, r5
 8005122:	47b0      	blx	r6
 8005124:	1c41      	adds	r1, r0, #1
 8005126:	d1c7      	bne.n	80050b8 <__sflush_r+0x34>
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0c4      	beq.n	80050b8 <__sflush_r+0x34>
 800512e:	2b1d      	cmp	r3, #29
 8005130:	d001      	beq.n	8005136 <__sflush_r+0xb2>
 8005132:	2b16      	cmp	r3, #22
 8005134:	d101      	bne.n	800513a <__sflush_r+0xb6>
 8005136:	602f      	str	r7, [r5, #0]
 8005138:	e7b1      	b.n	800509e <__sflush_r+0x1a>
 800513a:	89a3      	ldrh	r3, [r4, #12]
 800513c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005140:	81a3      	strh	r3, [r4, #12]
 8005142:	e7ad      	b.n	80050a0 <__sflush_r+0x1c>
 8005144:	690f      	ldr	r7, [r1, #16]
 8005146:	2f00      	cmp	r7, #0
 8005148:	d0a9      	beq.n	800509e <__sflush_r+0x1a>
 800514a:	0793      	lsls	r3, r2, #30
 800514c:	680e      	ldr	r6, [r1, #0]
 800514e:	bf08      	it	eq
 8005150:	694b      	ldreq	r3, [r1, #20]
 8005152:	600f      	str	r7, [r1, #0]
 8005154:	bf18      	it	ne
 8005156:	2300      	movne	r3, #0
 8005158:	eba6 0807 	sub.w	r8, r6, r7
 800515c:	608b      	str	r3, [r1, #8]
 800515e:	f1b8 0f00 	cmp.w	r8, #0
 8005162:	dd9c      	ble.n	800509e <__sflush_r+0x1a>
 8005164:	6a21      	ldr	r1, [r4, #32]
 8005166:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005168:	4643      	mov	r3, r8
 800516a:	463a      	mov	r2, r7
 800516c:	4628      	mov	r0, r5
 800516e:	47b0      	blx	r6
 8005170:	2800      	cmp	r0, #0
 8005172:	dc06      	bgt.n	8005182 <__sflush_r+0xfe>
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800517a:	81a3      	strh	r3, [r4, #12]
 800517c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005180:	e78e      	b.n	80050a0 <__sflush_r+0x1c>
 8005182:	4407      	add	r7, r0
 8005184:	eba8 0800 	sub.w	r8, r8, r0
 8005188:	e7e9      	b.n	800515e <__sflush_r+0xda>
 800518a:	bf00      	nop
 800518c:	20400001 	.word	0x20400001

08005190 <_fflush_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	690b      	ldr	r3, [r1, #16]
 8005194:	4605      	mov	r5, r0
 8005196:	460c      	mov	r4, r1
 8005198:	b913      	cbnz	r3, 80051a0 <_fflush_r+0x10>
 800519a:	2500      	movs	r5, #0
 800519c:	4628      	mov	r0, r5
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	b118      	cbz	r0, 80051aa <_fflush_r+0x1a>
 80051a2:	6983      	ldr	r3, [r0, #24]
 80051a4:	b90b      	cbnz	r3, 80051aa <_fflush_r+0x1a>
 80051a6:	f7ff fa15 	bl	80045d4 <__sinit>
 80051aa:	4b14      	ldr	r3, [pc, #80]	; (80051fc <_fflush_r+0x6c>)
 80051ac:	429c      	cmp	r4, r3
 80051ae:	d11b      	bne.n	80051e8 <_fflush_r+0x58>
 80051b0:	686c      	ldr	r4, [r5, #4]
 80051b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0ef      	beq.n	800519a <_fflush_r+0xa>
 80051ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80051bc:	07d0      	lsls	r0, r2, #31
 80051be:	d404      	bmi.n	80051ca <_fflush_r+0x3a>
 80051c0:	0599      	lsls	r1, r3, #22
 80051c2:	d402      	bmi.n	80051ca <_fflush_r+0x3a>
 80051c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051c6:	f7ff faa3 	bl	8004710 <__retarget_lock_acquire_recursive>
 80051ca:	4628      	mov	r0, r5
 80051cc:	4621      	mov	r1, r4
 80051ce:	f7ff ff59 	bl	8005084 <__sflush_r>
 80051d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051d4:	07da      	lsls	r2, r3, #31
 80051d6:	4605      	mov	r5, r0
 80051d8:	d4e0      	bmi.n	800519c <_fflush_r+0xc>
 80051da:	89a3      	ldrh	r3, [r4, #12]
 80051dc:	059b      	lsls	r3, r3, #22
 80051de:	d4dd      	bmi.n	800519c <_fflush_r+0xc>
 80051e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051e2:	f7ff fa96 	bl	8004712 <__retarget_lock_release_recursive>
 80051e6:	e7d9      	b.n	800519c <_fflush_r+0xc>
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <_fflush_r+0x70>)
 80051ea:	429c      	cmp	r4, r3
 80051ec:	d101      	bne.n	80051f2 <_fflush_r+0x62>
 80051ee:	68ac      	ldr	r4, [r5, #8]
 80051f0:	e7df      	b.n	80051b2 <_fflush_r+0x22>
 80051f2:	4b04      	ldr	r3, [pc, #16]	; (8005204 <_fflush_r+0x74>)
 80051f4:	429c      	cmp	r4, r3
 80051f6:	bf08      	it	eq
 80051f8:	68ec      	ldreq	r4, [r5, #12]
 80051fa:	e7da      	b.n	80051b2 <_fflush_r+0x22>
 80051fc:	0800548c 	.word	0x0800548c
 8005200:	080054ac 	.word	0x080054ac
 8005204:	0800546c 	.word	0x0800546c

08005208 <_lseek_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4d07      	ldr	r5, [pc, #28]	; (8005228 <_lseek_r+0x20>)
 800520c:	4604      	mov	r4, r0
 800520e:	4608      	mov	r0, r1
 8005210:	4611      	mov	r1, r2
 8005212:	2200      	movs	r2, #0
 8005214:	602a      	str	r2, [r5, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	f7fc f86e 	bl	80012f8 <_lseek>
 800521c:	1c43      	adds	r3, r0, #1
 800521e:	d102      	bne.n	8005226 <_lseek_r+0x1e>
 8005220:	682b      	ldr	r3, [r5, #0]
 8005222:	b103      	cbz	r3, 8005226 <_lseek_r+0x1e>
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	bd38      	pop	{r3, r4, r5, pc}
 8005228:	200000f4 	.word	0x200000f4

0800522c <__swhatbuf_r>:
 800522c:	b570      	push	{r4, r5, r6, lr}
 800522e:	460e      	mov	r6, r1
 8005230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005234:	2900      	cmp	r1, #0
 8005236:	b096      	sub	sp, #88	; 0x58
 8005238:	4614      	mov	r4, r2
 800523a:	461d      	mov	r5, r3
 800523c:	da08      	bge.n	8005250 <__swhatbuf_r+0x24>
 800523e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	602a      	str	r2, [r5, #0]
 8005246:	061a      	lsls	r2, r3, #24
 8005248:	d410      	bmi.n	800526c <__swhatbuf_r+0x40>
 800524a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800524e:	e00e      	b.n	800526e <__swhatbuf_r+0x42>
 8005250:	466a      	mov	r2, sp
 8005252:	f000 f8bb 	bl	80053cc <_fstat_r>
 8005256:	2800      	cmp	r0, #0
 8005258:	dbf1      	blt.n	800523e <__swhatbuf_r+0x12>
 800525a:	9a01      	ldr	r2, [sp, #4]
 800525c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005260:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005264:	425a      	negs	r2, r3
 8005266:	415a      	adcs	r2, r3
 8005268:	602a      	str	r2, [r5, #0]
 800526a:	e7ee      	b.n	800524a <__swhatbuf_r+0x1e>
 800526c:	2340      	movs	r3, #64	; 0x40
 800526e:	2000      	movs	r0, #0
 8005270:	6023      	str	r3, [r4, #0]
 8005272:	b016      	add	sp, #88	; 0x58
 8005274:	bd70      	pop	{r4, r5, r6, pc}
	...

08005278 <__smakebuf_r>:
 8005278:	898b      	ldrh	r3, [r1, #12]
 800527a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800527c:	079d      	lsls	r5, r3, #30
 800527e:	4606      	mov	r6, r0
 8005280:	460c      	mov	r4, r1
 8005282:	d507      	bpl.n	8005294 <__smakebuf_r+0x1c>
 8005284:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	6123      	str	r3, [r4, #16]
 800528c:	2301      	movs	r3, #1
 800528e:	6163      	str	r3, [r4, #20]
 8005290:	b002      	add	sp, #8
 8005292:	bd70      	pop	{r4, r5, r6, pc}
 8005294:	ab01      	add	r3, sp, #4
 8005296:	466a      	mov	r2, sp
 8005298:	f7ff ffc8 	bl	800522c <__swhatbuf_r>
 800529c:	9900      	ldr	r1, [sp, #0]
 800529e:	4605      	mov	r5, r0
 80052a0:	4630      	mov	r0, r6
 80052a2:	f7ff fa57 	bl	8004754 <_malloc_r>
 80052a6:	b948      	cbnz	r0, 80052bc <__smakebuf_r+0x44>
 80052a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052ac:	059a      	lsls	r2, r3, #22
 80052ae:	d4ef      	bmi.n	8005290 <__smakebuf_r+0x18>
 80052b0:	f023 0303 	bic.w	r3, r3, #3
 80052b4:	f043 0302 	orr.w	r3, r3, #2
 80052b8:	81a3      	strh	r3, [r4, #12]
 80052ba:	e7e3      	b.n	8005284 <__smakebuf_r+0xc>
 80052bc:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <__smakebuf_r+0x7c>)
 80052be:	62b3      	str	r3, [r6, #40]	; 0x28
 80052c0:	89a3      	ldrh	r3, [r4, #12]
 80052c2:	6020      	str	r0, [r4, #0]
 80052c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c8:	81a3      	strh	r3, [r4, #12]
 80052ca:	9b00      	ldr	r3, [sp, #0]
 80052cc:	6163      	str	r3, [r4, #20]
 80052ce:	9b01      	ldr	r3, [sp, #4]
 80052d0:	6120      	str	r0, [r4, #16]
 80052d2:	b15b      	cbz	r3, 80052ec <__smakebuf_r+0x74>
 80052d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052d8:	4630      	mov	r0, r6
 80052da:	f000 f889 	bl	80053f0 <_isatty_r>
 80052de:	b128      	cbz	r0, 80052ec <__smakebuf_r+0x74>
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	f023 0303 	bic.w	r3, r3, #3
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	81a3      	strh	r3, [r4, #12]
 80052ec:	89a0      	ldrh	r0, [r4, #12]
 80052ee:	4305      	orrs	r5, r0
 80052f0:	81a5      	strh	r5, [r4, #12]
 80052f2:	e7cd      	b.n	8005290 <__smakebuf_r+0x18>
 80052f4:	0800456d 	.word	0x0800456d

080052f8 <__malloc_lock>:
 80052f8:	4801      	ldr	r0, [pc, #4]	; (8005300 <__malloc_lock+0x8>)
 80052fa:	f7ff ba09 	b.w	8004710 <__retarget_lock_acquire_recursive>
 80052fe:	bf00      	nop
 8005300:	200000e8 	.word	0x200000e8

08005304 <__malloc_unlock>:
 8005304:	4801      	ldr	r0, [pc, #4]	; (800530c <__malloc_unlock+0x8>)
 8005306:	f7ff ba04 	b.w	8004712 <__retarget_lock_release_recursive>
 800530a:	bf00      	nop
 800530c:	200000e8 	.word	0x200000e8

08005310 <_free_r>:
 8005310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005312:	2900      	cmp	r1, #0
 8005314:	d044      	beq.n	80053a0 <_free_r+0x90>
 8005316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800531a:	9001      	str	r0, [sp, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f1a1 0404 	sub.w	r4, r1, #4
 8005322:	bfb8      	it	lt
 8005324:	18e4      	addlt	r4, r4, r3
 8005326:	f7ff ffe7 	bl	80052f8 <__malloc_lock>
 800532a:	4a1e      	ldr	r2, [pc, #120]	; (80053a4 <_free_r+0x94>)
 800532c:	9801      	ldr	r0, [sp, #4]
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	b933      	cbnz	r3, 8005340 <_free_r+0x30>
 8005332:	6063      	str	r3, [r4, #4]
 8005334:	6014      	str	r4, [r2, #0]
 8005336:	b003      	add	sp, #12
 8005338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800533c:	f7ff bfe2 	b.w	8005304 <__malloc_unlock>
 8005340:	42a3      	cmp	r3, r4
 8005342:	d908      	bls.n	8005356 <_free_r+0x46>
 8005344:	6825      	ldr	r5, [r4, #0]
 8005346:	1961      	adds	r1, r4, r5
 8005348:	428b      	cmp	r3, r1
 800534a:	bf01      	itttt	eq
 800534c:	6819      	ldreq	r1, [r3, #0]
 800534e:	685b      	ldreq	r3, [r3, #4]
 8005350:	1949      	addeq	r1, r1, r5
 8005352:	6021      	streq	r1, [r4, #0]
 8005354:	e7ed      	b.n	8005332 <_free_r+0x22>
 8005356:	461a      	mov	r2, r3
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	b10b      	cbz	r3, 8005360 <_free_r+0x50>
 800535c:	42a3      	cmp	r3, r4
 800535e:	d9fa      	bls.n	8005356 <_free_r+0x46>
 8005360:	6811      	ldr	r1, [r2, #0]
 8005362:	1855      	adds	r5, r2, r1
 8005364:	42a5      	cmp	r5, r4
 8005366:	d10b      	bne.n	8005380 <_free_r+0x70>
 8005368:	6824      	ldr	r4, [r4, #0]
 800536a:	4421      	add	r1, r4
 800536c:	1854      	adds	r4, r2, r1
 800536e:	42a3      	cmp	r3, r4
 8005370:	6011      	str	r1, [r2, #0]
 8005372:	d1e0      	bne.n	8005336 <_free_r+0x26>
 8005374:	681c      	ldr	r4, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	6053      	str	r3, [r2, #4]
 800537a:	4421      	add	r1, r4
 800537c:	6011      	str	r1, [r2, #0]
 800537e:	e7da      	b.n	8005336 <_free_r+0x26>
 8005380:	d902      	bls.n	8005388 <_free_r+0x78>
 8005382:	230c      	movs	r3, #12
 8005384:	6003      	str	r3, [r0, #0]
 8005386:	e7d6      	b.n	8005336 <_free_r+0x26>
 8005388:	6825      	ldr	r5, [r4, #0]
 800538a:	1961      	adds	r1, r4, r5
 800538c:	428b      	cmp	r3, r1
 800538e:	bf04      	itt	eq
 8005390:	6819      	ldreq	r1, [r3, #0]
 8005392:	685b      	ldreq	r3, [r3, #4]
 8005394:	6063      	str	r3, [r4, #4]
 8005396:	bf04      	itt	eq
 8005398:	1949      	addeq	r1, r1, r5
 800539a:	6021      	streq	r1, [r4, #0]
 800539c:	6054      	str	r4, [r2, #4]
 800539e:	e7ca      	b.n	8005336 <_free_r+0x26>
 80053a0:	b003      	add	sp, #12
 80053a2:	bd30      	pop	{r4, r5, pc}
 80053a4:	200000ec 	.word	0x200000ec

080053a8 <_read_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	4d07      	ldr	r5, [pc, #28]	; (80053c8 <_read_r+0x20>)
 80053ac:	4604      	mov	r4, r0
 80053ae:	4608      	mov	r0, r1
 80053b0:	4611      	mov	r1, r2
 80053b2:	2200      	movs	r2, #0
 80053b4:	602a      	str	r2, [r5, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	f7fb ff3e 	bl	8001238 <_read>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	d102      	bne.n	80053c6 <_read_r+0x1e>
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	b103      	cbz	r3, 80053c6 <_read_r+0x1e>
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	200000f4 	.word	0x200000f4

080053cc <_fstat_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4d07      	ldr	r5, [pc, #28]	; (80053ec <_fstat_r+0x20>)
 80053d0:	2300      	movs	r3, #0
 80053d2:	4604      	mov	r4, r0
 80053d4:	4608      	mov	r0, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	602b      	str	r3, [r5, #0]
 80053da:	f7fb ff72 	bl	80012c2 <_fstat>
 80053de:	1c43      	adds	r3, r0, #1
 80053e0:	d102      	bne.n	80053e8 <_fstat_r+0x1c>
 80053e2:	682b      	ldr	r3, [r5, #0]
 80053e4:	b103      	cbz	r3, 80053e8 <_fstat_r+0x1c>
 80053e6:	6023      	str	r3, [r4, #0]
 80053e8:	bd38      	pop	{r3, r4, r5, pc}
 80053ea:	bf00      	nop
 80053ec:	200000f4 	.word	0x200000f4

080053f0 <_isatty_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4d06      	ldr	r5, [pc, #24]	; (800540c <_isatty_r+0x1c>)
 80053f4:	2300      	movs	r3, #0
 80053f6:	4604      	mov	r4, r0
 80053f8:	4608      	mov	r0, r1
 80053fa:	602b      	str	r3, [r5, #0]
 80053fc:	f7fb ff71 	bl	80012e2 <_isatty>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_isatty_r+0x1a>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_isatty_r+0x1a>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	200000f4 	.word	0x200000f4

08005410 <_init>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	bf00      	nop
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr

0800541c <_fini>:
 800541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541e:	bf00      	nop
 8005420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005422:	bc08      	pop	{r3}
 8005424:	469e      	mov	lr, r3
 8005426:	4770      	bx	lr
