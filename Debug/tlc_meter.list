
tlc_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080050e0  080050e0  000150e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051bc  080051bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080051bc  080051bc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051bc  080051bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051c0  080051c0  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000088  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f8  200000f8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009bdb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bd8  00000000  00000000  00029c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a0  00000000  00000000  0002b858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005c8  00000000  00000000  0002bef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e610  00000000  00000000  0002c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090f9  00000000  00000000  0004aad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4823  00000000  00000000  00053bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f83ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002314  00000000  00000000  000f843c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080050c8 	.word	0x080050c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080050c8 	.word	0x080050c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4c:	f000 fbb0 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b50:	f000 f807 	bl	8000b62 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f000 f8ce 	bl	8000cf4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b58:	f000 f85c 	bl	8000c14 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000b5c:	f000 f9c6 	bl	8000eec <loop>
  {
 8000b60:	e7fc      	b.n	8000b5c <main+0x14>

08000b62 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b096      	sub	sp, #88	; 0x58
 8000b66:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b6c:	2228      	movs	r2, #40	; 0x28
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 fb13 	bl	800419c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
 8000b94:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b96:	2302      	movs	r3, #2
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9e:	2310      	movs	r3, #16
 8000ba0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000baa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000bae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f001 fd77 	bl	80026a8 <HAL_RCC_OscConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000bc0:	f000 f8ee 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	2102      	movs	r1, #2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f002 fd9f 	bl	8003724 <HAL_RCC_ClockConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000bec:	f000 f8d8 	bl	8000da0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f002 ff77 	bl	8003af0 <HAL_RCCEx_PeriphCLKConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c08:	f000 f8ca 	bl	8000da0 <Error_Handler>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3758      	adds	r7, #88	; 0x58
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
 8000c34:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c36:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000c38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c4a:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c56:	4b26      	ldr	r3, [pc, #152]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c5e:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000c80:	2204      	movs	r2, #4
 8000c82:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c90:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000c92:	f000 fb97 	bl	80013c4 <HAL_ADC_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000c9c:	f000 f880 	bl	8000da0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4811      	ldr	r0, [pc, #68]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000cac:	f001 f8a0 	bl	8001df0 <HAL_ADCEx_MultiModeConfigChannel>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000cb6:	f000 f873 	bl	8000da0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <MX_ADC1_Init+0xdc>)
 8000cd8:	f000 fdca 	bl	8001870 <HAL_ADC_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000ce2:	f000 f85d 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	3728      	adds	r7, #40	; 0x28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000008c 	.word	0x2000008c

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <MX_GPIO_Init+0xa4>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	4a22      	ldr	r2, [pc, #136]	; (8000d98 <MX_GPIO_Init+0xa4>)
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	6153      	str	r3, [r2, #20]
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <MX_GPIO_Init+0xa4>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_GPIO_Init+0xa4>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	4a1c      	ldr	r2, [pc, #112]	; (8000d98 <MX_GPIO_Init+0xa4>)
 8000d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d2c:	6153      	str	r3, [r2, #20]
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_GPIO_Init+0xa4>)
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	4817      	ldr	r0, [pc, #92]	; (8000d9c <MX_GPIO_Init+0xa8>)
 8000d40:	f001 fc82 	bl	8002648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d4a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5e:	f001 fae9 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d62:	2320      	movs	r3, #32
 8000d64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4619      	mov	r1, r3
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <MX_GPIO_Init+0xa8>)
 8000d7a:	f001 fadb 	bl	8002334 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	2028      	movs	r0, #40	; 0x28
 8000d84:	f001 fa9f 	bl	80022c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d88:	2028      	movs	r0, #40	; 0x28
 8000d8a:	f001 fab8 	bl	80022fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8e:	bf00      	nop
 8000d90:	3720      	adds	r7, #32
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	48000400 	.word	0x48000400

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <Error_Handler+0x8>

08000daa <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv>:
	~duration() = default;
	duration& operator=(const duration&) = default;

	// 20.11.5.2 observer
	constexpr rep
	count() const
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	{ return __r; }
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	4610      	mov	r0, r2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <_Z9capa_calcNSt6chrono8durationIxSt5ratioILx1ELx1000EEEEmm>:

using namespace std::chrono;

bool adc_ready = false;

double capa_calc(std::chrono::milliseconds charge_time, uint32_t res, uint32_t vc) {
 8000dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	603b      	str	r3, [r7, #0]
	double ln = log((double)4096 / (double)(4096 - vc));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fb88 	bl	80004f4 <__aeabi_ui2d>
 8000de4:	4602      	mov	r2, r0
 8000de6:	460b      	mov	r3, r1
 8000de8:	f04f 0000 	mov.w	r0, #0
 8000dec:	492f      	ldr	r1, [pc, #188]	; (8000eac <_Z9capa_calcNSt6chrono8durationIxSt5ratioILx1ELx1000EEEEmm+0xe4>)
 8000dee:	f7ff fd25 	bl	800083c <__aeabi_ddiv>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	ec43 2b17 	vmov	d7, r2, r3
 8000dfa:	eeb0 0a47 	vmov.f32	s0, s14
 8000dfe:	eef0 0a67 	vmov.f32	s1, s15
 8000e02:	f002 ff9d 	bl	8003d40 <log>
 8000e06:	ed87 0b04 	vstr	d0, [r7, #16]
	return ((charge_time.count() * 1000 )/ (ln * res));
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ffcb 	bl	8000daa <_ZNKSt6chrono8durationIxSt5ratioILx1ELx1000EEE5countEv>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	f04f 0a00 	mov.w	sl, #0
 8000e1c:	f04f 0b00 	mov.w	fp, #0
 8000e20:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8000e24:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8000e28:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8000e2c:	4652      	mov	r2, sl
 8000e2e:	465b      	mov	r3, fp
 8000e30:	1a14      	subs	r4, r2, r0
 8000e32:	eb63 0501 	sbc.w	r5, r3, r1
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	00ab      	lsls	r3, r5, #2
 8000e40:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8000e44:	00a2      	lsls	r2, r4, #2
 8000e46:	4614      	mov	r4, r2
 8000e48:	461d      	mov	r5, r3
 8000e4a:	eb14 0800 	adds.w	r8, r4, r0
 8000e4e:	eb45 0901 	adc.w	r9, r5, r1
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e66:	4690      	mov	r8, r2
 8000e68:	4699      	mov	r9, r3
 8000e6a:	4642      	mov	r2, r8
 8000e6c:	464b      	mov	r3, r9
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f7ff fb8b 	bl	800058c <__aeabi_l2d>
 8000e76:	4604      	mov	r4, r0
 8000e78:	460d      	mov	r5, r1
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fb3a 	bl	80004f4 <__aeabi_ui2d>
 8000e80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e84:	f7ff fbb0 	bl	80005e8 <__aeabi_dmul>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	4629      	mov	r1, r5
 8000e90:	f7ff fcd4 	bl	800083c <__aeabi_ddiv>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	ec43 2b17 	vmov	d7, r2, r3
}
 8000e9c:	eeb0 0a47 	vmov.f32	s0, s14
 8000ea0:	eef0 0a67 	vmov.f32	s1, s15
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000eac:	40b00000 	.word	0x40b00000

08000eb0 <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80fb      	strh	r3, [r7, #6]
	if (pin == GPIO_PIN_10) {
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec0:	d10b      	bne.n	8000eda <HAL_GPIO_EXTI_Callback+0x2a>
		GPIO_PinState pin_val = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000ec2:	2120      	movs	r1, #32
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x34>)
 8000ec6:	f001 fba7 	bl	8002618 <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	73fb      	strb	r3, [r7, #15]
		if (pin_val == GPIO_PIN_RESET) {
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <HAL_GPIO_EXTI_Callback+0x2a>
			adc_ready = true;
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x38>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	48000400 	.word	0x48000400
 8000ee8:	200000dc 	.word	0x200000dc

08000eec <loop>:

extern "C" void loop(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
	  if (adc_ready) {
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <loop+0x68>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d028      	beq.n	8000f4c <loop+0x60>
		  adc_ready = false;
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <loop+0x68>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2120      	movs	r1, #32
 8000f04:	4814      	ldr	r0, [pc, #80]	; (8000f58 <loop+0x6c>)
 8000f06:	f001 fb9f 	bl	8002648 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000f0a:	2064      	movs	r0, #100	; 0x64
 8000f0c:	f000 fa36 	bl	800137c <HAL_Delay>
		  HAL_ADC_Start(&hadc1);
 8000f10:	4812      	ldr	r0, [pc, #72]	; (8000f5c <loop+0x70>)
 8000f12:	f000 fbe9 	bl	80016e8 <HAL_ADC_Start>

		  uint32_t val = HAL_ADC_GetValue(&hadc1);
 8000f16:	4811      	ldr	r0, [pc, #68]	; (8000f5c <loop+0x70>)
 8000f18:	f000 fc9c 	bl	8001854 <HAL_ADC_GetValue>
 8000f1c:	6178      	str	r0, [r7, #20]
		  double cap = capa_calc(1ms, 1000, val);
 8000f1e:	463b      	mov	r3, r7
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f81f 	bl	8000f64 <_ZNSt8literals15chrono_literalsli2msIJLc49EEEENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEv>
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f30:	f7ff ff4a 	bl	8000dc8 <_Z9capa_calcNSt6chrono8durationIxSt5ratioILx1ELx1000EEEEmm>
 8000f34:	ed87 0b02 	vstr	d0, [r7, #8]
		  printf("Capacitance: %lu", cap);
 8000f38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f3c:	4808      	ldr	r0, [pc, #32]	; (8000f60 <loop+0x74>)
 8000f3e:	f003 f935 	bl	80041ac <iprintf>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2120      	movs	r1, #32
 8000f46:	4804      	ldr	r0, [pc, #16]	; (8000f58 <loop+0x6c>)
 8000f48:	f001 fb7e 	bl	8002648 <HAL_GPIO_WritePin>
	  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200000dc 	.word	0x200000dc
 8000f58:	48000400 	.word	0x48000400
 8000f5c:	2000008c 	.word	0x2000008c
 8000f60:	080050e0 	.word	0x080050e0

08000f64 <_ZNSt8literals15chrono_literalsli2msIJLc49EEEENSt6chrono8durationIxSt5ratioILx1ELx1000EEEEv>:
    { return chrono::duration<long double, milli>{__msecs}; }

    /// Literal suffix for durations of type `std::chrono::milliseconds`
    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f805 	bl	8000f7e <_ZNSt8literals15chrono_literals16__check_overflowINSt6chrono8durationIxSt5ratioILx1ELx1000EEEEJLc49EEEET_v>
 8000f74:	bf00      	nop
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <_ZNSt8literals15chrono_literals16__check_overflowINSt6chrono8durationIxSt5ratioILx1ELx1000EEEEJLc49EEEET_v>:
      constexpr _Dur __check_overflow()
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
	constexpr typename _Dur::rep __repval = _Val::value;
 8000f86:	f04f 0201 	mov.w	r2, #1
 8000f8a:	f04f 0300 	mov.w	r3, #0
 8000f8e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return _Dur(__repval);
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	4619      	mov	r1, r3
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f804 	bl	8000fa6 <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000EEEC1IxvEERKT_>
      }
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_ZNSt6chrono8durationIxSt5ratioILx1ELx1000EEEC1IxvEERKT_>:
	  constexpr explicit duration(const _Rep2& __rep)
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	e9c1 2300 	strd	r2, r3, [r1]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_MspInit+0x44>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_MspInit+0x44>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6193      	str	r3, [r2, #24]
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_MspInit+0x44>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_MspInit+0x44>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_MspInit+0x44>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_MspInit+0x44>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001034:	d124      	bne.n	8001080 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001036:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_ADC_MspInit+0x74>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	4a13      	ldr	r2, [pc, #76]	; (8001088 <HAL_ADC_MspInit+0x74>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001040:	6153      	str	r3, [r2, #20]
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_ADC_MspInit+0x74>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_ADC_MspInit+0x74>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <HAL_ADC_MspInit+0x74>)
 8001054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001058:	6153      	str	r3, [r2, #20]
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_ADC_MspInit+0x74>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001066:	2302      	movs	r3, #2
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800106a:	2303      	movs	r3, #3
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107c:	f001 f95a 	bl	8002334 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	3728      	adds	r7, #40	; 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40021000 	.word	0x40021000

0800108c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <NMI_Handler+0x4>

08001092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <HardFault_Handler+0x4>

08001098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <MemManage_Handler+0x4>

0800109e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <BusFault_Handler+0x4>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <UsageFault_Handler+0x4>

080010aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d8:	f000 f930 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}

080010e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80010e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010e8:	f001 fac6 	bl	8002678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	e00a      	b.n	8001118 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001102:	f3af 8000 	nop.w
 8001106:	4601      	mov	r1, r0
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	60ba      	str	r2, [r7, #8]
 800110e:	b2ca      	uxtb	r2, r1
 8001110:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbf0      	blt.n	8001102 <_read+0x12>
  }

  return len;
 8001120:	687b      	ldr	r3, [r7, #4]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	e009      	b.n	8001150 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	60ba      	str	r2, [r7, #8]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	429a      	cmp	r2, r3
 8001156:	dbf1      	blt.n	800113c <_write+0x12>
  }
  return len;
 8001158:	687b      	ldr	r3, [r7, #4]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <_close>:

int _close(int file)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800118a:	605a      	str	r2, [r3, #4]
  return 0;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <_isatty>:

int _isatty(int file)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <_sbrk+0x5c>)
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <_sbrk+0x60>)
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <_sbrk+0x64>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <_sbrk+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d207      	bcs.n	800120c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011fc:	f002 ffa4 	bl	8004148 <__errno>
 8001200:	4603      	mov	r3, r0
 8001202:	220c      	movs	r2, #12
 8001204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800120a:	e009      	b.n	8001220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_sbrk+0x64>)
 800121c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20003000 	.word	0x20003000
 800122c:	00000400 	.word	0x00000400
 8001230:	200000e0 	.word	0x200000e0
 8001234:	200000f8 	.word	0x200000f8

08001238 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <SystemInit+0x20>)
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <SystemInit+0x20>)
 8001244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001260:	f7ff ffea 	bl	8001238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <LoopForever+0x6>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <LoopForever+0xe>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	; (80012a8 <LoopForever+0x16>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128a:	f002 ff63 	bl	8004154 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800128e:	f7ff fc5b 	bl	8000b48 <main>

08001292 <LoopForever>:

LoopForever:
    b LoopForever
 8001292:	e7fe      	b.n	8001292 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001294:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80012a0:	080051c4 	.word	0x080051c4
  ldr r2, =_sbss
 80012a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80012a8:	200000f8 	.word	0x200000f8

080012ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_2_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_Init+0x28>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_Init+0x28>)
 80012ba:	f043 0310 	orr.w	r3, r3, #16
 80012be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 fff5 	bl	80022b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	200f      	movs	r0, #15
 80012c8:	f000 f808 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fe7e 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40022000 	.word	0x40022000

080012dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x54>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x58>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f001 f80d 	bl	800231a <HAL_SYSTICK_Config>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00e      	b.n	8001328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d80a      	bhi.n	8001326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001318:	f000 ffd5 	bl	80022c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <HAL_InitTick+0x5c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000000 	.word	0x20000000
 8001334:	20000008 	.word	0x20000008
 8001338:	20000004 	.word	0x20000004

0800133c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000008 	.word	0x20000008
 8001360:	200000e4 	.word	0x200000e4

08001364 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;  
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200000e4 	.word	0x200000e4

0800137c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff ffee 	bl	8001364 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_Delay+0x44>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffde 	bl	8001364 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000008 	.word	0x20000008

080013c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b09a      	sub	sp, #104	; 0x68
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e172      	b.n	80016ca <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d176      	bne.n	80014e4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d152      	bne.n	80014a4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff fdfb 	bl	8001014 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d13b      	bne.n	80014a4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 fe09 	bl	8002044 <ADC_Disable>
 8001432:	4603      	mov	r3, r0
 8001434:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f003 0310 	and.w	r3, r3, #16
 8001440:	2b00      	cmp	r3, #0
 8001442:	d12f      	bne.n	80014a4 <HAL_ADC_Init+0xe0>
 8001444:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001448:	2b00      	cmp	r3, #0
 800144a:	d12b      	bne.n	80014a4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001454:	f023 0302 	bic.w	r3, r3, #2
 8001458:	f043 0202 	orr.w	r2, r3, #2
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800146e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800147e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001480:	4b94      	ldr	r3, [pc, #592]	; (80016d4 <HAL_ADC_Init+0x310>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a94      	ldr	r2, [pc, #592]	; (80016d8 <HAL_ADC_Init+0x314>)
 8001486:	fba2 2303 	umull	r2, r3, r2, r3
 800148a:	0c9a      	lsrs	r2, r3, #18
 800148c:	4613      	mov	r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001496:	e002      	b.n	800149e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	3b01      	subs	r3, #1
 800149c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f9      	bne.n	8001498 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d007      	beq.n	80014c2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014c0:	d110      	bne.n	80014e4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f023 0312 	bic.w	r3, r3, #18
 80014ca:	f043 0210 	orr.w	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f043 0201 	orr.w	r2, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f040 80df 	bne.w	80016b0 <HAL_ADC_Init+0x2ec>
 80014f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f040 80da 	bne.w	80016b0 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 80d2 	bne.w	80016b0 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001514:	f043 0202 	orr.w	r2, r3, #2
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800151c:	4b6f      	ldr	r3, [pc, #444]	; (80016dc <HAL_ADC_Init+0x318>)
 800151e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001528:	d102      	bne.n	8001530 <HAL_ADC_Init+0x16c>
 800152a:	4b6d      	ldr	r3, [pc, #436]	; (80016e0 <HAL_ADC_Init+0x31c>)
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	e002      	b.n	8001536 <HAL_ADC_Init+0x172>
 8001530:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001534:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	2b01      	cmp	r3, #1
 8001542:	d108      	bne.n	8001556 <HAL_ADC_Init+0x192>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b01      	cmp	r3, #1
 8001550:	d101      	bne.n	8001556 <HAL_ADC_Init+0x192>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_ADC_Init+0x194>
 8001556:	2300      	movs	r3, #0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d11c      	bne.n	8001596 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800155c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800155e:	2b00      	cmp	r3, #0
 8001560:	d010      	beq.n	8001584 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	2b01      	cmp	r3, #1
 800156c:	d107      	bne.n	800157e <HAL_ADC_Init+0x1ba>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b01      	cmp	r3, #1
 8001578:	d101      	bne.n	800157e <HAL_ADC_Init+0x1ba>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <HAL_ADC_Init+0x1bc>
 800157e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001580:	2b00      	cmp	r3, #0
 8001582:	d108      	bne.n	8001596 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	431a      	orrs	r2, r3
 8001592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001594:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7e5b      	ldrb	r3, [r3, #25]
 800159a:	035b      	lsls	r3, r3, #13
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015a0:	2a01      	cmp	r2, #1
 80015a2:	d002      	beq.n	80015aa <HAL_ADC_Init+0x1e6>
 80015a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a8:	e000      	b.n	80015ac <HAL_ADC_Init+0x1e8>
 80015aa:	2200      	movs	r2, #0
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015bc:	4313      	orrs	r3, r2
 80015be:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d11b      	bne.n	8001602 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7e5b      	ldrb	r3, [r3, #25]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	3b01      	subs	r3, #1
 80015d8:	045a      	lsls	r2, r3, #17
 80015da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015dc:	4313      	orrs	r3, r2
 80015de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e2:	663b      	str	r3, [r7, #96]	; 0x60
 80015e4:	e00d      	b.n	8001602 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80015ee:	f043 0220 	orr.w	r2, r3, #32
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f043 0201 	orr.w	r2, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	2b01      	cmp	r3, #1
 8001608:	d007      	beq.n	800161a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	4313      	orrs	r3, r2
 8001614:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001616:	4313      	orrs	r3, r2
 8001618:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	2b00      	cmp	r3, #0
 8001626:	d114      	bne.n	8001652 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001636:	f023 0302 	bic.w	r3, r3, #2
 800163a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7e1b      	ldrb	r3, [r3, #24]
 8001640:	039a      	lsls	r2, r3, #14
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4313      	orrs	r3, r2
 800164c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800164e:	4313      	orrs	r3, r2
 8001650:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <HAL_ADC_Init+0x320>)
 800165a:	4013      	ands	r3, r2
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001662:	430b      	orrs	r3, r1
 8001664:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d10c      	bne.n	8001688 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	f023 010f 	bic.w	r1, r3, #15
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	1e5a      	subs	r2, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	631a      	str	r2, [r3, #48]	; 0x30
 8001686:	e007      	b.n	8001698 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 020f 	bic.w	r2, r2, #15
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f023 0303 	bic.w	r3, r3, #3
 80016a6:	f043 0201 	orr.w	r2, r3, #1
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
 80016ae:	e00a      	b.n	80016c6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f023 0312 	bic.w	r3, r3, #18
 80016b8:	f043 0210 	orr.w	r2, r3, #16
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80016c0:	2301      	movs	r3, #1
 80016c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80016c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3768      	adds	r7, #104	; 0x68
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000000 	.word	0x20000000
 80016d8:	431bde83 	.word	0x431bde83
 80016dc:	50000300 	.word	0x50000300
 80016e0:	50000100 	.word	0x50000100
 80016e4:	fff0c007 	.word	0xfff0c007

080016e8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f040 809c 	bne.w	800183c <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_ADC_Start+0x2a>
 800170e:	2302      	movs	r3, #2
 8001710:	e097      	b.n	8001842 <HAL_ADC_Start+0x15a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 fc2e 	bl	8001f7c <ADC_Enable>
 8001720:	4603      	mov	r3, r0
 8001722:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f040 8083 	bne.w	8001832 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001734:	f023 0301 	bic.w	r3, r3, #1
 8001738:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001740:	4b42      	ldr	r3, [pc, #264]	; (800184c <HAL_ADC_Start+0x164>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	2b00      	cmp	r3, #0
 800174a:	d004      	beq.n	8001756 <HAL_ADC_Start+0x6e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001754:	d115      	bne.n	8001782 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d027      	beq.n	80017c0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001778:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001780:	e01e      	b.n	80017c0 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001796:	d004      	beq.n	80017a2 <HAL_ADC_Start+0xba>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a2c      	ldr	r2, [pc, #176]	; (8001850 <HAL_ADC_Start+0x168>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d10e      	bne.n	80017c0 <HAL_ADC_Start+0xd8>
 80017a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d007      	beq.n	80017c0 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017cc:	d106      	bne.n	80017dc <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f023 0206 	bic.w	r2, r3, #6
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	645a      	str	r2, [r3, #68]	; 0x44
 80017da:	e002      	b.n	80017e2 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	221c      	movs	r2, #28
 80017f0:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <HAL_ADC_Start+0x164>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d010      	beq.n	8001820 <HAL_ADC_Start+0x138>
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <HAL_ADC_Start+0x164>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	2b05      	cmp	r3, #5
 8001808:	d00a      	beq.n	8001820 <HAL_ADC_Start+0x138>
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_ADC_Start+0x164>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	2b09      	cmp	r3, #9
 8001814:	d004      	beq.n	8001820 <HAL_ADC_Start+0x138>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800181e:	d10f      	bne.n	8001840 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0204 	orr.w	r2, r2, #4
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	e006      	b.n	8001840 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800183a:	e001      	b.n	8001840 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800183c:	2302      	movs	r3, #2
 800183e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	50000300 	.word	0x50000300
 8001850:	50000100 	.word	0x50000100

08001854 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001870:	b480      	push	{r7}
 8001872:	b09b      	sub	sp, #108	; 0x6c
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800188a:	2b01      	cmp	r3, #1
 800188c:	d101      	bne.n	8001892 <HAL_ADC_ConfigChannel+0x22>
 800188e:	2302      	movs	r3, #2
 8001890:	e2a4      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x56c>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f040 8288 	bne.w	8001dba <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d81c      	bhi.n	80018ec <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	461a      	mov	r2, r3
 80018c6:	231f      	movs	r3, #31
 80018c8:	4093      	lsls	r3, r2
 80018ca:	43db      	mvns	r3, r3
 80018cc:	4019      	ands	r1, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa00 f203 	lsl.w	r2, r0, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30
 80018ea:	e063      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b09      	cmp	r3, #9
 80018f2:	d81e      	bhi.n	8001932 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	3b1e      	subs	r3, #30
 8001908:	221f      	movs	r2, #31
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	4019      	ands	r1, r3
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6818      	ldr	r0, [r3, #0]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	3b1e      	subs	r3, #30
 8001924:	fa00 f203 	lsl.w	r2, r0, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	635a      	str	r2, [r3, #52]	; 0x34
 8001930:	e040      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b0e      	cmp	r3, #14
 8001938:	d81e      	bhi.n	8001978 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	3b3c      	subs	r3, #60	; 0x3c
 800194e:	221f      	movs	r2, #31
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	4019      	ands	r1, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	3b3c      	subs	r3, #60	; 0x3c
 800196a:	fa00 f203 	lsl.w	r2, r0, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	639a      	str	r2, [r3, #56]	; 0x38
 8001976:	e01d      	b.n	80019b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	3b5a      	subs	r3, #90	; 0x5a
 800198c:	221f      	movs	r2, #31
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	4019      	ands	r1, r3
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	3b5a      	subs	r3, #90	; 0x5a
 80019a8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f040 80e5 	bne.w	8001b8e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b09      	cmp	r3, #9
 80019ca:	d91c      	bls.n	8001a06 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6999      	ldr	r1, [r3, #24]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4613      	mov	r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	4413      	add	r3, r2
 80019dc:	3b1e      	subs	r3, #30
 80019de:	2207      	movs	r2, #7
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4019      	ands	r1, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6898      	ldr	r0, [r3, #8]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4613      	mov	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	3b1e      	subs	r3, #30
 80019f8:	fa00 f203 	lsl.w	r2, r0, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	619a      	str	r2, [r3, #24]
 8001a04:	e019      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6959      	ldr	r1, [r3, #20]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	2207      	movs	r2, #7
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4019      	ands	r1, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6898      	ldr	r0, [r3, #8]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	08db      	lsrs	r3, r3, #3
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d84f      	bhi.n	8001afc <HAL_ADC_ConfigChannel+0x28c>
 8001a5c:	a201      	add	r2, pc, #4	; (adr r2, 8001a64 <HAL_ADC_ConfigChannel+0x1f4>)
 8001a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a62:	bf00      	nop
 8001a64:	08001a75 	.word	0x08001a75
 8001a68:	08001a97 	.word	0x08001a97
 8001a6c:	08001ab9 	.word	0x08001ab9
 8001a70:	08001adb 	.word	0x08001adb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a7a:	4b94      	ldr	r3, [pc, #592]	; (8001ccc <HAL_ADC_ConfigChannel+0x45c>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	0691      	lsls	r1, r2, #26
 8001a84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a86:	430a      	orrs	r2, r1
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a92:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a94:	e07e      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a9c:	4b8b      	ldr	r3, [pc, #556]	; (8001ccc <HAL_ADC_ConfigChannel+0x45c>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	0691      	lsls	r1, r2, #26
 8001aa6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ab4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ab6:	e06d      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001abe:	4b83      	ldr	r3, [pc, #524]	; (8001ccc <HAL_ADC_ConfigChannel+0x45c>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	0691      	lsls	r1, r2, #26
 8001ac8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aca:	430a      	orrs	r2, r1
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ad6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ad8:	e05c      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ae0:	4b7a      	ldr	r3, [pc, #488]	; (8001ccc <HAL_ADC_ConfigChannel+0x45c>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	0691      	lsls	r1, r2, #26
 8001aea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aec:	430a      	orrs	r2, r1
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001af8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001afa:	e04b      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	069b      	lsls	r3, r3, #26
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d107      	bne.n	8001b20 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b1e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	069b      	lsls	r3, r3, #26
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d107      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b42:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	069b      	lsls	r3, r3, #26
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d107      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b66:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	069b      	lsls	r3, r3, #26
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d10a      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b8a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001b8c:	e001      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001b8e:	bf00      	nop
 8001b90:	e000      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001b92:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d108      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x344>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x344>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x346>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f040 810a 	bne.w	8001dd0 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d00f      	beq.n	8001be4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	400a      	ands	r2, r1
 8001bde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001be2:	e049      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b09      	cmp	r3, #9
 8001c04:	d91c      	bls.n	8001c40 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6999      	ldr	r1, [r3, #24]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4613      	mov	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	3b1b      	subs	r3, #27
 8001c18:	2207      	movs	r2, #7
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	4019      	ands	r1, r3
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6898      	ldr	r0, [r3, #8]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	3b1b      	subs	r3, #27
 8001c32:	fa00 f203 	lsl.w	r2, r0, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	619a      	str	r2, [r3, #24]
 8001c3e:	e01b      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6959      	ldr	r1, [r3, #20]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	2207      	movs	r2, #7
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	4019      	ands	r1, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6898      	ldr	r0, [r3, #8]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c78:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_ADC_ConfigChannel+0x460>)
 8001c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b10      	cmp	r3, #16
 8001c82:	d105      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d015      	beq.n	8001cbc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c94:	2b11      	cmp	r3, #17
 8001c96:	d105      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00b      	beq.n	8001cbc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001ca8:	2b12      	cmp	r3, #18
 8001caa:	f040 8091 	bne.w	8001dd0 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f040 808a 	bne.w	8001dd0 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cc4:	d108      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x468>
 8001cc6:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <HAL_ADC_ConfigChannel+0x464>)
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	e008      	b.n	8001cde <HAL_ADC_ConfigChannel+0x46e>
 8001ccc:	83fff000 	.word	0x83fff000
 8001cd0:	50000300 	.word	0x50000300
 8001cd4:	50000100 	.word	0x50000100
 8001cd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cdc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d108      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x48e>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x48e>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x490>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d150      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d04:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d010      	beq.n	8001d2c <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d107      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x4b6>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x4b6>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x4b8>
 8001d26:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d13c      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b10      	cmp	r3, #16
 8001d32:	d11d      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x500>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d3c:	d118      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d48:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <HAL_ADC_ConfigChannel+0x578>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a27      	ldr	r2, [pc, #156]	; (8001dec <HAL_ADC_ConfigChannel+0x57c>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	0c9a      	lsrs	r2, r3, #18
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d60:	e002      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f9      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d6e:	e02e      	b.n	8001dce <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b11      	cmp	r3, #17
 8001d76:	d10b      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x520>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d80:	d106      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d8c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d8e:	e01e      	b.n	8001dce <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b12      	cmp	r3, #18
 8001d96:	d11a      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001da4:	e013      	b.n	8001dce <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f043 0220 	orr.w	r2, r3, #32
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001db8:	e00a      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f043 0220 	orr.w	r2, r3, #32
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001dcc:	e000      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dce:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001dd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	376c      	adds	r7, #108	; 0x6c
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	20000000 	.word	0x20000000
 8001dec:	431bde83 	.word	0x431bde83

08001df0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b099      	sub	sp, #100	; 0x64
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e08:	d102      	bne.n	8001e10 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001e0a:	4b5a      	ldr	r3, [pc, #360]	; (8001f74 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	e002      	b.n	8001e16 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001e10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e14:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0a2      	b.n	8001f66 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e09b      	b.n	8001f66 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d17f      	bne.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d179      	bne.n	8001f44 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e50:	4b49      	ldr	r3, [pc, #292]	; (8001f78 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001e52:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d040      	beq.n	8001ede <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e6e:	035b      	lsls	r3, r3, #13
 8001e70:	430b      	orrs	r3, r1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e76:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d108      	bne.n	8001e98 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d15c      	bne.n	8001f58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d107      	bne.n	8001eba <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001eba:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d14b      	bne.n	8001f58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ec0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001ec8:	f023 030f 	bic.w	r3, r3, #15
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	6811      	ldr	r1, [r2, #0]
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	6892      	ldr	r2, [r2, #8]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eda:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001edc:	e03c      	b.n	8001f58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ee8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d108      	bne.n	8001f0a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d123      	bne.n	8001f58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d107      	bne.n	8001f2c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001f2c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d112      	bne.n	8001f58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f3a:	f023 030f 	bic.w	r3, r3, #15
 8001f3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f40:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f42:	e009      	b.n	8001f58 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f043 0220 	orr.w	r2, r3, #32
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001f56:	e000      	b.n	8001f5a <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f58:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001f66:	4618      	mov	r0, r3
 8001f68:	3764      	adds	r7, #100	; 0x64
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	50000100 	.word	0x50000100
 8001f78:	50000300 	.word	0x50000300

08001f7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d108      	bne.n	8001fa8 <ADC_Enable+0x2c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <ADC_Enable+0x2c>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <ADC_Enable+0x2e>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d143      	bne.n	8002036 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	4b22      	ldr	r3, [pc, #136]	; (8002040 <ADC_Enable+0xc4>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00d      	beq.n	8001fd8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f043 0210 	orr.w	r2, r3, #16
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e02f      	b.n	8002038 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001fe8:	f7ff f9bc 	bl	8001364 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fee:	e01b      	b.n	8002028 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ff0:	f7ff f9b8 	bl	8001364 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d914      	bls.n	8002028 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d00d      	beq.n	8002028 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f043 0210 	orr.w	r2, r3, #16
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e007      	b.n	8002038 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b01      	cmp	r3, #1
 8002034:	d1dc      	bne.n	8001ff0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	8000003f 	.word	0x8000003f

08002044 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d108      	bne.n	8002070 <ADC_Disable+0x2c>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <ADC_Disable+0x2c>
 800206c:	2301      	movs	r3, #1
 800206e:	e000      	b.n	8002072 <ADC_Disable+0x2e>
 8002070:	2300      	movs	r3, #0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d047      	beq.n	8002106 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030d 	and.w	r3, r3, #13
 8002080:	2b01      	cmp	r3, #1
 8002082:	d10f      	bne.n	80020a4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0202 	orr.w	r2, r2, #2
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2203      	movs	r2, #3
 800209a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800209c:	f7ff f962 	bl	8001364 <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020a2:	e029      	b.n	80020f8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	f043 0210 	orr.w	r2, r3, #16
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b4:	f043 0201 	orr.w	r2, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e023      	b.n	8002108 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020c0:	f7ff f950 	bl	8001364 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d914      	bls.n	80020f8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d10d      	bne.n	80020f8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f043 0210 	orr.w	r2, r3, #16
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	f043 0201 	orr.w	r2, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e007      	b.n	8002108 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d0dc      	beq.n	80020c0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002120:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800212c:	4013      	ands	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800213c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002142:	4a04      	ldr	r2, [pc, #16]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60d3      	str	r3, [r2, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <__NVIC_GetPriorityGrouping+0x18>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	f003 0307 	and.w	r3, r3, #7
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	2b00      	cmp	r3, #0
 8002184:	db0b      	blt.n	800219e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	f003 021f 	and.w	r2, r3, #31
 800218c:	4907      	ldr	r1, [pc, #28]	; (80021ac <__NVIC_EnableIRQ+0x38>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	2001      	movs	r0, #1
 8002196:	fa00 f202 	lsl.w	r2, r0, r2
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000e100 	.word	0xe000e100

080021b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	6039      	str	r1, [r7, #0]
 80021ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	db0a      	blt.n	80021da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	490c      	ldr	r1, [pc, #48]	; (80021fc <__NVIC_SetPriority+0x4c>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	0112      	lsls	r2, r2, #4
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	440b      	add	r3, r1
 80021d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d8:	e00a      	b.n	80021f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4908      	ldr	r1, [pc, #32]	; (8002200 <__NVIC_SetPriority+0x50>)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	3b04      	subs	r3, #4
 80021e8:	0112      	lsls	r2, r2, #4
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	440b      	add	r3, r1
 80021ee:	761a      	strb	r2, [r3, #24]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000e100 	.word	0xe000e100
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	; 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f1c3 0307 	rsb	r3, r3, #7
 800221e:	2b04      	cmp	r3, #4
 8002220:	bf28      	it	cs
 8002222:	2304      	movcs	r3, #4
 8002224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3304      	adds	r3, #4
 800222a:	2b06      	cmp	r3, #6
 800222c:	d902      	bls.n	8002234 <NVIC_EncodePriority+0x30>
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3b03      	subs	r3, #3
 8002232:	e000      	b.n	8002236 <NVIC_EncodePriority+0x32>
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43da      	mvns	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	401a      	ands	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800224c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	43d9      	mvns	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	4313      	orrs	r3, r2
         );
}
 800225e:	4618      	mov	r0, r3
 8002260:	3724      	adds	r7, #36	; 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800227c:	d301      	bcc.n	8002282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227e:	2301      	movs	r3, #1
 8002280:	e00f      	b.n	80022a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <SysTick_Config+0x40>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228a:	210f      	movs	r1, #15
 800228c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002290:	f7ff ff8e 	bl	80021b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <SysTick_Config+0x40>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <SysTick_Config+0x40>)
 800229c:	2207      	movs	r2, #7
 800229e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	e000e010 	.word	0xe000e010

080022b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff29 	bl	8002110 <__NVIC_SetPriorityGrouping>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d8:	f7ff ff3e 	bl	8002158 <__NVIC_GetPriorityGrouping>
 80022dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7ff ff8e 	bl	8002204 <NVIC_EncodePriority>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5d 	bl	80021b0 <__NVIC_SetPriority>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff31 	bl	8002174 <__NVIC_EnableIRQ>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ffa2 	bl	800226c <SysTick_Config>
 8002328:	4603      	mov	r3, r0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002342:	e14e      	b.n	80025e2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	2101      	movs	r1, #1
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	4013      	ands	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8140 	beq.w	80025dc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	2b01      	cmp	r3, #1
 8002366:	d005      	beq.n	8002374 <HAL_GPIO_Init+0x40>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d130      	bne.n	80023d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	4013      	ands	r3, r2
 800238a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023aa:	2201      	movs	r2, #1
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	f003 0201 	and.w	r2, r3, #1
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d017      	beq.n	8002412 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	2203      	movs	r2, #3
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4013      	ands	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d123      	bne.n	8002466 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	08da      	lsrs	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3208      	adds	r2, #8
 8002426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	220f      	movs	r2, #15
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4013      	ands	r3, r2
 8002440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	08da      	lsrs	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3208      	adds	r2, #8
 8002460:	6939      	ldr	r1, [r7, #16]
 8002462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	4013      	ands	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0203 	and.w	r2, r3, #3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 809a 	beq.w	80025dc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a8:	4b55      	ldr	r3, [pc, #340]	; (8002600 <HAL_GPIO_Init+0x2cc>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4a54      	ldr	r2, [pc, #336]	; (8002600 <HAL_GPIO_Init+0x2cc>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6193      	str	r3, [r2, #24]
 80024b4:	4b52      	ldr	r3, [pc, #328]	; (8002600 <HAL_GPIO_Init+0x2cc>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024c0:	4a50      	ldr	r2, [pc, #320]	; (8002604 <HAL_GPIO_Init+0x2d0>)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	3302      	adds	r3, #2
 80024c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024ea:	d013      	beq.n	8002514 <HAL_GPIO_Init+0x1e0>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a46      	ldr	r2, [pc, #280]	; (8002608 <HAL_GPIO_Init+0x2d4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00d      	beq.n	8002510 <HAL_GPIO_Init+0x1dc>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a45      	ldr	r2, [pc, #276]	; (800260c <HAL_GPIO_Init+0x2d8>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d007      	beq.n	800250c <HAL_GPIO_Init+0x1d8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a44      	ldr	r2, [pc, #272]	; (8002610 <HAL_GPIO_Init+0x2dc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d101      	bne.n	8002508 <HAL_GPIO_Init+0x1d4>
 8002504:	2303      	movs	r3, #3
 8002506:	e006      	b.n	8002516 <HAL_GPIO_Init+0x1e2>
 8002508:	2305      	movs	r3, #5
 800250a:	e004      	b.n	8002516 <HAL_GPIO_Init+0x1e2>
 800250c:	2302      	movs	r3, #2
 800250e:	e002      	b.n	8002516 <HAL_GPIO_Init+0x1e2>
 8002510:	2301      	movs	r3, #1
 8002512:	e000      	b.n	8002516 <HAL_GPIO_Init+0x1e2>
 8002514:	2300      	movs	r3, #0
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	f002 0203 	and.w	r2, r2, #3
 800251c:	0092      	lsls	r2, r2, #2
 800251e:	4093      	lsls	r3, r2
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002526:	4937      	ldr	r1, [pc, #220]	; (8002604 <HAL_GPIO_Init+0x2d0>)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	089b      	lsrs	r3, r3, #2
 800252c:	3302      	adds	r3, #2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002534:	4b37      	ldr	r3, [pc, #220]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	43db      	mvns	r3, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002558:	4a2e      	ldr	r2, [pc, #184]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800255e:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002582:	4a24      	ldr	r2, [pc, #144]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	43db      	mvns	r3, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025ac:	4a19      	ldr	r2, [pc, #100]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b2:	4b18      	ldr	r3, [pc, #96]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4013      	ands	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025d6:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <HAL_GPIO_Init+0x2e0>)
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	3301      	adds	r3, #1
 80025e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f47f aea9 	bne.w	8002344 <HAL_GPIO_Init+0x10>
  }
}
 80025f2:	bf00      	nop
 80025f4:	bf00      	nop
 80025f6:	371c      	adds	r7, #28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	40021000 	.word	0x40021000
 8002604:	40010000 	.word	0x40010000
 8002608:	48000400 	.word	0x48000400
 800260c:	48000800 	.word	0x48000800
 8002610:	48000c00 	.word	0x48000c00
 8002614:	40010400 	.word	0x40010400

08002618 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	887b      	ldrh	r3, [r7, #2]
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
 8002634:	e001      	b.n	800263a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800263a:	7bfb      	ldrb	r3, [r7, #15]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	807b      	strh	r3, [r7, #2]
 8002654:	4613      	mov	r3, r2
 8002656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002658:	787b      	ldrb	r3, [r7, #1]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002664:	e002      	b.n	800266c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002682:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	88fb      	ldrh	r3, [r7, #6]
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d006      	beq.n	800269c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800268e:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fc0a 	bl	8000eb0 <HAL_GPIO_EXTI_Callback>
  }
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40010400 	.word	0x40010400

080026a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026b8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d102      	bne.n	80026ce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f001 b823 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 817d 	beq.w	80029de <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80026e4:	4bbc      	ldr	r3, [pc, #752]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d00c      	beq.n	800270a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026f0:	4bb9      	ldr	r3, [pc, #740]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d15c      	bne.n	80027b6 <HAL_RCC_OscConfig+0x10e>
 80026fc:	4bb6      	ldr	r3, [pc, #728]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002708:	d155      	bne.n	80027b6 <HAL_RCC_OscConfig+0x10e>
 800270a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800270e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002712:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002716:	fa93 f3a3 	rbit	r3, r3
 800271a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800271e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d102      	bne.n	800273c <HAL_RCC_OscConfig+0x94>
 8002736:	4ba8      	ldr	r3, [pc, #672]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	e015      	b.n	8002768 <HAL_RCC_OscConfig+0xc0>
 800273c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002740:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002744:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002750:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002754:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002758:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800275c:	fa93 f3a3 	rbit	r3, r3
 8002760:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002764:	4b9c      	ldr	r3, [pc, #624]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800276c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002770:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002774:	fa92 f2a2 	rbit	r2, r2
 8002778:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800277c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002780:	fab2 f282 	clz	r2, r2
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	f042 0220 	orr.w	r2, r2, #32
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f002 021f 	and.w	r2, r2, #31
 8002790:	2101      	movs	r1, #1
 8002792:	fa01 f202 	lsl.w	r2, r1, r2
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 811f 	beq.w	80029dc <HAL_RCC_OscConfig+0x334>
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f040 8116 	bne.w	80029dc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f000 bfaf 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_OscConfig+0x12e>
 80027c8:	4b83      	ldr	r3, [pc, #524]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a82      	ldr	r2, [pc, #520]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	e036      	b.n	8002844 <HAL_RCC_OscConfig+0x19c>
 80027d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x158>
 80027e6:	4b7c      	ldr	r3, [pc, #496]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a7b      	ldr	r2, [pc, #492]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b79      	ldr	r3, [pc, #484]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a78      	ldr	r2, [pc, #480]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 80027f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e021      	b.n	8002844 <HAL_RCC_OscConfig+0x19c>
 8002800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002804:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x184>
 8002812:	4b71      	ldr	r3, [pc, #452]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a70      	ldr	r2, [pc, #448]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	4b6e      	ldr	r3, [pc, #440]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6d      	ldr	r2, [pc, #436]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0x19c>
 800282c:	4b6a      	ldr	r3, [pc, #424]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a69      	ldr	r2, [pc, #420]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b67      	ldr	r3, [pc, #412]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a66      	ldr	r2, [pc, #408]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 800283e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002842:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002844:	4b64      	ldr	r3, [pc, #400]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002848:	f023 020f 	bic.w	r2, r3, #15
 800284c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002850:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	495f      	ldr	r1, [pc, #380]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 800285a:	4313      	orrs	r3, r2
 800285c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d059      	beq.n	8002922 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7fe fd79 	bl	8001364 <HAL_GetTick>
 8002872:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	e00a      	b.n	800288e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002878:	f7fe fd74 	bl	8001364 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b64      	cmp	r3, #100	; 0x64
 8002886:	d902      	bls.n	800288e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	f000 bf43 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
 800288e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002892:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80028a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d102      	bne.n	80028c0 <HAL_RCC_OscConfig+0x218>
 80028ba:	4b47      	ldr	r3, [pc, #284]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	e015      	b.n	80028ec <HAL_RCC_OscConfig+0x244>
 80028c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028c4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80028d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028d8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80028dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80028e8:	4b3b      	ldr	r3, [pc, #236]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028f0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80028f4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80028f8:	fa92 f2a2 	rbit	r2, r2
 80028fc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002900:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002904:	fab2 f282 	clz	r2, r2
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	f042 0220 	orr.w	r2, r2, #32
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	f002 021f 	and.w	r2, r2, #31
 8002914:	2101      	movs	r1, #1
 8002916:	fa01 f202 	lsl.w	r2, r1, r2
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ab      	beq.n	8002878 <HAL_RCC_OscConfig+0x1d0>
 8002920:	e05d      	b.n	80029de <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7fe fd1f 	bl	8001364 <HAL_GetTick>
 8002926:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800292c:	f7fe fd1a 	bl	8001364 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b64      	cmp	r3, #100	; 0x64
 800293a:	d902      	bls.n	8002942 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	f000 bee9 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
 8002942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002946:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002956:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	095b      	lsrs	r3, r3, #5
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d102      	bne.n	8002974 <HAL_RCC_OscConfig+0x2cc>
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	e015      	b.n	80029a0 <HAL_RCC_OscConfig+0x2f8>
 8002974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002978:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800298c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002990:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <HAL_RCC_OscConfig+0x330>)
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029a4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80029a8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80029ac:	fa92 f2a2 	rbit	r2, r2
 80029b0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80029b4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80029b8:	fab2 f282 	clz	r2, r2
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	f042 0220 	orr.w	r2, r2, #32
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	f002 021f 	and.w	r2, r2, #31
 80029c8:	2101      	movs	r1, #1
 80029ca:	fa01 f202 	lsl.w	r2, r1, r2
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ab      	bne.n	800292c <HAL_RCC_OscConfig+0x284>
 80029d4:	e003      	b.n	80029de <HAL_RCC_OscConfig+0x336>
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 817d 	beq.w	8002cee <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029f4:	4ba6      	ldr	r3, [pc, #664]	; (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00b      	beq.n	8002a18 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002a00:	4ba3      	ldr	r3, [pc, #652]	; (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d172      	bne.n	8002af2 <HAL_RCC_OscConfig+0x44a>
 8002a0c:	4ba0      	ldr	r3, [pc, #640]	; (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d16c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x44a>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002a2a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d102      	bne.n	8002a48 <HAL_RCC_OscConfig+0x3a0>
 8002a42:	4b93      	ldr	r3, [pc, #588]	; (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	e013      	b.n	8002a70 <HAL_RCC_OscConfig+0x3c8>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002a60:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a6c:	4b88      	ldr	r3, [pc, #544]	; (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2202      	movs	r2, #2
 8002a72:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002a76:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002a7a:	fa92 f2a2 	rbit	r2, r2
 8002a7e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002a82:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002a86:	fab2 f282 	clz	r2, r2
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	f042 0220 	orr.w	r2, r2, #32
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	f002 021f 	and.w	r2, r2, #31
 8002a96:	2101      	movs	r1, #1
 8002a98:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x410>
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d002      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f000 be2e 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab8:	4b75      	ldr	r3, [pc, #468]	; (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	21f8      	movs	r1, #248	; 0xf8
 8002ace:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002ad6:	fa91 f1a1 	rbit	r1, r1
 8002ada:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002ade:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002ae2:	fab1 f181 	clz	r1, r1
 8002ae6:	b2c9      	uxtb	r1, r1
 8002ae8:	408b      	lsls	r3, r1
 8002aea:	4969      	ldr	r1, [pc, #420]	; (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af0:	e0fd      	b.n	8002cee <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 8088 	beq.w	8002c14 <HAL_RCC_OscConfig+0x56c>
 8002b04:	2301      	movs	r3, #1
 8002b06:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002b16:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe fc18 	bl	8001364 <HAL_GetTick>
 8002b34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b3a:	f7fe fc13 	bl	8001364 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d902      	bls.n	8002b50 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	f000 bde2 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
 8002b50:	2302      	movs	r3, #2
 8002b52:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b5a:	fa93 f3a3 	rbit	r3, r3
 8002b5e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002b62:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d102      	bne.n	8002b80 <HAL_RCC_OscConfig+0x4d8>
 8002b7a:	4b45      	ldr	r3, [pc, #276]	; (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	e013      	b.n	8002ba8 <HAL_RCC_OscConfig+0x500>
 8002b80:	2302      	movs	r3, #2
 8002b82:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002b8a:	fa93 f3a3 	rbit	r3, r3
 8002b8e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b92:	2302      	movs	r3, #2
 8002b94:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b98:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002ba4:	4b3a      	ldr	r3, [pc, #232]	; (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002bae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002bb2:	fa92 f2a2 	rbit	r2, r2
 8002bb6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002bba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002bbe:	fab2 f282 	clz	r2, r2
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	f042 0220 	orr.w	r2, r2, #32
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	f002 021f 	and.w	r2, r2, #31
 8002bce:	2101      	movs	r1, #1
 8002bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0af      	beq.n	8002b3a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bda:	4b2d      	ldr	r3, [pc, #180]	; (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	21f8      	movs	r1, #248	; 0xf8
 8002bf0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002bf8:	fa91 f1a1 	rbit	r1, r1
 8002bfc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002c00:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002c04:	fab1 f181 	clz	r1, r1
 8002c08:	b2c9      	uxtb	r1, r1
 8002c0a:	408b      	lsls	r3, r1
 8002c0c:	4920      	ldr	r1, [pc, #128]	; (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	600b      	str	r3, [r1, #0]
 8002c12:	e06c      	b.n	8002cee <HAL_RCC_OscConfig+0x646>
 8002c14:	2301      	movs	r3, #1
 8002c16:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002c26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe fb90 	bl	8001364 <HAL_GetTick>
 8002c44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4a:	f7fe fb8b 	bl	8001364 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d902      	bls.n	8002c60 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	f000 bd5a 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
 8002c60:	2302      	movs	r3, #2
 8002c62:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d104      	bne.n	8002c94 <HAL_RCC_OscConfig+0x5ec>
 8002c8a:	4b01      	ldr	r3, [pc, #4]	; (8002c90 <HAL_RCC_OscConfig+0x5e8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	e015      	b.n	8002cbc <HAL_RCC_OscConfig+0x614>
 8002c90:	40021000 	.word	0x40021000
 8002c94:	2302      	movs	r3, #2
 8002c96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002cac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002cb0:	fa93 f3a3 	rbit	r3, r3
 8002cb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002cb8:	4bc8      	ldr	r3, [pc, #800]	; (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002cc2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002cc6:	fa92 f2a2 	rbit	r2, r2
 8002cca:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002cce:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002cd2:	fab2 f282 	clz	r2, r2
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	f042 0220 	orr.w	r2, r2, #32
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	f002 021f 	and.w	r2, r2, #31
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1ad      	bne.n	8002c4a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8110 	beq.w	8002f24 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d079      	beq.n	8002e08 <HAL_RCC_OscConfig+0x760>
 8002d14:	2301      	movs	r3, #1
 8002d16:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	4bab      	ldr	r3, [pc, #684]	; (8002fe0 <HAL_RCC_OscConfig+0x938>)
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fb11 	bl	8001364 <HAL_GetTick>
 8002d42:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d46:	e00a      	b.n	8002d5e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d48:	f7fe fb0c 	bl	8001364 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d902      	bls.n	8002d5e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	f000 bcdb 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002d68:	fa93 f3a3 	rbit	r3, r3
 8002d6c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d74:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d78:	2202      	movs	r2, #2
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d80:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	fa93 f2a3 	rbit	r2, r3
 8002d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	fa93 f2a3 	rbit	r2, r3
 8002dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002db6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db8:	4b88      	ldr	r3, [pc, #544]	; (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002dc4:	2102      	movs	r1, #2
 8002dc6:	6019      	str	r1, [r3, #0]
 8002dc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dcc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	fa93 f1a3 	rbit	r1, r3
 8002dd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002dde:	6019      	str	r1, [r3, #0]
  return result;
 8002de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0a0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x6a0>
 8002e06:	e08d      	b.n	8002f24 <HAL_RCC_OscConfig+0x87c>
 8002e08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e0c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e10:	2201      	movs	r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	fa93 f2a3 	rbit	r2, r3
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e2a:	601a      	str	r2, [r3, #0]
  return result;
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e34:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4b68      	ldr	r3, [pc, #416]	; (8002fe0 <HAL_RCC_OscConfig+0x938>)
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	461a      	mov	r2, r3
 8002e46:	2300      	movs	r3, #0
 8002e48:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fa8b 	bl	8001364 <HAL_GetTick>
 8002e4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e54:	f7fe fa86 	bl	8001364 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d902      	bls.n	8002e6a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	f000 bc55 	b.w	8003714 <HAL_RCC_OscConfig+0x106c>
 8002e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e72:	2202      	movs	r2, #2
 8002e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	fa93 f2a3 	rbit	r2, r3
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002e96:	2202      	movs	r2, #2
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	fa93 f2a3 	rbit	r2, r3
 8002ea8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002eba:	2202      	movs	r2, #2
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	fa93 f2a3 	rbit	r2, r3
 8002ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ed4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed6:	4b41      	ldr	r3, [pc, #260]	; (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ede:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002ee2:	2102      	movs	r1, #2
 8002ee4:	6019      	str	r1, [r3, #0]
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	fa93 f1a3 	rbit	r1, r3
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002efc:	6019      	str	r1, [r3, #0]
  return result;
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	fab3 f383 	clz	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	2101      	movs	r1, #1
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d197      	bne.n	8002e54 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 81a1 	beq.w	800327c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f40:	4b26      	ldr	r3, [pc, #152]	; (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d116      	bne.n	8002f7a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4c:	4b23      	ldr	r3, [pc, #140]	; (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	4a22      	ldr	r2, [pc, #136]	; (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f56:	61d3      	str	r3, [r2, #28]
 8002f58:	4b20      	ldr	r3, [pc, #128]	; (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f64:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002f72:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <HAL_RCC_OscConfig+0x93c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d11a      	bne.n	8002fbc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f86:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <HAL_RCC_OscConfig+0x93c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <HAL_RCC_OscConfig+0x93c>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f90:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f92:	f7fe f9e7 	bl	8001364 <HAL_GetTick>
 8002f96:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9a:	e009      	b.n	8002fb0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9c:	f7fe f9e2 	bl	8001364 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b64      	cmp	r3, #100	; 0x64
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e3b1      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <HAL_RCC_OscConfig+0x93c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0ef      	beq.n	8002f9c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d10d      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x940>
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4a02      	ldr	r2, [pc, #8]	; (8002fdc <HAL_RCC_OscConfig+0x934>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6213      	str	r3, [r2, #32]
 8002fd8:	e03c      	b.n	8003054 <HAL_RCC_OscConfig+0x9ac>
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	10908120 	.word	0x10908120
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10c      	bne.n	8003012 <HAL_RCC_OscConfig+0x96a>
 8002ff8:	4bc1      	ldr	r3, [pc, #772]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4ac0      	ldr	r2, [pc, #768]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	4bbe      	ldr	r3, [pc, #760]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4abd      	ldr	r2, [pc, #756]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 800300a:	f023 0304 	bic.w	r3, r3, #4
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	e020      	b.n	8003054 <HAL_RCC_OscConfig+0x9ac>
 8003012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003016:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	2b05      	cmp	r3, #5
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x994>
 8003022:	4bb7      	ldr	r3, [pc, #732]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	4ab6      	ldr	r2, [pc, #728]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003028:	f043 0304 	orr.w	r3, r3, #4
 800302c:	6213      	str	r3, [r2, #32]
 800302e:	4bb4      	ldr	r3, [pc, #720]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	4ab3      	ldr	r2, [pc, #716]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6213      	str	r3, [r2, #32]
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0x9ac>
 800303c:	4bb0      	ldr	r3, [pc, #704]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4aaf      	ldr	r2, [pc, #700]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	6213      	str	r3, [r2, #32]
 8003048:	4bad      	ldr	r3, [pc, #692]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4aac      	ldr	r2, [pc, #688]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 800304e:	f023 0304 	bic.w	r3, r3, #4
 8003052:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003058:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 8081 	beq.w	8003168 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003066:	f7fe f97d 	bl	8001364 <HAL_GetTick>
 800306a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306e:	e00b      	b.n	8003088 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003070:	f7fe f978 	bl	8001364 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003080:	4293      	cmp	r3, r2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e345      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
 8003088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003090:	2202      	movs	r2, #2
 8003092:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003098:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	fa93 f2a3 	rbit	r2, r3
 80030a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030b4:	2202      	movs	r2, #2
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	fa93 f2a3 	rbit	r2, r3
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80030ce:	601a      	str	r2, [r3, #0]
  return result;
 80030d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80030d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030da:	fab3 f383 	clz	r3, r3
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f043 0302 	orr.w	r3, r3, #2
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d102      	bne.n	80030f4 <HAL_RCC_OscConfig+0xa4c>
 80030ee:	4b84      	ldr	r3, [pc, #528]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	e013      	b.n	800311c <HAL_RCC_OscConfig+0xa74>
 80030f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80030fc:	2202      	movs	r2, #2
 80030fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003104:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	fa93 f2a3 	rbit	r2, r3
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	4b79      	ldr	r3, [pc, #484]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003120:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003124:	2102      	movs	r1, #2
 8003126:	6011      	str	r1, [r2, #0]
 8003128:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800312c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	fa92 f1a2 	rbit	r1, r2
 8003136:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800313a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800313e:	6011      	str	r1, [r2, #0]
  return result;
 8003140:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003144:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	fab2 f282 	clz	r2, r2
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	f002 021f 	and.w	r2, r2, #31
 800315a:	2101      	movs	r1, #1
 800315c:	fa01 f202 	lsl.w	r2, r1, r2
 8003160:	4013      	ands	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d084      	beq.n	8003070 <HAL_RCC_OscConfig+0x9c8>
 8003166:	e07f      	b.n	8003268 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003168:	f7fe f8fc 	bl	8001364 <HAL_GetTick>
 800316c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003170:	e00b      	b.n	800318a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003172:	f7fe f8f7 	bl	8001364 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e2c4      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
 800318a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003192:	2202      	movs	r2, #2
 8003194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	fa93 f2a3 	rbit	r2, r3
 80031a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80031b6:	2202      	movs	r2, #2
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	fa93 f2a3 	rbit	r2, r3
 80031c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031cc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80031d0:	601a      	str	r2, [r3, #0]
  return result;
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80031da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	095b      	lsrs	r3, r3, #5
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	f043 0302 	orr.w	r3, r3, #2
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d102      	bne.n	80031f6 <HAL_RCC_OscConfig+0xb4e>
 80031f0:	4b43      	ldr	r3, [pc, #268]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	e013      	b.n	800321e <HAL_RCC_OscConfig+0xb76>
 80031f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80031fe:	2202      	movs	r2, #2
 8003200:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003206:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	fa93 f2a3 	rbit	r2, r3
 8003210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003214:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	4b39      	ldr	r3, [pc, #228]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003222:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003226:	2102      	movs	r1, #2
 8003228:	6011      	str	r1, [r2, #0]
 800322a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800322e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	fa92 f1a2 	rbit	r1, r2
 8003238:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800323c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003240:	6011      	str	r1, [r2, #0]
  return result;
 8003242:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003246:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	fab2 f282 	clz	r2, r2
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	f002 021f 	and.w	r2, r2, #31
 800325c:	2101      	movs	r1, #1
 800325e:	fa01 f202 	lsl.w	r2, r1, r2
 8003262:	4013      	ands	r3, r2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d184      	bne.n	8003172 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003268:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800326c:	2b01      	cmp	r3, #1
 800326e:	d105      	bne.n	800327c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003270:	4b23      	ldr	r3, [pc, #140]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	4a22      	ldr	r2, [pc, #136]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003276:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800327a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800327c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003280:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 8242 	beq.w	8003712 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800328e:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <HAL_RCC_OscConfig+0xc58>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 030c 	and.w	r3, r3, #12
 8003296:	2b08      	cmp	r3, #8
 8003298:	f000 8213 	beq.w	80036c2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	f040 8162 	bne.w	8003572 <HAL_RCC_OscConfig+0xeca>
 80032ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80032b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80032ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	fa93 f2a3 	rbit	r2, r3
 80032ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ce:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80032d2:	601a      	str	r2, [r3, #0]
  return result;
 80032d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80032dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032de:	fab3 f383 	clz	r3, r3
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	461a      	mov	r2, r3
 80032f0:	2300      	movs	r3, #0
 80032f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7fe f836 	bl	8001364 <HAL_GetTick>
 80032f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032fc:	e00c      	b.n	8003318 <HAL_RCC_OscConfig+0xc70>
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe f82e 	bl	8001364 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e1fd      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
 8003318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003320:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	fa93 f2a3 	rbit	r2, r3
 8003334:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003338:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800333c:	601a      	str	r2, [r3, #0]
  return result;
 800333e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003342:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003346:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	b2db      	uxtb	r3, r3
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b01      	cmp	r3, #1
 800335a:	d102      	bne.n	8003362 <HAL_RCC_OscConfig+0xcba>
 800335c:	4bb0      	ldr	r3, [pc, #704]	; (8003620 <HAL_RCC_OscConfig+0xf78>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	e027      	b.n	80033b2 <HAL_RCC_OscConfig+0xd0a>
 8003362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003366:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800336a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800336e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003374:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	fa93 f2a3 	rbit	r2, r3
 800337e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003382:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	fa93 f2a3 	rbit	r2, r3
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	4b9c      	ldr	r3, [pc, #624]	; (8003620 <HAL_RCC_OscConfig+0xf78>)
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033b6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80033ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80033be:	6011      	str	r1, [r2, #0]
 80033c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033c4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	fa92 f1a2 	rbit	r1, r2
 80033ce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033d2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80033d6:	6011      	str	r1, [r2, #0]
  return result;
 80033d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033dc:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	fab2 f282 	clz	r2, r2
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	f042 0220 	orr.w	r2, r2, #32
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	f002 021f 	and.w	r2, r2, #31
 80033f2:	2101      	movs	r1, #1
 80033f4:	fa01 f202 	lsl.w	r2, r1, r2
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d182      	bne.n	8003304 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033fe:	4b88      	ldr	r3, [pc, #544]	; (8003620 <HAL_RCC_OscConfig+0xf78>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003416:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	430b      	orrs	r3, r1
 8003420:	497f      	ldr	r1, [pc, #508]	; (8003620 <HAL_RCC_OscConfig+0xf78>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
 8003426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800342e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003432:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003438:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	fa93 f2a3 	rbit	r2, r3
 8003442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003446:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800344a:	601a      	str	r2, [r3, #0]
  return result;
 800344c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003450:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003454:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003460:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	461a      	mov	r2, r3
 8003468:	2301      	movs	r3, #1
 800346a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fd ff7a 	bl	8001364 <HAL_GetTick>
 8003470:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003474:	e009      	b.n	800348a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003476:	f7fd ff75 	bl	8001364 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e144      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
 800348a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003492:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003496:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	fa93 f2a3 	rbit	r2, r3
 80034a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034aa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80034ae:	601a      	str	r2, [r3, #0]
  return result;
 80034b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80034b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d102      	bne.n	80034d4 <HAL_RCC_OscConfig+0xe2c>
 80034ce:	4b54      	ldr	r3, [pc, #336]	; (8003620 <HAL_RCC_OscConfig+0xf78>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	e027      	b.n	8003524 <HAL_RCC_OscConfig+0xe7c>
 80034d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80034dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	fa93 f2a3 	rbit	r2, r3
 80034f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003502:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	fa93 f2a3 	rbit	r2, r3
 8003516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	4b3f      	ldr	r3, [pc, #252]	; (8003620 <HAL_RCC_OscConfig+0xf78>)
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003528:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800352c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003530:	6011      	str	r1, [r2, #0]
 8003532:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003536:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	fa92 f1a2 	rbit	r1, r2
 8003540:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003544:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003548:	6011      	str	r1, [r2, #0]
  return result;
 800354a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800354e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	fab2 f282 	clz	r2, r2
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	f042 0220 	orr.w	r2, r2, #32
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	f002 021f 	and.w	r2, r2, #31
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f202 	lsl.w	r2, r1, r2
 800356a:	4013      	ands	r3, r2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d082      	beq.n	8003476 <HAL_RCC_OscConfig+0xdce>
 8003570:	e0cf      	b.n	8003712 <HAL_RCC_OscConfig+0x106a>
 8003572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003576:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800357a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800357e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003584:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	fa93 f2a3 	rbit	r2, r3
 800358e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003592:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003596:	601a      	str	r2, [r3, #0]
  return result;
 8003598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80035a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a2:	fab3 f383 	clz	r3, r3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	461a      	mov	r2, r3
 80035b4:	2300      	movs	r3, #0
 80035b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fd fed4 	bl	8001364 <HAL_GetTick>
 80035bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c0:	e009      	b.n	80035d6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fd fecf 	bl	8001364 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e09e      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
 80035d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035da:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80035de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	fa93 f2a3 	rbit	r2, r3
 80035f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80035fa:	601a      	str	r2, [r3, #0]
  return result;
 80035fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003600:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003604:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003606:	fab3 f383 	clz	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d104      	bne.n	8003624 <HAL_RCC_OscConfig+0xf7c>
 800361a:	4b01      	ldr	r3, [pc, #4]	; (8003620 <HAL_RCC_OscConfig+0xf78>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	e029      	b.n	8003674 <HAL_RCC_OscConfig+0xfcc>
 8003620:	40021000 	.word	0x40021000
 8003624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003628:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800362c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003630:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003636:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	fa93 f2a3 	rbit	r2, r3
 8003640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003644:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003652:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	fa93 f2a3 	rbit	r2, r3
 8003666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_RCC_OscConfig+0x1078>)
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003678:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800367c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003680:	6011      	str	r1, [r2, #0]
 8003682:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003686:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800368a:	6812      	ldr	r2, [r2, #0]
 800368c:	fa92 f1a2 	rbit	r1, r2
 8003690:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003694:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003698:	6011      	str	r1, [r2, #0]
  return result;
 800369a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800369e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	fab2 f282 	clz	r2, r2
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	f042 0220 	orr.w	r2, r2, #32
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	f002 021f 	and.w	r2, r2, #31
 80036b4:	2101      	movs	r1, #1
 80036b6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d180      	bne.n	80035c2 <HAL_RCC_OscConfig+0xf1a>
 80036c0:	e027      	b.n	8003712 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e01e      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036d6:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_RCC_OscConfig+0x1078>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80036de:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036e2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d10b      	bne.n	800370e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80036f6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80036fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800370a:	429a      	cmp	r2, r3
 800370c:	d001      	beq.n	8003712 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000

08003724 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b09e      	sub	sp, #120	; 0x78
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e162      	b.n	8003a02 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800373c:	4b90      	ldr	r3, [pc, #576]	; (8003980 <HAL_RCC_ClockConfig+0x25c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d910      	bls.n	800376c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b8d      	ldr	r3, [pc, #564]	; (8003980 <HAL_RCC_ClockConfig+0x25c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 0207 	bic.w	r2, r3, #7
 8003752:	498b      	ldr	r1, [pc, #556]	; (8003980 <HAL_RCC_ClockConfig+0x25c>)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b89      	ldr	r3, [pc, #548]	; (8003980 <HAL_RCC_ClockConfig+0x25c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e14a      	b.n	8003a02 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003778:	4b82      	ldr	r3, [pc, #520]	; (8003984 <HAL_RCC_ClockConfig+0x260>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	497f      	ldr	r1, [pc, #508]	; (8003984 <HAL_RCC_ClockConfig+0x260>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 80dc 	beq.w	8003950 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d13c      	bne.n	800381a <HAL_RCC_ClockConfig+0xf6>
 80037a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80037ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d102      	bne.n	80037ca <HAL_RCC_ClockConfig+0xa6>
 80037c4:	4b6f      	ldr	r3, [pc, #444]	; (8003984 <HAL_RCC_ClockConfig+0x260>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	e00f      	b.n	80037ea <HAL_RCC_ClockConfig+0xc6>
 80037ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037d2:	fa93 f3a3 	rbit	r3, r3
 80037d6:	667b      	str	r3, [r7, #100]	; 0x64
 80037d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037dc:	663b      	str	r3, [r7, #96]	; 0x60
 80037de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037e6:	4b67      	ldr	r3, [pc, #412]	; (8003984 <HAL_RCC_ClockConfig+0x260>)
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80037f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037f2:	fa92 f2a2 	rbit	r2, r2
 80037f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80037f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037fa:	fab2 f282 	clz	r2, r2
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	f042 0220 	orr.w	r2, r2, #32
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	f002 021f 	and.w	r2, r2, #31
 800380a:	2101      	movs	r1, #1
 800380c:	fa01 f202 	lsl.w	r2, r1, r2
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d17b      	bne.n	800390e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e0f3      	b.n	8003a02 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b02      	cmp	r3, #2
 8003820:	d13c      	bne.n	800389c <HAL_RCC_ClockConfig+0x178>
 8003822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003826:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800382a:	fa93 f3a3 	rbit	r3, r3
 800382e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	fab3 f383 	clz	r3, r3
 8003836:	b2db      	uxtb	r3, r3
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d102      	bne.n	800384c <HAL_RCC_ClockConfig+0x128>
 8003846:	4b4f      	ldr	r3, [pc, #316]	; (8003984 <HAL_RCC_ClockConfig+0x260>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	e00f      	b.n	800386c <HAL_RCC_ClockConfig+0x148>
 800384c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003850:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003854:	fa93 f3a3 	rbit	r3, r3
 8003858:	647b      	str	r3, [r7, #68]	; 0x44
 800385a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800385e:	643b      	str	r3, [r7, #64]	; 0x40
 8003860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003862:	fa93 f3a3 	rbit	r3, r3
 8003866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003868:	4b46      	ldr	r3, [pc, #280]	; (8003984 <HAL_RCC_ClockConfig+0x260>)
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003870:	63ba      	str	r2, [r7, #56]	; 0x38
 8003872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003874:	fa92 f2a2 	rbit	r2, r2
 8003878:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800387a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800387c:	fab2 f282 	clz	r2, r2
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	f042 0220 	orr.w	r2, r2, #32
 8003886:	b2d2      	uxtb	r2, r2
 8003888:	f002 021f 	and.w	r2, r2, #31
 800388c:	2101      	movs	r1, #1
 800388e:	fa01 f202 	lsl.w	r2, r1, r2
 8003892:	4013      	ands	r3, r2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d13a      	bne.n	800390e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0b2      	b.n	8003a02 <HAL_RCC_ClockConfig+0x2de>
 800389c:	2302      	movs	r3, #2
 800389e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	fa93 f3a3 	rbit	r3, r3
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80038a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038aa:	fab3 f383 	clz	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d102      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x1a0>
 80038be:	4b31      	ldr	r3, [pc, #196]	; (8003984 <HAL_RCC_ClockConfig+0x260>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	e00d      	b.n	80038e0 <HAL_RCC_ClockConfig+0x1bc>
 80038c4:	2302      	movs	r3, #2
 80038c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
 80038d0:	2302      	movs	r3, #2
 80038d2:	623b      	str	r3, [r7, #32]
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	fa93 f3a3 	rbit	r3, r3
 80038da:	61fb      	str	r3, [r7, #28]
 80038dc:	4b29      	ldr	r3, [pc, #164]	; (8003984 <HAL_RCC_ClockConfig+0x260>)
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	2202      	movs	r2, #2
 80038e2:	61ba      	str	r2, [r7, #24]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	fa92 f2a2 	rbit	r2, r2
 80038ea:	617a      	str	r2, [r7, #20]
  return result;
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	fab2 f282 	clz	r2, r2
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	f042 0220 	orr.w	r2, r2, #32
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	f002 021f 	and.w	r2, r2, #31
 80038fe:	2101      	movs	r1, #1
 8003900:	fa01 f202 	lsl.w	r2, r1, r2
 8003904:	4013      	ands	r3, r2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e079      	b.n	8003a02 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800390e:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <HAL_RCC_ClockConfig+0x260>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f023 0203 	bic.w	r2, r3, #3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	491a      	ldr	r1, [pc, #104]	; (8003984 <HAL_RCC_ClockConfig+0x260>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003920:	f7fd fd20 	bl	8001364 <HAL_GetTick>
 8003924:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003926:	e00a      	b.n	800393e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003928:	f7fd fd1c 	bl	8001364 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f241 3288 	movw	r2, #5000	; 0x1388
 8003936:	4293      	cmp	r3, r2
 8003938:	d901      	bls.n	800393e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e061      	b.n	8003a02 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <HAL_RCC_ClockConfig+0x260>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 020c 	and.w	r2, r3, #12
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	429a      	cmp	r2, r3
 800394e:	d1eb      	bne.n	8003928 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_RCC_ClockConfig+0x25c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d214      	bcs.n	8003988 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <HAL_RCC_ClockConfig+0x25c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 0207 	bic.w	r2, r3, #7
 8003966:	4906      	ldr	r1, [pc, #24]	; (8003980 <HAL_RCC_ClockConfig+0x25c>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <HAL_RCC_ClockConfig+0x25c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e040      	b.n	8003a02 <HAL_RCC_ClockConfig+0x2de>
 8003980:	40022000 	.word	0x40022000
 8003984:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003994:	4b1d      	ldr	r3, [pc, #116]	; (8003a0c <HAL_RCC_ClockConfig+0x2e8>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	491a      	ldr	r1, [pc, #104]	; (8003a0c <HAL_RCC_ClockConfig+0x2e8>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b2:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <HAL_RCC_ClockConfig+0x2e8>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	4912      	ldr	r1, [pc, #72]	; (8003a0c <HAL_RCC_ClockConfig+0x2e8>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80039c6:	f000 f829 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 80039ca:	4601      	mov	r1, r0
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <HAL_RCC_ClockConfig+0x2e8>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d4:	22f0      	movs	r2, #240	; 0xf0
 80039d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	fa92 f2a2 	rbit	r2, r2
 80039de:	60fa      	str	r2, [r7, #12]
  return result;
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	fab2 f282 	clz	r2, r2
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	40d3      	lsrs	r3, r2
 80039ea:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <HAL_RCC_ClockConfig+0x2ec>)
 80039ec:	5cd3      	ldrb	r3, [r2, r3]
 80039ee:	fa21 f303 	lsr.w	r3, r1, r3
 80039f2:	4a08      	ldr	r2, [pc, #32]	; (8003a14 <HAL_RCC_ClockConfig+0x2f0>)
 80039f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <HAL_RCC_ClockConfig+0x2f4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd fc6e 	bl	80012dc <HAL_InitTick>
  
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3778      	adds	r7, #120	; 0x78
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	080050f4 	.word	0x080050f4
 8003a14:	20000000 	.word	0x20000000
 8003a18:	20000004 	.word	0x20000004

08003a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b08b      	sub	sp, #44	; 0x2c
 8003a20:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	61fb      	str	r3, [r7, #28]
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003a36:	4b29      	ldr	r3, [pc, #164]	; (8003adc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 030c 	and.w	r3, r3, #12
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d002      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x30>
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d003      	beq.n	8003a52 <HAL_RCC_GetSysClockFreq+0x36>
 8003a4a:	e03c      	b.n	8003ac6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a4c:	4b24      	ldr	r3, [pc, #144]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003a4e:	623b      	str	r3, [r7, #32]
      break;
 8003a50:	e03c      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003a58:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a5c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	fa92 f2a2 	rbit	r2, r2
 8003a64:	607a      	str	r2, [r7, #4]
  return result;
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	fab2 f282 	clz	r2, r2
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	40d3      	lsrs	r3, r2
 8003a70:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003a72:	5cd3      	ldrb	r3, [r2, r3]
 8003a74:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003a76:	4b19      	ldr	r3, [pc, #100]	; (8003adc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	220f      	movs	r2, #15
 8003a80:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	fa92 f2a2 	rbit	r2, r2
 8003a88:	60fa      	str	r2, [r7, #12]
  return result;
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	fab2 f282 	clz	r2, r2
 8003a90:	b2d2      	uxtb	r2, r2
 8003a92:	40d3      	lsrs	r3, r2
 8003a94:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a96:	5cd3      	ldrb	r3, [r2, r3]
 8003a98:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d008      	beq.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003aa4:	4a0e      	ldr	r2, [pc, #56]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab4:	e004      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003aba:	fb02 f303 	mul.w	r3, r2, r3
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	623b      	str	r3, [r7, #32]
      break;
 8003ac4:	e002      	b.n	8003acc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ac6:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003ac8:	623b      	str	r3, [r7, #32]
      break;
 8003aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003acc:	6a3b      	ldr	r3, [r7, #32]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	372c      	adds	r7, #44	; 0x2c
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	007a1200 	.word	0x007a1200
 8003ae4:	08005104 	.word	0x08005104
 8003ae8:	08005114 	.word	0x08005114
 8003aec:	003d0900 	.word	0x003d0900

08003af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b092      	sub	sp, #72	; 0x48
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003b00:	2300      	movs	r3, #0
 8003b02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80cd 	beq.w	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b14:	4b86      	ldr	r3, [pc, #536]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10e      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b20:	4b83      	ldr	r3, [pc, #524]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	4a82      	ldr	r2, [pc, #520]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	61d3      	str	r3, [r2, #28]
 8003b2c:	4b80      	ldr	r3, [pc, #512]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3e:	4b7d      	ldr	r3, [pc, #500]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d118      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b4a:	4b7a      	ldr	r3, [pc, #488]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a79      	ldr	r2, [pc, #484]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b56:	f7fd fc05 	bl	8001364 <HAL_GetTick>
 8003b5a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5c:	e008      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5e:	f7fd fc01 	bl	8001364 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b64      	cmp	r3, #100	; 0x64
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e0db      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b70:	4b70      	ldr	r3, [pc, #448]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b7c:	4b6c      	ldr	r3, [pc, #432]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b84:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d07d      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d076      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b9a:	4b65      	ldr	r3, [pc, #404]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ba8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bb4:	fab3 f383 	clz	r3, r3
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b5e      	ldr	r3, [pc, #376]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd0:	fa93 f3a3 	rbit	r3, r3
 8003bd4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd8:	fab3 f383 	clz	r3, r3
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	4b55      	ldr	r3, [pc, #340]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	461a      	mov	r2, r3
 8003be8:	2300      	movs	r3, #0
 8003bea:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bec:	4a50      	ldr	r2, [pc, #320]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d045      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fd fbb2 	bl	8001364 <HAL_GetTick>
 8003c00:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c02:	e00a      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c04:	f7fd fbae 	bl	8001364 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e086      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	fa93 f3a3 	rbit	r3, r3
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
 8003c26:	2302      	movs	r3, #2
 8003c28:	623b      	str	r3, [r7, #32]
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	fa93 f3a3 	rbit	r3, r3
 8003c30:	61fb      	str	r3, [r7, #28]
  return result;
 8003c32:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c34:	fab3 f383 	clz	r3, r3
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	f043 0302 	orr.w	r3, r3, #2
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d102      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003c48:	4b39      	ldr	r3, [pc, #228]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	e007      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	fa93 f3a3 	rbit	r3, r3
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5e:	2202      	movs	r2, #2
 8003c60:	613a      	str	r2, [r7, #16]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	fa92 f2a2 	rbit	r2, r2
 8003c68:	60fa      	str	r2, [r7, #12]
  return result;
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	fab2 f282 	clz	r2, r2
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	f002 021f 	and.w	r2, r2, #31
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c82:	4013      	ands	r3, r2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0bd      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003c88:	4b29      	ldr	r3, [pc, #164]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	4926      	ldr	r1, [pc, #152]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d105      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca2:	4b23      	ldr	r3, [pc, #140]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	4a22      	ldr	r2, [pc, #136]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cac:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d008      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cba:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	f023 0203 	bic.w	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	491a      	ldr	r1, [pc, #104]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cd8:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	f023 0210 	bic.w	r2, r3, #16
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4912      	ldr	r1, [pc, #72]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	490b      	ldr	r1, [pc, #44]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	695b      	ldr	r3, [r3, #20]
 8003d20:	4903      	ldr	r1, [pc, #12]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3748      	adds	r7, #72	; 0x48
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40021000 	.word	0x40021000
 8003d34:	40007000 	.word	0x40007000
 8003d38:	10908100 	.word	0x10908100
 8003d3c:	00000000 	.word	0x00000000

08003d40 <log>:
 8003d40:	b538      	push	{r3, r4, r5, lr}
 8003d42:	ed2d 8b02 	vpush	{d8}
 8003d46:	ec55 4b10 	vmov	r4, r5, d0
 8003d4a:	f000 f839 	bl	8003dc0 <__ieee754_log>
 8003d4e:	4622      	mov	r2, r4
 8003d50:	462b      	mov	r3, r5
 8003d52:	4620      	mov	r0, r4
 8003d54:	4629      	mov	r1, r5
 8003d56:	eeb0 8a40 	vmov.f32	s16, s0
 8003d5a:	eef0 8a60 	vmov.f32	s17, s1
 8003d5e:	f7fc fedd 	bl	8000b1c <__aeabi_dcmpun>
 8003d62:	b998      	cbnz	r0, 8003d8c <log+0x4c>
 8003d64:	2200      	movs	r2, #0
 8003d66:	2300      	movs	r3, #0
 8003d68:	4620      	mov	r0, r4
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	f7fc fecc 	bl	8000b08 <__aeabi_dcmpgt>
 8003d70:	b960      	cbnz	r0, 8003d8c <log+0x4c>
 8003d72:	2200      	movs	r2, #0
 8003d74:	2300      	movs	r3, #0
 8003d76:	4620      	mov	r0, r4
 8003d78:	4629      	mov	r1, r5
 8003d7a:	f7fc fe9d 	bl	8000ab8 <__aeabi_dcmpeq>
 8003d7e:	b160      	cbz	r0, 8003d9a <log+0x5a>
 8003d80:	f000 f9e2 	bl	8004148 <__errno>
 8003d84:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8003db0 <log+0x70>
 8003d88:	2322      	movs	r3, #34	; 0x22
 8003d8a:	6003      	str	r3, [r0, #0]
 8003d8c:	eeb0 0a48 	vmov.f32	s0, s16
 8003d90:	eef0 0a68 	vmov.f32	s1, s17
 8003d94:	ecbd 8b02 	vpop	{d8}
 8003d98:	bd38      	pop	{r3, r4, r5, pc}
 8003d9a:	f000 f9d5 	bl	8004148 <__errno>
 8003d9e:	ecbd 8b02 	vpop	{d8}
 8003da2:	2321      	movs	r3, #33	; 0x21
 8003da4:	6003      	str	r3, [r0, #0]
 8003da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003daa:	4803      	ldr	r0, [pc, #12]	; (8003db8 <log+0x78>)
 8003dac:	f000 b9c4 	b.w	8004138 <nan>
 8003db0:	00000000 	.word	0x00000000
 8003db4:	fff00000 	.word	0xfff00000
 8003db8:	0800518d 	.word	0x0800518d
 8003dbc:	00000000 	.word	0x00000000

08003dc0 <__ieee754_log>:
 8003dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc4:	ec51 0b10 	vmov	r0, r1, d0
 8003dc8:	ed2d 8b04 	vpush	{d8-d9}
 8003dcc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	460d      	mov	r5, r1
 8003dd4:	da29      	bge.n	8003e2a <__ieee754_log+0x6a>
 8003dd6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003dda:	4303      	orrs	r3, r0
 8003ddc:	ee10 2a10 	vmov	r2, s0
 8003de0:	d10c      	bne.n	8003dfc <__ieee754_log+0x3c>
 8003de2:	49cf      	ldr	r1, [pc, #828]	; (8004120 <__ieee754_log+0x360>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	2300      	movs	r3, #0
 8003de8:	2000      	movs	r0, #0
 8003dea:	f7fc fd27 	bl	800083c <__aeabi_ddiv>
 8003dee:	ec41 0b10 	vmov	d0, r0, r1
 8003df2:	b003      	add	sp, #12
 8003df4:	ecbd 8b04 	vpop	{d8-d9}
 8003df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dfc:	2900      	cmp	r1, #0
 8003dfe:	da05      	bge.n	8003e0c <__ieee754_log+0x4c>
 8003e00:	460b      	mov	r3, r1
 8003e02:	f7fc fa39 	bl	8000278 <__aeabi_dsub>
 8003e06:	2200      	movs	r2, #0
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e7ee      	b.n	8003dea <__ieee754_log+0x2a>
 8003e0c:	4bc5      	ldr	r3, [pc, #788]	; (8004124 <__ieee754_log+0x364>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f7fc fbea 	bl	80005e8 <__aeabi_dmul>
 8003e14:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8003e18:	460d      	mov	r5, r1
 8003e1a:	4ac3      	ldr	r2, [pc, #780]	; (8004128 <__ieee754_log+0x368>)
 8003e1c:	4295      	cmp	r5, r2
 8003e1e:	dd06      	ble.n	8003e2e <__ieee754_log+0x6e>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	f7fc fa2a 	bl	800027c <__adddf3>
 8003e28:	e7e1      	b.n	8003dee <__ieee754_log+0x2e>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e7f5      	b.n	8003e1a <__ieee754_log+0x5a>
 8003e2e:	152c      	asrs	r4, r5, #20
 8003e30:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003e34:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8003e38:	441c      	add	r4, r3
 8003e3a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8003e3e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8003e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e46:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8003e4a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8003e4e:	ea42 0105 	orr.w	r1, r2, r5
 8003e52:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8003e56:	2200      	movs	r2, #0
 8003e58:	4bb4      	ldr	r3, [pc, #720]	; (800412c <__ieee754_log+0x36c>)
 8003e5a:	f7fc fa0d 	bl	8000278 <__aeabi_dsub>
 8003e5e:	1cab      	adds	r3, r5, #2
 8003e60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	4682      	mov	sl, r0
 8003e68:	468b      	mov	fp, r1
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	dc53      	bgt.n	8003f18 <__ieee754_log+0x158>
 8003e70:	2300      	movs	r3, #0
 8003e72:	f7fc fe21 	bl	8000ab8 <__aeabi_dcmpeq>
 8003e76:	b1d0      	cbz	r0, 8003eae <__ieee754_log+0xee>
 8003e78:	2c00      	cmp	r4, #0
 8003e7a:	f000 8122 	beq.w	80040c2 <__ieee754_log+0x302>
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f7fc fb48 	bl	8000514 <__aeabi_i2d>
 8003e84:	a390      	add	r3, pc, #576	; (adr r3, 80040c8 <__ieee754_log+0x308>)
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	4606      	mov	r6, r0
 8003e8c:	460f      	mov	r7, r1
 8003e8e:	f7fc fbab 	bl	80005e8 <__aeabi_dmul>
 8003e92:	a38f      	add	r3, pc, #572	; (adr r3, 80040d0 <__ieee754_log+0x310>)
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	4604      	mov	r4, r0
 8003e9a:	460d      	mov	r5, r1
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	4639      	mov	r1, r7
 8003ea0:	f7fc fba2 	bl	80005e8 <__aeabi_dmul>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	4629      	mov	r1, r5
 8003eac:	e7ba      	b.n	8003e24 <__ieee754_log+0x64>
 8003eae:	a38a      	add	r3, pc, #552	; (adr r3, 80040d8 <__ieee754_log+0x318>)
 8003eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb4:	4650      	mov	r0, sl
 8003eb6:	4659      	mov	r1, fp
 8003eb8:	f7fc fb96 	bl	80005e8 <__aeabi_dmul>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	499b      	ldr	r1, [pc, #620]	; (8004130 <__ieee754_log+0x370>)
 8003ec4:	f7fc f9d8 	bl	8000278 <__aeabi_dsub>
 8003ec8:	4652      	mov	r2, sl
 8003eca:	4606      	mov	r6, r0
 8003ecc:	460f      	mov	r7, r1
 8003ece:	465b      	mov	r3, fp
 8003ed0:	4650      	mov	r0, sl
 8003ed2:	4659      	mov	r1, fp
 8003ed4:	f7fc fb88 	bl	80005e8 <__aeabi_dmul>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4630      	mov	r0, r6
 8003ede:	4639      	mov	r1, r7
 8003ee0:	f7fc fb82 	bl	80005e8 <__aeabi_dmul>
 8003ee4:	4606      	mov	r6, r0
 8003ee6:	460f      	mov	r7, r1
 8003ee8:	b914      	cbnz	r4, 8003ef0 <__ieee754_log+0x130>
 8003eea:	4632      	mov	r2, r6
 8003eec:	463b      	mov	r3, r7
 8003eee:	e0a2      	b.n	8004036 <__ieee754_log+0x276>
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f7fc fb0f 	bl	8000514 <__aeabi_i2d>
 8003ef6:	a374      	add	r3, pc, #464	; (adr r3, 80040c8 <__ieee754_log+0x308>)
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	4680      	mov	r8, r0
 8003efe:	4689      	mov	r9, r1
 8003f00:	f7fc fb72 	bl	80005e8 <__aeabi_dmul>
 8003f04:	a372      	add	r3, pc, #456	; (adr r3, 80040d0 <__ieee754_log+0x310>)
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	4604      	mov	r4, r0
 8003f0c:	460d      	mov	r5, r1
 8003f0e:	4640      	mov	r0, r8
 8003f10:	4649      	mov	r1, r9
 8003f12:	f7fc fb69 	bl	80005e8 <__aeabi_dmul>
 8003f16:	e0a7      	b.n	8004068 <__ieee754_log+0x2a8>
 8003f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f1c:	f7fc f9ae 	bl	800027c <__adddf3>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4650      	mov	r0, sl
 8003f26:	4659      	mov	r1, fp
 8003f28:	f7fc fc88 	bl	800083c <__aeabi_ddiv>
 8003f2c:	ec41 0b18 	vmov	d8, r0, r1
 8003f30:	4620      	mov	r0, r4
 8003f32:	f7fc faef 	bl	8000514 <__aeabi_i2d>
 8003f36:	ec53 2b18 	vmov	r2, r3, d8
 8003f3a:	ec41 0b19 	vmov	d9, r0, r1
 8003f3e:	ec51 0b18 	vmov	r0, r1, d8
 8003f42:	f7fc fb51 	bl	80005e8 <__aeabi_dmul>
 8003f46:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8003f4a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8003f4e:	9301      	str	r3, [sp, #4]
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4680      	mov	r8, r0
 8003f56:	4689      	mov	r9, r1
 8003f58:	f7fc fb46 	bl	80005e8 <__aeabi_dmul>
 8003f5c:	a360      	add	r3, pc, #384	; (adr r3, 80040e0 <__ieee754_log+0x320>)
 8003f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f62:	4606      	mov	r6, r0
 8003f64:	460f      	mov	r7, r1
 8003f66:	f7fc fb3f 	bl	80005e8 <__aeabi_dmul>
 8003f6a:	a35f      	add	r3, pc, #380	; (adr r3, 80040e8 <__ieee754_log+0x328>)
 8003f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f70:	f7fc f984 	bl	800027c <__adddf3>
 8003f74:	4632      	mov	r2, r6
 8003f76:	463b      	mov	r3, r7
 8003f78:	f7fc fb36 	bl	80005e8 <__aeabi_dmul>
 8003f7c:	a35c      	add	r3, pc, #368	; (adr r3, 80040f0 <__ieee754_log+0x330>)
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	f7fc f97b 	bl	800027c <__adddf3>
 8003f86:	4632      	mov	r2, r6
 8003f88:	463b      	mov	r3, r7
 8003f8a:	f7fc fb2d 	bl	80005e8 <__aeabi_dmul>
 8003f8e:	a35a      	add	r3, pc, #360	; (adr r3, 80040f8 <__ieee754_log+0x338>)
 8003f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f94:	f7fc f972 	bl	800027c <__adddf3>
 8003f98:	4642      	mov	r2, r8
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	f7fc fb24 	bl	80005e8 <__aeabi_dmul>
 8003fa0:	a357      	add	r3, pc, #348	; (adr r3, 8004100 <__ieee754_log+0x340>)
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	4680      	mov	r8, r0
 8003fa8:	4689      	mov	r9, r1
 8003faa:	4630      	mov	r0, r6
 8003fac:	4639      	mov	r1, r7
 8003fae:	f7fc fb1b 	bl	80005e8 <__aeabi_dmul>
 8003fb2:	a355      	add	r3, pc, #340	; (adr r3, 8004108 <__ieee754_log+0x348>)
 8003fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb8:	f7fc f960 	bl	800027c <__adddf3>
 8003fbc:	4632      	mov	r2, r6
 8003fbe:	463b      	mov	r3, r7
 8003fc0:	f7fc fb12 	bl	80005e8 <__aeabi_dmul>
 8003fc4:	a352      	add	r3, pc, #328	; (adr r3, 8004110 <__ieee754_log+0x350>)
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	f7fc f957 	bl	800027c <__adddf3>
 8003fce:	4632      	mov	r2, r6
 8003fd0:	463b      	mov	r3, r7
 8003fd2:	f7fc fb09 	bl	80005e8 <__aeabi_dmul>
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4649      	mov	r1, r9
 8003fdc:	4640      	mov	r0, r8
 8003fde:	f7fc f94d 	bl	800027c <__adddf3>
 8003fe2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8003fe6:	9b01      	ldr	r3, [sp, #4]
 8003fe8:	3551      	adds	r5, #81	; 0x51
 8003fea:	431d      	orrs	r5, r3
 8003fec:	2d00      	cmp	r5, #0
 8003fee:	4680      	mov	r8, r0
 8003ff0:	4689      	mov	r9, r1
 8003ff2:	dd48      	ble.n	8004086 <__ieee754_log+0x2c6>
 8003ff4:	4b4e      	ldr	r3, [pc, #312]	; (8004130 <__ieee754_log+0x370>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	4650      	mov	r0, sl
 8003ffa:	4659      	mov	r1, fp
 8003ffc:	f7fc faf4 	bl	80005e8 <__aeabi_dmul>
 8004000:	4652      	mov	r2, sl
 8004002:	465b      	mov	r3, fp
 8004004:	f7fc faf0 	bl	80005e8 <__aeabi_dmul>
 8004008:	4602      	mov	r2, r0
 800400a:	460b      	mov	r3, r1
 800400c:	4606      	mov	r6, r0
 800400e:	460f      	mov	r7, r1
 8004010:	4640      	mov	r0, r8
 8004012:	4649      	mov	r1, r9
 8004014:	f7fc f932 	bl	800027c <__adddf3>
 8004018:	ec53 2b18 	vmov	r2, r3, d8
 800401c:	f7fc fae4 	bl	80005e8 <__aeabi_dmul>
 8004020:	4680      	mov	r8, r0
 8004022:	4689      	mov	r9, r1
 8004024:	b964      	cbnz	r4, 8004040 <__ieee754_log+0x280>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4630      	mov	r0, r6
 800402c:	4639      	mov	r1, r7
 800402e:	f7fc f923 	bl	8000278 <__aeabi_dsub>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4650      	mov	r0, sl
 8004038:	4659      	mov	r1, fp
 800403a:	f7fc f91d 	bl	8000278 <__aeabi_dsub>
 800403e:	e6d6      	b.n	8003dee <__ieee754_log+0x2e>
 8004040:	a321      	add	r3, pc, #132	; (adr r3, 80040c8 <__ieee754_log+0x308>)
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	ec51 0b19 	vmov	r0, r1, d9
 800404a:	f7fc facd 	bl	80005e8 <__aeabi_dmul>
 800404e:	a320      	add	r3, pc, #128	; (adr r3, 80040d0 <__ieee754_log+0x310>)
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	4604      	mov	r4, r0
 8004056:	460d      	mov	r5, r1
 8004058:	ec51 0b19 	vmov	r0, r1, d9
 800405c:	f7fc fac4 	bl	80005e8 <__aeabi_dmul>
 8004060:	4642      	mov	r2, r8
 8004062:	464b      	mov	r3, r9
 8004064:	f7fc f90a 	bl	800027c <__adddf3>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4630      	mov	r0, r6
 800406e:	4639      	mov	r1, r7
 8004070:	f7fc f902 	bl	8000278 <__aeabi_dsub>
 8004074:	4652      	mov	r2, sl
 8004076:	465b      	mov	r3, fp
 8004078:	f7fc f8fe 	bl	8000278 <__aeabi_dsub>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4620      	mov	r0, r4
 8004082:	4629      	mov	r1, r5
 8004084:	e7d9      	b.n	800403a <__ieee754_log+0x27a>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	4650      	mov	r0, sl
 800408c:	4659      	mov	r1, fp
 800408e:	f7fc f8f3 	bl	8000278 <__aeabi_dsub>
 8004092:	ec53 2b18 	vmov	r2, r3, d8
 8004096:	f7fc faa7 	bl	80005e8 <__aeabi_dmul>
 800409a:	4606      	mov	r6, r0
 800409c:	460f      	mov	r7, r1
 800409e:	2c00      	cmp	r4, #0
 80040a0:	f43f af23 	beq.w	8003eea <__ieee754_log+0x12a>
 80040a4:	a308      	add	r3, pc, #32	; (adr r3, 80040c8 <__ieee754_log+0x308>)
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	ec51 0b19 	vmov	r0, r1, d9
 80040ae:	f7fc fa9b 	bl	80005e8 <__aeabi_dmul>
 80040b2:	a307      	add	r3, pc, #28	; (adr r3, 80040d0 <__ieee754_log+0x310>)
 80040b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b8:	4604      	mov	r4, r0
 80040ba:	460d      	mov	r5, r1
 80040bc:	ec51 0b19 	vmov	r0, r1, d9
 80040c0:	e727      	b.n	8003f12 <__ieee754_log+0x152>
 80040c2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8004118 <__ieee754_log+0x358>
 80040c6:	e694      	b.n	8003df2 <__ieee754_log+0x32>
 80040c8:	fee00000 	.word	0xfee00000
 80040cc:	3fe62e42 	.word	0x3fe62e42
 80040d0:	35793c76 	.word	0x35793c76
 80040d4:	3dea39ef 	.word	0x3dea39ef
 80040d8:	55555555 	.word	0x55555555
 80040dc:	3fd55555 	.word	0x3fd55555
 80040e0:	df3e5244 	.word	0xdf3e5244
 80040e4:	3fc2f112 	.word	0x3fc2f112
 80040e8:	96cb03de 	.word	0x96cb03de
 80040ec:	3fc74664 	.word	0x3fc74664
 80040f0:	94229359 	.word	0x94229359
 80040f4:	3fd24924 	.word	0x3fd24924
 80040f8:	55555593 	.word	0x55555593
 80040fc:	3fe55555 	.word	0x3fe55555
 8004100:	d078c69f 	.word	0xd078c69f
 8004104:	3fc39a09 	.word	0x3fc39a09
 8004108:	1d8e78af 	.word	0x1d8e78af
 800410c:	3fcc71c5 	.word	0x3fcc71c5
 8004110:	9997fa04 	.word	0x9997fa04
 8004114:	3fd99999 	.word	0x3fd99999
	...
 8004120:	c3500000 	.word	0xc3500000
 8004124:	43500000 	.word	0x43500000
 8004128:	7fefffff 	.word	0x7fefffff
 800412c:	3ff00000 	.word	0x3ff00000
 8004130:	3fe00000 	.word	0x3fe00000
 8004134:	00000000 	.word	0x00000000

08004138 <nan>:
 8004138:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004140 <nan+0x8>
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	00000000 	.word	0x00000000
 8004144:	7ff80000 	.word	0x7ff80000

08004148 <__errno>:
 8004148:	4b01      	ldr	r3, [pc, #4]	; (8004150 <__errno+0x8>)
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	2000000c 	.word	0x2000000c

08004154 <__libc_init_array>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	4d0d      	ldr	r5, [pc, #52]	; (800418c <__libc_init_array+0x38>)
 8004158:	4c0d      	ldr	r4, [pc, #52]	; (8004190 <__libc_init_array+0x3c>)
 800415a:	1b64      	subs	r4, r4, r5
 800415c:	10a4      	asrs	r4, r4, #2
 800415e:	2600      	movs	r6, #0
 8004160:	42a6      	cmp	r6, r4
 8004162:	d109      	bne.n	8004178 <__libc_init_array+0x24>
 8004164:	4d0b      	ldr	r5, [pc, #44]	; (8004194 <__libc_init_array+0x40>)
 8004166:	4c0c      	ldr	r4, [pc, #48]	; (8004198 <__libc_init_array+0x44>)
 8004168:	f000 ffae 	bl	80050c8 <_init>
 800416c:	1b64      	subs	r4, r4, r5
 800416e:	10a4      	asrs	r4, r4, #2
 8004170:	2600      	movs	r6, #0
 8004172:	42a6      	cmp	r6, r4
 8004174:	d105      	bne.n	8004182 <__libc_init_array+0x2e>
 8004176:	bd70      	pop	{r4, r5, r6, pc}
 8004178:	f855 3b04 	ldr.w	r3, [r5], #4
 800417c:	4798      	blx	r3
 800417e:	3601      	adds	r6, #1
 8004180:	e7ee      	b.n	8004160 <__libc_init_array+0xc>
 8004182:	f855 3b04 	ldr.w	r3, [r5], #4
 8004186:	4798      	blx	r3
 8004188:	3601      	adds	r6, #1
 800418a:	e7f2      	b.n	8004172 <__libc_init_array+0x1e>
 800418c:	080051bc 	.word	0x080051bc
 8004190:	080051bc 	.word	0x080051bc
 8004194:	080051bc 	.word	0x080051bc
 8004198:	080051c0 	.word	0x080051c0

0800419c <memset>:
 800419c:	4402      	add	r2, r0
 800419e:	4603      	mov	r3, r0
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d100      	bne.n	80041a6 <memset+0xa>
 80041a4:	4770      	bx	lr
 80041a6:	f803 1b01 	strb.w	r1, [r3], #1
 80041aa:	e7f9      	b.n	80041a0 <memset+0x4>

080041ac <iprintf>:
 80041ac:	b40f      	push	{r0, r1, r2, r3}
 80041ae:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <iprintf+0x2c>)
 80041b0:	b513      	push	{r0, r1, r4, lr}
 80041b2:	681c      	ldr	r4, [r3, #0]
 80041b4:	b124      	cbz	r4, 80041c0 <iprintf+0x14>
 80041b6:	69a3      	ldr	r3, [r4, #24]
 80041b8:	b913      	cbnz	r3, 80041c0 <iprintf+0x14>
 80041ba:	4620      	mov	r0, r4
 80041bc:	f000 f866 	bl	800428c <__sinit>
 80041c0:	ab05      	add	r3, sp, #20
 80041c2:	9a04      	ldr	r2, [sp, #16]
 80041c4:	68a1      	ldr	r1, [r4, #8]
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	4620      	mov	r0, r4
 80041ca:	f000 f9bd 	bl	8004548 <_vfiprintf_r>
 80041ce:	b002      	add	sp, #8
 80041d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041d4:	b004      	add	sp, #16
 80041d6:	4770      	bx	lr
 80041d8:	2000000c 	.word	0x2000000c

080041dc <std>:
 80041dc:	2300      	movs	r3, #0
 80041de:	b510      	push	{r4, lr}
 80041e0:	4604      	mov	r4, r0
 80041e2:	e9c0 3300 	strd	r3, r3, [r0]
 80041e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041ea:	6083      	str	r3, [r0, #8]
 80041ec:	8181      	strh	r1, [r0, #12]
 80041ee:	6643      	str	r3, [r0, #100]	; 0x64
 80041f0:	81c2      	strh	r2, [r0, #14]
 80041f2:	6183      	str	r3, [r0, #24]
 80041f4:	4619      	mov	r1, r3
 80041f6:	2208      	movs	r2, #8
 80041f8:	305c      	adds	r0, #92	; 0x5c
 80041fa:	f7ff ffcf 	bl	800419c <memset>
 80041fe:	4b05      	ldr	r3, [pc, #20]	; (8004214 <std+0x38>)
 8004200:	6263      	str	r3, [r4, #36]	; 0x24
 8004202:	4b05      	ldr	r3, [pc, #20]	; (8004218 <std+0x3c>)
 8004204:	62a3      	str	r3, [r4, #40]	; 0x28
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <std+0x40>)
 8004208:	62e3      	str	r3, [r4, #44]	; 0x2c
 800420a:	4b05      	ldr	r3, [pc, #20]	; (8004220 <std+0x44>)
 800420c:	6224      	str	r4, [r4, #32]
 800420e:	6323      	str	r3, [r4, #48]	; 0x30
 8004210:	bd10      	pop	{r4, pc}
 8004212:	bf00      	nop
 8004214:	08004af1 	.word	0x08004af1
 8004218:	08004b13 	.word	0x08004b13
 800421c:	08004b4b 	.word	0x08004b4b
 8004220:	08004b6f 	.word	0x08004b6f

08004224 <_cleanup_r>:
 8004224:	4901      	ldr	r1, [pc, #4]	; (800422c <_cleanup_r+0x8>)
 8004226:	f000 b8af 	b.w	8004388 <_fwalk_reent>
 800422a:	bf00      	nop
 800422c:	08004e49 	.word	0x08004e49

08004230 <__sfmoreglue>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	2268      	movs	r2, #104	; 0x68
 8004234:	1e4d      	subs	r5, r1, #1
 8004236:	4355      	muls	r5, r2
 8004238:	460e      	mov	r6, r1
 800423a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800423e:	f000 f8e5 	bl	800440c <_malloc_r>
 8004242:	4604      	mov	r4, r0
 8004244:	b140      	cbz	r0, 8004258 <__sfmoreglue+0x28>
 8004246:	2100      	movs	r1, #0
 8004248:	e9c0 1600 	strd	r1, r6, [r0]
 800424c:	300c      	adds	r0, #12
 800424e:	60a0      	str	r0, [r4, #8]
 8004250:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004254:	f7ff ffa2 	bl	800419c <memset>
 8004258:	4620      	mov	r0, r4
 800425a:	bd70      	pop	{r4, r5, r6, pc}

0800425c <__sfp_lock_acquire>:
 800425c:	4801      	ldr	r0, [pc, #4]	; (8004264 <__sfp_lock_acquire+0x8>)
 800425e:	f000 b8b3 	b.w	80043c8 <__retarget_lock_acquire_recursive>
 8004262:	bf00      	nop
 8004264:	200000e9 	.word	0x200000e9

08004268 <__sfp_lock_release>:
 8004268:	4801      	ldr	r0, [pc, #4]	; (8004270 <__sfp_lock_release+0x8>)
 800426a:	f000 b8ae 	b.w	80043ca <__retarget_lock_release_recursive>
 800426e:	bf00      	nop
 8004270:	200000e9 	.word	0x200000e9

08004274 <__sinit_lock_acquire>:
 8004274:	4801      	ldr	r0, [pc, #4]	; (800427c <__sinit_lock_acquire+0x8>)
 8004276:	f000 b8a7 	b.w	80043c8 <__retarget_lock_acquire_recursive>
 800427a:	bf00      	nop
 800427c:	200000ea 	.word	0x200000ea

08004280 <__sinit_lock_release>:
 8004280:	4801      	ldr	r0, [pc, #4]	; (8004288 <__sinit_lock_release+0x8>)
 8004282:	f000 b8a2 	b.w	80043ca <__retarget_lock_release_recursive>
 8004286:	bf00      	nop
 8004288:	200000ea 	.word	0x200000ea

0800428c <__sinit>:
 800428c:	b510      	push	{r4, lr}
 800428e:	4604      	mov	r4, r0
 8004290:	f7ff fff0 	bl	8004274 <__sinit_lock_acquire>
 8004294:	69a3      	ldr	r3, [r4, #24]
 8004296:	b11b      	cbz	r3, 80042a0 <__sinit+0x14>
 8004298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800429c:	f7ff bff0 	b.w	8004280 <__sinit_lock_release>
 80042a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80042a4:	6523      	str	r3, [r4, #80]	; 0x50
 80042a6:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <__sinit+0x68>)
 80042a8:	4a13      	ldr	r2, [pc, #76]	; (80042f8 <__sinit+0x6c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80042ae:	42a3      	cmp	r3, r4
 80042b0:	bf04      	itt	eq
 80042b2:	2301      	moveq	r3, #1
 80042b4:	61a3      	streq	r3, [r4, #24]
 80042b6:	4620      	mov	r0, r4
 80042b8:	f000 f820 	bl	80042fc <__sfp>
 80042bc:	6060      	str	r0, [r4, #4]
 80042be:	4620      	mov	r0, r4
 80042c0:	f000 f81c 	bl	80042fc <__sfp>
 80042c4:	60a0      	str	r0, [r4, #8]
 80042c6:	4620      	mov	r0, r4
 80042c8:	f000 f818 	bl	80042fc <__sfp>
 80042cc:	2200      	movs	r2, #0
 80042ce:	60e0      	str	r0, [r4, #12]
 80042d0:	2104      	movs	r1, #4
 80042d2:	6860      	ldr	r0, [r4, #4]
 80042d4:	f7ff ff82 	bl	80041dc <std>
 80042d8:	68a0      	ldr	r0, [r4, #8]
 80042da:	2201      	movs	r2, #1
 80042dc:	2109      	movs	r1, #9
 80042de:	f7ff ff7d 	bl	80041dc <std>
 80042e2:	68e0      	ldr	r0, [r4, #12]
 80042e4:	2202      	movs	r2, #2
 80042e6:	2112      	movs	r1, #18
 80042e8:	f7ff ff78 	bl	80041dc <std>
 80042ec:	2301      	movs	r3, #1
 80042ee:	61a3      	str	r3, [r4, #24]
 80042f0:	e7d2      	b.n	8004298 <__sinit+0xc>
 80042f2:	bf00      	nop
 80042f4:	08005124 	.word	0x08005124
 80042f8:	08004225 	.word	0x08004225

080042fc <__sfp>:
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fe:	4607      	mov	r7, r0
 8004300:	f7ff ffac 	bl	800425c <__sfp_lock_acquire>
 8004304:	4b1e      	ldr	r3, [pc, #120]	; (8004380 <__sfp+0x84>)
 8004306:	681e      	ldr	r6, [r3, #0]
 8004308:	69b3      	ldr	r3, [r6, #24]
 800430a:	b913      	cbnz	r3, 8004312 <__sfp+0x16>
 800430c:	4630      	mov	r0, r6
 800430e:	f7ff ffbd 	bl	800428c <__sinit>
 8004312:	3648      	adds	r6, #72	; 0x48
 8004314:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004318:	3b01      	subs	r3, #1
 800431a:	d503      	bpl.n	8004324 <__sfp+0x28>
 800431c:	6833      	ldr	r3, [r6, #0]
 800431e:	b30b      	cbz	r3, 8004364 <__sfp+0x68>
 8004320:	6836      	ldr	r6, [r6, #0]
 8004322:	e7f7      	b.n	8004314 <__sfp+0x18>
 8004324:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004328:	b9d5      	cbnz	r5, 8004360 <__sfp+0x64>
 800432a:	4b16      	ldr	r3, [pc, #88]	; (8004384 <__sfp+0x88>)
 800432c:	60e3      	str	r3, [r4, #12]
 800432e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004332:	6665      	str	r5, [r4, #100]	; 0x64
 8004334:	f000 f847 	bl	80043c6 <__retarget_lock_init_recursive>
 8004338:	f7ff ff96 	bl	8004268 <__sfp_lock_release>
 800433c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004340:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004344:	6025      	str	r5, [r4, #0]
 8004346:	61a5      	str	r5, [r4, #24]
 8004348:	2208      	movs	r2, #8
 800434a:	4629      	mov	r1, r5
 800434c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004350:	f7ff ff24 	bl	800419c <memset>
 8004354:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004358:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800435c:	4620      	mov	r0, r4
 800435e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004360:	3468      	adds	r4, #104	; 0x68
 8004362:	e7d9      	b.n	8004318 <__sfp+0x1c>
 8004364:	2104      	movs	r1, #4
 8004366:	4638      	mov	r0, r7
 8004368:	f7ff ff62 	bl	8004230 <__sfmoreglue>
 800436c:	4604      	mov	r4, r0
 800436e:	6030      	str	r0, [r6, #0]
 8004370:	2800      	cmp	r0, #0
 8004372:	d1d5      	bne.n	8004320 <__sfp+0x24>
 8004374:	f7ff ff78 	bl	8004268 <__sfp_lock_release>
 8004378:	230c      	movs	r3, #12
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	e7ee      	b.n	800435c <__sfp+0x60>
 800437e:	bf00      	nop
 8004380:	08005124 	.word	0x08005124
 8004384:	ffff0001 	.word	0xffff0001

08004388 <_fwalk_reent>:
 8004388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800438c:	4606      	mov	r6, r0
 800438e:	4688      	mov	r8, r1
 8004390:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004394:	2700      	movs	r7, #0
 8004396:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800439a:	f1b9 0901 	subs.w	r9, r9, #1
 800439e:	d505      	bpl.n	80043ac <_fwalk_reent+0x24>
 80043a0:	6824      	ldr	r4, [r4, #0]
 80043a2:	2c00      	cmp	r4, #0
 80043a4:	d1f7      	bne.n	8004396 <_fwalk_reent+0xe>
 80043a6:	4638      	mov	r0, r7
 80043a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ac:	89ab      	ldrh	r3, [r5, #12]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d907      	bls.n	80043c2 <_fwalk_reent+0x3a>
 80043b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043b6:	3301      	adds	r3, #1
 80043b8:	d003      	beq.n	80043c2 <_fwalk_reent+0x3a>
 80043ba:	4629      	mov	r1, r5
 80043bc:	4630      	mov	r0, r6
 80043be:	47c0      	blx	r8
 80043c0:	4307      	orrs	r7, r0
 80043c2:	3568      	adds	r5, #104	; 0x68
 80043c4:	e7e9      	b.n	800439a <_fwalk_reent+0x12>

080043c6 <__retarget_lock_init_recursive>:
 80043c6:	4770      	bx	lr

080043c8 <__retarget_lock_acquire_recursive>:
 80043c8:	4770      	bx	lr

080043ca <__retarget_lock_release_recursive>:
 80043ca:	4770      	bx	lr

080043cc <sbrk_aligned>:
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	4e0e      	ldr	r6, [pc, #56]	; (8004408 <sbrk_aligned+0x3c>)
 80043d0:	460c      	mov	r4, r1
 80043d2:	6831      	ldr	r1, [r6, #0]
 80043d4:	4605      	mov	r5, r0
 80043d6:	b911      	cbnz	r1, 80043de <sbrk_aligned+0x12>
 80043d8:	f000 fb7a 	bl	8004ad0 <_sbrk_r>
 80043dc:	6030      	str	r0, [r6, #0]
 80043de:	4621      	mov	r1, r4
 80043e0:	4628      	mov	r0, r5
 80043e2:	f000 fb75 	bl	8004ad0 <_sbrk_r>
 80043e6:	1c43      	adds	r3, r0, #1
 80043e8:	d00a      	beq.n	8004400 <sbrk_aligned+0x34>
 80043ea:	1cc4      	adds	r4, r0, #3
 80043ec:	f024 0403 	bic.w	r4, r4, #3
 80043f0:	42a0      	cmp	r0, r4
 80043f2:	d007      	beq.n	8004404 <sbrk_aligned+0x38>
 80043f4:	1a21      	subs	r1, r4, r0
 80043f6:	4628      	mov	r0, r5
 80043f8:	f000 fb6a 	bl	8004ad0 <_sbrk_r>
 80043fc:	3001      	adds	r0, #1
 80043fe:	d101      	bne.n	8004404 <sbrk_aligned+0x38>
 8004400:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004404:	4620      	mov	r0, r4
 8004406:	bd70      	pop	{r4, r5, r6, pc}
 8004408:	200000f0 	.word	0x200000f0

0800440c <_malloc_r>:
 800440c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004410:	1ccd      	adds	r5, r1, #3
 8004412:	f025 0503 	bic.w	r5, r5, #3
 8004416:	3508      	adds	r5, #8
 8004418:	2d0c      	cmp	r5, #12
 800441a:	bf38      	it	cc
 800441c:	250c      	movcc	r5, #12
 800441e:	2d00      	cmp	r5, #0
 8004420:	4607      	mov	r7, r0
 8004422:	db01      	blt.n	8004428 <_malloc_r+0x1c>
 8004424:	42a9      	cmp	r1, r5
 8004426:	d905      	bls.n	8004434 <_malloc_r+0x28>
 8004428:	230c      	movs	r3, #12
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	2600      	movs	r6, #0
 800442e:	4630      	mov	r0, r6
 8004430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004434:	4e2e      	ldr	r6, [pc, #184]	; (80044f0 <_malloc_r+0xe4>)
 8004436:	f000 fdbb 	bl	8004fb0 <__malloc_lock>
 800443a:	6833      	ldr	r3, [r6, #0]
 800443c:	461c      	mov	r4, r3
 800443e:	bb34      	cbnz	r4, 800448e <_malloc_r+0x82>
 8004440:	4629      	mov	r1, r5
 8004442:	4638      	mov	r0, r7
 8004444:	f7ff ffc2 	bl	80043cc <sbrk_aligned>
 8004448:	1c43      	adds	r3, r0, #1
 800444a:	4604      	mov	r4, r0
 800444c:	d14d      	bne.n	80044ea <_malloc_r+0xde>
 800444e:	6834      	ldr	r4, [r6, #0]
 8004450:	4626      	mov	r6, r4
 8004452:	2e00      	cmp	r6, #0
 8004454:	d140      	bne.n	80044d8 <_malloc_r+0xcc>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	4631      	mov	r1, r6
 800445a:	4638      	mov	r0, r7
 800445c:	eb04 0803 	add.w	r8, r4, r3
 8004460:	f000 fb36 	bl	8004ad0 <_sbrk_r>
 8004464:	4580      	cmp	r8, r0
 8004466:	d13a      	bne.n	80044de <_malloc_r+0xd2>
 8004468:	6821      	ldr	r1, [r4, #0]
 800446a:	3503      	adds	r5, #3
 800446c:	1a6d      	subs	r5, r5, r1
 800446e:	f025 0503 	bic.w	r5, r5, #3
 8004472:	3508      	adds	r5, #8
 8004474:	2d0c      	cmp	r5, #12
 8004476:	bf38      	it	cc
 8004478:	250c      	movcc	r5, #12
 800447a:	4629      	mov	r1, r5
 800447c:	4638      	mov	r0, r7
 800447e:	f7ff ffa5 	bl	80043cc <sbrk_aligned>
 8004482:	3001      	adds	r0, #1
 8004484:	d02b      	beq.n	80044de <_malloc_r+0xd2>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	442b      	add	r3, r5
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	e00e      	b.n	80044ac <_malloc_r+0xa0>
 800448e:	6822      	ldr	r2, [r4, #0]
 8004490:	1b52      	subs	r2, r2, r5
 8004492:	d41e      	bmi.n	80044d2 <_malloc_r+0xc6>
 8004494:	2a0b      	cmp	r2, #11
 8004496:	d916      	bls.n	80044c6 <_malloc_r+0xba>
 8004498:	1961      	adds	r1, r4, r5
 800449a:	42a3      	cmp	r3, r4
 800449c:	6025      	str	r5, [r4, #0]
 800449e:	bf18      	it	ne
 80044a0:	6059      	strne	r1, [r3, #4]
 80044a2:	6863      	ldr	r3, [r4, #4]
 80044a4:	bf08      	it	eq
 80044a6:	6031      	streq	r1, [r6, #0]
 80044a8:	5162      	str	r2, [r4, r5]
 80044aa:	604b      	str	r3, [r1, #4]
 80044ac:	4638      	mov	r0, r7
 80044ae:	f104 060b 	add.w	r6, r4, #11
 80044b2:	f000 fd83 	bl	8004fbc <__malloc_unlock>
 80044b6:	f026 0607 	bic.w	r6, r6, #7
 80044ba:	1d23      	adds	r3, r4, #4
 80044bc:	1af2      	subs	r2, r6, r3
 80044be:	d0b6      	beq.n	800442e <_malloc_r+0x22>
 80044c0:	1b9b      	subs	r3, r3, r6
 80044c2:	50a3      	str	r3, [r4, r2]
 80044c4:	e7b3      	b.n	800442e <_malloc_r+0x22>
 80044c6:	6862      	ldr	r2, [r4, #4]
 80044c8:	42a3      	cmp	r3, r4
 80044ca:	bf0c      	ite	eq
 80044cc:	6032      	streq	r2, [r6, #0]
 80044ce:	605a      	strne	r2, [r3, #4]
 80044d0:	e7ec      	b.n	80044ac <_malloc_r+0xa0>
 80044d2:	4623      	mov	r3, r4
 80044d4:	6864      	ldr	r4, [r4, #4]
 80044d6:	e7b2      	b.n	800443e <_malloc_r+0x32>
 80044d8:	4634      	mov	r4, r6
 80044da:	6876      	ldr	r6, [r6, #4]
 80044dc:	e7b9      	b.n	8004452 <_malloc_r+0x46>
 80044de:	230c      	movs	r3, #12
 80044e0:	603b      	str	r3, [r7, #0]
 80044e2:	4638      	mov	r0, r7
 80044e4:	f000 fd6a 	bl	8004fbc <__malloc_unlock>
 80044e8:	e7a1      	b.n	800442e <_malloc_r+0x22>
 80044ea:	6025      	str	r5, [r4, #0]
 80044ec:	e7de      	b.n	80044ac <_malloc_r+0xa0>
 80044ee:	bf00      	nop
 80044f0:	200000ec 	.word	0x200000ec

080044f4 <__sfputc_r>:
 80044f4:	6893      	ldr	r3, [r2, #8]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	b410      	push	{r4}
 80044fc:	6093      	str	r3, [r2, #8]
 80044fe:	da08      	bge.n	8004512 <__sfputc_r+0x1e>
 8004500:	6994      	ldr	r4, [r2, #24]
 8004502:	42a3      	cmp	r3, r4
 8004504:	db01      	blt.n	800450a <__sfputc_r+0x16>
 8004506:	290a      	cmp	r1, #10
 8004508:	d103      	bne.n	8004512 <__sfputc_r+0x1e>
 800450a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800450e:	f000 bb33 	b.w	8004b78 <__swbuf_r>
 8004512:	6813      	ldr	r3, [r2, #0]
 8004514:	1c58      	adds	r0, r3, #1
 8004516:	6010      	str	r0, [r2, #0]
 8004518:	7019      	strb	r1, [r3, #0]
 800451a:	4608      	mov	r0, r1
 800451c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004520:	4770      	bx	lr

08004522 <__sfputs_r>:
 8004522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004524:	4606      	mov	r6, r0
 8004526:	460f      	mov	r7, r1
 8004528:	4614      	mov	r4, r2
 800452a:	18d5      	adds	r5, r2, r3
 800452c:	42ac      	cmp	r4, r5
 800452e:	d101      	bne.n	8004534 <__sfputs_r+0x12>
 8004530:	2000      	movs	r0, #0
 8004532:	e007      	b.n	8004544 <__sfputs_r+0x22>
 8004534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004538:	463a      	mov	r2, r7
 800453a:	4630      	mov	r0, r6
 800453c:	f7ff ffda 	bl	80044f4 <__sfputc_r>
 8004540:	1c43      	adds	r3, r0, #1
 8004542:	d1f3      	bne.n	800452c <__sfputs_r+0xa>
 8004544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004548 <_vfiprintf_r>:
 8004548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800454c:	460d      	mov	r5, r1
 800454e:	b09d      	sub	sp, #116	; 0x74
 8004550:	4614      	mov	r4, r2
 8004552:	4698      	mov	r8, r3
 8004554:	4606      	mov	r6, r0
 8004556:	b118      	cbz	r0, 8004560 <_vfiprintf_r+0x18>
 8004558:	6983      	ldr	r3, [r0, #24]
 800455a:	b90b      	cbnz	r3, 8004560 <_vfiprintf_r+0x18>
 800455c:	f7ff fe96 	bl	800428c <__sinit>
 8004560:	4b89      	ldr	r3, [pc, #548]	; (8004788 <_vfiprintf_r+0x240>)
 8004562:	429d      	cmp	r5, r3
 8004564:	d11b      	bne.n	800459e <_vfiprintf_r+0x56>
 8004566:	6875      	ldr	r5, [r6, #4]
 8004568:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800456a:	07d9      	lsls	r1, r3, #31
 800456c:	d405      	bmi.n	800457a <_vfiprintf_r+0x32>
 800456e:	89ab      	ldrh	r3, [r5, #12]
 8004570:	059a      	lsls	r2, r3, #22
 8004572:	d402      	bmi.n	800457a <_vfiprintf_r+0x32>
 8004574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004576:	f7ff ff27 	bl	80043c8 <__retarget_lock_acquire_recursive>
 800457a:	89ab      	ldrh	r3, [r5, #12]
 800457c:	071b      	lsls	r3, r3, #28
 800457e:	d501      	bpl.n	8004584 <_vfiprintf_r+0x3c>
 8004580:	692b      	ldr	r3, [r5, #16]
 8004582:	b9eb      	cbnz	r3, 80045c0 <_vfiprintf_r+0x78>
 8004584:	4629      	mov	r1, r5
 8004586:	4630      	mov	r0, r6
 8004588:	f000 fb5a 	bl	8004c40 <__swsetup_r>
 800458c:	b1c0      	cbz	r0, 80045c0 <_vfiprintf_r+0x78>
 800458e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004590:	07dc      	lsls	r4, r3, #31
 8004592:	d50e      	bpl.n	80045b2 <_vfiprintf_r+0x6a>
 8004594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004598:	b01d      	add	sp, #116	; 0x74
 800459a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800459e:	4b7b      	ldr	r3, [pc, #492]	; (800478c <_vfiprintf_r+0x244>)
 80045a0:	429d      	cmp	r5, r3
 80045a2:	d101      	bne.n	80045a8 <_vfiprintf_r+0x60>
 80045a4:	68b5      	ldr	r5, [r6, #8]
 80045a6:	e7df      	b.n	8004568 <_vfiprintf_r+0x20>
 80045a8:	4b79      	ldr	r3, [pc, #484]	; (8004790 <_vfiprintf_r+0x248>)
 80045aa:	429d      	cmp	r5, r3
 80045ac:	bf08      	it	eq
 80045ae:	68f5      	ldreq	r5, [r6, #12]
 80045b0:	e7da      	b.n	8004568 <_vfiprintf_r+0x20>
 80045b2:	89ab      	ldrh	r3, [r5, #12]
 80045b4:	0598      	lsls	r0, r3, #22
 80045b6:	d4ed      	bmi.n	8004594 <_vfiprintf_r+0x4c>
 80045b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045ba:	f7ff ff06 	bl	80043ca <__retarget_lock_release_recursive>
 80045be:	e7e9      	b.n	8004594 <_vfiprintf_r+0x4c>
 80045c0:	2300      	movs	r3, #0
 80045c2:	9309      	str	r3, [sp, #36]	; 0x24
 80045c4:	2320      	movs	r3, #32
 80045c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80045ce:	2330      	movs	r3, #48	; 0x30
 80045d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004794 <_vfiprintf_r+0x24c>
 80045d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045d8:	f04f 0901 	mov.w	r9, #1
 80045dc:	4623      	mov	r3, r4
 80045de:	469a      	mov	sl, r3
 80045e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045e4:	b10a      	cbz	r2, 80045ea <_vfiprintf_r+0xa2>
 80045e6:	2a25      	cmp	r2, #37	; 0x25
 80045e8:	d1f9      	bne.n	80045de <_vfiprintf_r+0x96>
 80045ea:	ebba 0b04 	subs.w	fp, sl, r4
 80045ee:	d00b      	beq.n	8004608 <_vfiprintf_r+0xc0>
 80045f0:	465b      	mov	r3, fp
 80045f2:	4622      	mov	r2, r4
 80045f4:	4629      	mov	r1, r5
 80045f6:	4630      	mov	r0, r6
 80045f8:	f7ff ff93 	bl	8004522 <__sfputs_r>
 80045fc:	3001      	adds	r0, #1
 80045fe:	f000 80aa 	beq.w	8004756 <_vfiprintf_r+0x20e>
 8004602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004604:	445a      	add	r2, fp
 8004606:	9209      	str	r2, [sp, #36]	; 0x24
 8004608:	f89a 3000 	ldrb.w	r3, [sl]
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80a2 	beq.w	8004756 <_vfiprintf_r+0x20e>
 8004612:	2300      	movs	r3, #0
 8004614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800461c:	f10a 0a01 	add.w	sl, sl, #1
 8004620:	9304      	str	r3, [sp, #16]
 8004622:	9307      	str	r3, [sp, #28]
 8004624:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004628:	931a      	str	r3, [sp, #104]	; 0x68
 800462a:	4654      	mov	r4, sl
 800462c:	2205      	movs	r2, #5
 800462e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004632:	4858      	ldr	r0, [pc, #352]	; (8004794 <_vfiprintf_r+0x24c>)
 8004634:	f7fb fdcc 	bl	80001d0 <memchr>
 8004638:	9a04      	ldr	r2, [sp, #16]
 800463a:	b9d8      	cbnz	r0, 8004674 <_vfiprintf_r+0x12c>
 800463c:	06d1      	lsls	r1, r2, #27
 800463e:	bf44      	itt	mi
 8004640:	2320      	movmi	r3, #32
 8004642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004646:	0713      	lsls	r3, r2, #28
 8004648:	bf44      	itt	mi
 800464a:	232b      	movmi	r3, #43	; 0x2b
 800464c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004650:	f89a 3000 	ldrb.w	r3, [sl]
 8004654:	2b2a      	cmp	r3, #42	; 0x2a
 8004656:	d015      	beq.n	8004684 <_vfiprintf_r+0x13c>
 8004658:	9a07      	ldr	r2, [sp, #28]
 800465a:	4654      	mov	r4, sl
 800465c:	2000      	movs	r0, #0
 800465e:	f04f 0c0a 	mov.w	ip, #10
 8004662:	4621      	mov	r1, r4
 8004664:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004668:	3b30      	subs	r3, #48	; 0x30
 800466a:	2b09      	cmp	r3, #9
 800466c:	d94e      	bls.n	800470c <_vfiprintf_r+0x1c4>
 800466e:	b1b0      	cbz	r0, 800469e <_vfiprintf_r+0x156>
 8004670:	9207      	str	r2, [sp, #28]
 8004672:	e014      	b.n	800469e <_vfiprintf_r+0x156>
 8004674:	eba0 0308 	sub.w	r3, r0, r8
 8004678:	fa09 f303 	lsl.w	r3, r9, r3
 800467c:	4313      	orrs	r3, r2
 800467e:	9304      	str	r3, [sp, #16]
 8004680:	46a2      	mov	sl, r4
 8004682:	e7d2      	b.n	800462a <_vfiprintf_r+0xe2>
 8004684:	9b03      	ldr	r3, [sp, #12]
 8004686:	1d19      	adds	r1, r3, #4
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	9103      	str	r1, [sp, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	bfbb      	ittet	lt
 8004690:	425b      	neglt	r3, r3
 8004692:	f042 0202 	orrlt.w	r2, r2, #2
 8004696:	9307      	strge	r3, [sp, #28]
 8004698:	9307      	strlt	r3, [sp, #28]
 800469a:	bfb8      	it	lt
 800469c:	9204      	strlt	r2, [sp, #16]
 800469e:	7823      	ldrb	r3, [r4, #0]
 80046a0:	2b2e      	cmp	r3, #46	; 0x2e
 80046a2:	d10c      	bne.n	80046be <_vfiprintf_r+0x176>
 80046a4:	7863      	ldrb	r3, [r4, #1]
 80046a6:	2b2a      	cmp	r3, #42	; 0x2a
 80046a8:	d135      	bne.n	8004716 <_vfiprintf_r+0x1ce>
 80046aa:	9b03      	ldr	r3, [sp, #12]
 80046ac:	1d1a      	adds	r2, r3, #4
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	9203      	str	r2, [sp, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bfb8      	it	lt
 80046b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80046ba:	3402      	adds	r4, #2
 80046bc:	9305      	str	r3, [sp, #20]
 80046be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80047a4 <_vfiprintf_r+0x25c>
 80046c2:	7821      	ldrb	r1, [r4, #0]
 80046c4:	2203      	movs	r2, #3
 80046c6:	4650      	mov	r0, sl
 80046c8:	f7fb fd82 	bl	80001d0 <memchr>
 80046cc:	b140      	cbz	r0, 80046e0 <_vfiprintf_r+0x198>
 80046ce:	2340      	movs	r3, #64	; 0x40
 80046d0:	eba0 000a 	sub.w	r0, r0, sl
 80046d4:	fa03 f000 	lsl.w	r0, r3, r0
 80046d8:	9b04      	ldr	r3, [sp, #16]
 80046da:	4303      	orrs	r3, r0
 80046dc:	3401      	adds	r4, #1
 80046de:	9304      	str	r3, [sp, #16]
 80046e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046e4:	482c      	ldr	r0, [pc, #176]	; (8004798 <_vfiprintf_r+0x250>)
 80046e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046ea:	2206      	movs	r2, #6
 80046ec:	f7fb fd70 	bl	80001d0 <memchr>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	d03f      	beq.n	8004774 <_vfiprintf_r+0x22c>
 80046f4:	4b29      	ldr	r3, [pc, #164]	; (800479c <_vfiprintf_r+0x254>)
 80046f6:	bb1b      	cbnz	r3, 8004740 <_vfiprintf_r+0x1f8>
 80046f8:	9b03      	ldr	r3, [sp, #12]
 80046fa:	3307      	adds	r3, #7
 80046fc:	f023 0307 	bic.w	r3, r3, #7
 8004700:	3308      	adds	r3, #8
 8004702:	9303      	str	r3, [sp, #12]
 8004704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004706:	443b      	add	r3, r7
 8004708:	9309      	str	r3, [sp, #36]	; 0x24
 800470a:	e767      	b.n	80045dc <_vfiprintf_r+0x94>
 800470c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004710:	460c      	mov	r4, r1
 8004712:	2001      	movs	r0, #1
 8004714:	e7a5      	b.n	8004662 <_vfiprintf_r+0x11a>
 8004716:	2300      	movs	r3, #0
 8004718:	3401      	adds	r4, #1
 800471a:	9305      	str	r3, [sp, #20]
 800471c:	4619      	mov	r1, r3
 800471e:	f04f 0c0a 	mov.w	ip, #10
 8004722:	4620      	mov	r0, r4
 8004724:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004728:	3a30      	subs	r2, #48	; 0x30
 800472a:	2a09      	cmp	r2, #9
 800472c:	d903      	bls.n	8004736 <_vfiprintf_r+0x1ee>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0c5      	beq.n	80046be <_vfiprintf_r+0x176>
 8004732:	9105      	str	r1, [sp, #20]
 8004734:	e7c3      	b.n	80046be <_vfiprintf_r+0x176>
 8004736:	fb0c 2101 	mla	r1, ip, r1, r2
 800473a:	4604      	mov	r4, r0
 800473c:	2301      	movs	r3, #1
 800473e:	e7f0      	b.n	8004722 <_vfiprintf_r+0x1da>
 8004740:	ab03      	add	r3, sp, #12
 8004742:	9300      	str	r3, [sp, #0]
 8004744:	462a      	mov	r2, r5
 8004746:	4b16      	ldr	r3, [pc, #88]	; (80047a0 <_vfiprintf_r+0x258>)
 8004748:	a904      	add	r1, sp, #16
 800474a:	4630      	mov	r0, r6
 800474c:	f3af 8000 	nop.w
 8004750:	4607      	mov	r7, r0
 8004752:	1c78      	adds	r0, r7, #1
 8004754:	d1d6      	bne.n	8004704 <_vfiprintf_r+0x1bc>
 8004756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004758:	07d9      	lsls	r1, r3, #31
 800475a:	d405      	bmi.n	8004768 <_vfiprintf_r+0x220>
 800475c:	89ab      	ldrh	r3, [r5, #12]
 800475e:	059a      	lsls	r2, r3, #22
 8004760:	d402      	bmi.n	8004768 <_vfiprintf_r+0x220>
 8004762:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004764:	f7ff fe31 	bl	80043ca <__retarget_lock_release_recursive>
 8004768:	89ab      	ldrh	r3, [r5, #12]
 800476a:	065b      	lsls	r3, r3, #25
 800476c:	f53f af12 	bmi.w	8004594 <_vfiprintf_r+0x4c>
 8004770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004772:	e711      	b.n	8004598 <_vfiprintf_r+0x50>
 8004774:	ab03      	add	r3, sp, #12
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	462a      	mov	r2, r5
 800477a:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <_vfiprintf_r+0x258>)
 800477c:	a904      	add	r1, sp, #16
 800477e:	4630      	mov	r0, r6
 8004780:	f000 f880 	bl	8004884 <_printf_i>
 8004784:	e7e4      	b.n	8004750 <_vfiprintf_r+0x208>
 8004786:	bf00      	nop
 8004788:	08005148 	.word	0x08005148
 800478c:	08005168 	.word	0x08005168
 8004790:	08005128 	.word	0x08005128
 8004794:	08005188 	.word	0x08005188
 8004798:	08005192 	.word	0x08005192
 800479c:	00000000 	.word	0x00000000
 80047a0:	08004523 	.word	0x08004523
 80047a4:	0800518e 	.word	0x0800518e

080047a8 <_printf_common>:
 80047a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047ac:	4616      	mov	r6, r2
 80047ae:	4699      	mov	r9, r3
 80047b0:	688a      	ldr	r2, [r1, #8]
 80047b2:	690b      	ldr	r3, [r1, #16]
 80047b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047b8:	4293      	cmp	r3, r2
 80047ba:	bfb8      	it	lt
 80047bc:	4613      	movlt	r3, r2
 80047be:	6033      	str	r3, [r6, #0]
 80047c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047c4:	4607      	mov	r7, r0
 80047c6:	460c      	mov	r4, r1
 80047c8:	b10a      	cbz	r2, 80047ce <_printf_common+0x26>
 80047ca:	3301      	adds	r3, #1
 80047cc:	6033      	str	r3, [r6, #0]
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	0699      	lsls	r1, r3, #26
 80047d2:	bf42      	ittt	mi
 80047d4:	6833      	ldrmi	r3, [r6, #0]
 80047d6:	3302      	addmi	r3, #2
 80047d8:	6033      	strmi	r3, [r6, #0]
 80047da:	6825      	ldr	r5, [r4, #0]
 80047dc:	f015 0506 	ands.w	r5, r5, #6
 80047e0:	d106      	bne.n	80047f0 <_printf_common+0x48>
 80047e2:	f104 0a19 	add.w	sl, r4, #25
 80047e6:	68e3      	ldr	r3, [r4, #12]
 80047e8:	6832      	ldr	r2, [r6, #0]
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	42ab      	cmp	r3, r5
 80047ee:	dc26      	bgt.n	800483e <_printf_common+0x96>
 80047f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047f4:	1e13      	subs	r3, r2, #0
 80047f6:	6822      	ldr	r2, [r4, #0]
 80047f8:	bf18      	it	ne
 80047fa:	2301      	movne	r3, #1
 80047fc:	0692      	lsls	r2, r2, #26
 80047fe:	d42b      	bmi.n	8004858 <_printf_common+0xb0>
 8004800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004804:	4649      	mov	r1, r9
 8004806:	4638      	mov	r0, r7
 8004808:	47c0      	blx	r8
 800480a:	3001      	adds	r0, #1
 800480c:	d01e      	beq.n	800484c <_printf_common+0xa4>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	68e5      	ldr	r5, [r4, #12]
 8004812:	6832      	ldr	r2, [r6, #0]
 8004814:	f003 0306 	and.w	r3, r3, #6
 8004818:	2b04      	cmp	r3, #4
 800481a:	bf08      	it	eq
 800481c:	1aad      	subeq	r5, r5, r2
 800481e:	68a3      	ldr	r3, [r4, #8]
 8004820:	6922      	ldr	r2, [r4, #16]
 8004822:	bf0c      	ite	eq
 8004824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004828:	2500      	movne	r5, #0
 800482a:	4293      	cmp	r3, r2
 800482c:	bfc4      	itt	gt
 800482e:	1a9b      	subgt	r3, r3, r2
 8004830:	18ed      	addgt	r5, r5, r3
 8004832:	2600      	movs	r6, #0
 8004834:	341a      	adds	r4, #26
 8004836:	42b5      	cmp	r5, r6
 8004838:	d11a      	bne.n	8004870 <_printf_common+0xc8>
 800483a:	2000      	movs	r0, #0
 800483c:	e008      	b.n	8004850 <_printf_common+0xa8>
 800483e:	2301      	movs	r3, #1
 8004840:	4652      	mov	r2, sl
 8004842:	4649      	mov	r1, r9
 8004844:	4638      	mov	r0, r7
 8004846:	47c0      	blx	r8
 8004848:	3001      	adds	r0, #1
 800484a:	d103      	bne.n	8004854 <_printf_common+0xac>
 800484c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004854:	3501      	adds	r5, #1
 8004856:	e7c6      	b.n	80047e6 <_printf_common+0x3e>
 8004858:	18e1      	adds	r1, r4, r3
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	2030      	movs	r0, #48	; 0x30
 800485e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004862:	4422      	add	r2, r4
 8004864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800486c:	3302      	adds	r3, #2
 800486e:	e7c7      	b.n	8004800 <_printf_common+0x58>
 8004870:	2301      	movs	r3, #1
 8004872:	4622      	mov	r2, r4
 8004874:	4649      	mov	r1, r9
 8004876:	4638      	mov	r0, r7
 8004878:	47c0      	blx	r8
 800487a:	3001      	adds	r0, #1
 800487c:	d0e6      	beq.n	800484c <_printf_common+0xa4>
 800487e:	3601      	adds	r6, #1
 8004880:	e7d9      	b.n	8004836 <_printf_common+0x8e>
	...

08004884 <_printf_i>:
 8004884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004888:	7e0f      	ldrb	r7, [r1, #24]
 800488a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800488c:	2f78      	cmp	r7, #120	; 0x78
 800488e:	4691      	mov	r9, r2
 8004890:	4680      	mov	r8, r0
 8004892:	460c      	mov	r4, r1
 8004894:	469a      	mov	sl, r3
 8004896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800489a:	d807      	bhi.n	80048ac <_printf_i+0x28>
 800489c:	2f62      	cmp	r7, #98	; 0x62
 800489e:	d80a      	bhi.n	80048b6 <_printf_i+0x32>
 80048a0:	2f00      	cmp	r7, #0
 80048a2:	f000 80d8 	beq.w	8004a56 <_printf_i+0x1d2>
 80048a6:	2f58      	cmp	r7, #88	; 0x58
 80048a8:	f000 80a3 	beq.w	80049f2 <_printf_i+0x16e>
 80048ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048b4:	e03a      	b.n	800492c <_printf_i+0xa8>
 80048b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048ba:	2b15      	cmp	r3, #21
 80048bc:	d8f6      	bhi.n	80048ac <_printf_i+0x28>
 80048be:	a101      	add	r1, pc, #4	; (adr r1, 80048c4 <_printf_i+0x40>)
 80048c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048c4:	0800491d 	.word	0x0800491d
 80048c8:	08004931 	.word	0x08004931
 80048cc:	080048ad 	.word	0x080048ad
 80048d0:	080048ad 	.word	0x080048ad
 80048d4:	080048ad 	.word	0x080048ad
 80048d8:	080048ad 	.word	0x080048ad
 80048dc:	08004931 	.word	0x08004931
 80048e0:	080048ad 	.word	0x080048ad
 80048e4:	080048ad 	.word	0x080048ad
 80048e8:	080048ad 	.word	0x080048ad
 80048ec:	080048ad 	.word	0x080048ad
 80048f0:	08004a3d 	.word	0x08004a3d
 80048f4:	08004961 	.word	0x08004961
 80048f8:	08004a1f 	.word	0x08004a1f
 80048fc:	080048ad 	.word	0x080048ad
 8004900:	080048ad 	.word	0x080048ad
 8004904:	08004a5f 	.word	0x08004a5f
 8004908:	080048ad 	.word	0x080048ad
 800490c:	08004961 	.word	0x08004961
 8004910:	080048ad 	.word	0x080048ad
 8004914:	080048ad 	.word	0x080048ad
 8004918:	08004a27 	.word	0x08004a27
 800491c:	682b      	ldr	r3, [r5, #0]
 800491e:	1d1a      	adds	r2, r3, #4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	602a      	str	r2, [r5, #0]
 8004924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800492c:	2301      	movs	r3, #1
 800492e:	e0a3      	b.n	8004a78 <_printf_i+0x1f4>
 8004930:	6820      	ldr	r0, [r4, #0]
 8004932:	6829      	ldr	r1, [r5, #0]
 8004934:	0606      	lsls	r6, r0, #24
 8004936:	f101 0304 	add.w	r3, r1, #4
 800493a:	d50a      	bpl.n	8004952 <_printf_i+0xce>
 800493c:	680e      	ldr	r6, [r1, #0]
 800493e:	602b      	str	r3, [r5, #0]
 8004940:	2e00      	cmp	r6, #0
 8004942:	da03      	bge.n	800494c <_printf_i+0xc8>
 8004944:	232d      	movs	r3, #45	; 0x2d
 8004946:	4276      	negs	r6, r6
 8004948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800494c:	485e      	ldr	r0, [pc, #376]	; (8004ac8 <_printf_i+0x244>)
 800494e:	230a      	movs	r3, #10
 8004950:	e019      	b.n	8004986 <_printf_i+0x102>
 8004952:	680e      	ldr	r6, [r1, #0]
 8004954:	602b      	str	r3, [r5, #0]
 8004956:	f010 0f40 	tst.w	r0, #64	; 0x40
 800495a:	bf18      	it	ne
 800495c:	b236      	sxthne	r6, r6
 800495e:	e7ef      	b.n	8004940 <_printf_i+0xbc>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	6820      	ldr	r0, [r4, #0]
 8004964:	1d19      	adds	r1, r3, #4
 8004966:	6029      	str	r1, [r5, #0]
 8004968:	0601      	lsls	r1, r0, #24
 800496a:	d501      	bpl.n	8004970 <_printf_i+0xec>
 800496c:	681e      	ldr	r6, [r3, #0]
 800496e:	e002      	b.n	8004976 <_printf_i+0xf2>
 8004970:	0646      	lsls	r6, r0, #25
 8004972:	d5fb      	bpl.n	800496c <_printf_i+0xe8>
 8004974:	881e      	ldrh	r6, [r3, #0]
 8004976:	4854      	ldr	r0, [pc, #336]	; (8004ac8 <_printf_i+0x244>)
 8004978:	2f6f      	cmp	r7, #111	; 0x6f
 800497a:	bf0c      	ite	eq
 800497c:	2308      	moveq	r3, #8
 800497e:	230a      	movne	r3, #10
 8004980:	2100      	movs	r1, #0
 8004982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004986:	6865      	ldr	r5, [r4, #4]
 8004988:	60a5      	str	r5, [r4, #8]
 800498a:	2d00      	cmp	r5, #0
 800498c:	bfa2      	ittt	ge
 800498e:	6821      	ldrge	r1, [r4, #0]
 8004990:	f021 0104 	bicge.w	r1, r1, #4
 8004994:	6021      	strge	r1, [r4, #0]
 8004996:	b90e      	cbnz	r6, 800499c <_printf_i+0x118>
 8004998:	2d00      	cmp	r5, #0
 800499a:	d04d      	beq.n	8004a38 <_printf_i+0x1b4>
 800499c:	4615      	mov	r5, r2
 800499e:	fbb6 f1f3 	udiv	r1, r6, r3
 80049a2:	fb03 6711 	mls	r7, r3, r1, r6
 80049a6:	5dc7      	ldrb	r7, [r0, r7]
 80049a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049ac:	4637      	mov	r7, r6
 80049ae:	42bb      	cmp	r3, r7
 80049b0:	460e      	mov	r6, r1
 80049b2:	d9f4      	bls.n	800499e <_printf_i+0x11a>
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d10b      	bne.n	80049d0 <_printf_i+0x14c>
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	07de      	lsls	r6, r3, #31
 80049bc:	d508      	bpl.n	80049d0 <_printf_i+0x14c>
 80049be:	6923      	ldr	r3, [r4, #16]
 80049c0:	6861      	ldr	r1, [r4, #4]
 80049c2:	4299      	cmp	r1, r3
 80049c4:	bfde      	ittt	le
 80049c6:	2330      	movle	r3, #48	; 0x30
 80049c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80049d0:	1b52      	subs	r2, r2, r5
 80049d2:	6122      	str	r2, [r4, #16]
 80049d4:	f8cd a000 	str.w	sl, [sp]
 80049d8:	464b      	mov	r3, r9
 80049da:	aa03      	add	r2, sp, #12
 80049dc:	4621      	mov	r1, r4
 80049de:	4640      	mov	r0, r8
 80049e0:	f7ff fee2 	bl	80047a8 <_printf_common>
 80049e4:	3001      	adds	r0, #1
 80049e6:	d14c      	bne.n	8004a82 <_printf_i+0x1fe>
 80049e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049ec:	b004      	add	sp, #16
 80049ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f2:	4835      	ldr	r0, [pc, #212]	; (8004ac8 <_printf_i+0x244>)
 80049f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80049f8:	6829      	ldr	r1, [r5, #0]
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a00:	6029      	str	r1, [r5, #0]
 8004a02:	061d      	lsls	r5, r3, #24
 8004a04:	d514      	bpl.n	8004a30 <_printf_i+0x1ac>
 8004a06:	07df      	lsls	r7, r3, #31
 8004a08:	bf44      	itt	mi
 8004a0a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a0e:	6023      	strmi	r3, [r4, #0]
 8004a10:	b91e      	cbnz	r6, 8004a1a <_printf_i+0x196>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	f023 0320 	bic.w	r3, r3, #32
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	2310      	movs	r3, #16
 8004a1c:	e7b0      	b.n	8004980 <_printf_i+0xfc>
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	f043 0320 	orr.w	r3, r3, #32
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	2378      	movs	r3, #120	; 0x78
 8004a28:	4828      	ldr	r0, [pc, #160]	; (8004acc <_printf_i+0x248>)
 8004a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a2e:	e7e3      	b.n	80049f8 <_printf_i+0x174>
 8004a30:	0659      	lsls	r1, r3, #25
 8004a32:	bf48      	it	mi
 8004a34:	b2b6      	uxthmi	r6, r6
 8004a36:	e7e6      	b.n	8004a06 <_printf_i+0x182>
 8004a38:	4615      	mov	r5, r2
 8004a3a:	e7bb      	b.n	80049b4 <_printf_i+0x130>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	6826      	ldr	r6, [r4, #0]
 8004a40:	6961      	ldr	r1, [r4, #20]
 8004a42:	1d18      	adds	r0, r3, #4
 8004a44:	6028      	str	r0, [r5, #0]
 8004a46:	0635      	lsls	r5, r6, #24
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	d501      	bpl.n	8004a50 <_printf_i+0x1cc>
 8004a4c:	6019      	str	r1, [r3, #0]
 8004a4e:	e002      	b.n	8004a56 <_printf_i+0x1d2>
 8004a50:	0670      	lsls	r0, r6, #25
 8004a52:	d5fb      	bpl.n	8004a4c <_printf_i+0x1c8>
 8004a54:	8019      	strh	r1, [r3, #0]
 8004a56:	2300      	movs	r3, #0
 8004a58:	6123      	str	r3, [r4, #16]
 8004a5a:	4615      	mov	r5, r2
 8004a5c:	e7ba      	b.n	80049d4 <_printf_i+0x150>
 8004a5e:	682b      	ldr	r3, [r5, #0]
 8004a60:	1d1a      	adds	r2, r3, #4
 8004a62:	602a      	str	r2, [r5, #0]
 8004a64:	681d      	ldr	r5, [r3, #0]
 8004a66:	6862      	ldr	r2, [r4, #4]
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	f7fb fbb0 	bl	80001d0 <memchr>
 8004a70:	b108      	cbz	r0, 8004a76 <_printf_i+0x1f2>
 8004a72:	1b40      	subs	r0, r0, r5
 8004a74:	6060      	str	r0, [r4, #4]
 8004a76:	6863      	ldr	r3, [r4, #4]
 8004a78:	6123      	str	r3, [r4, #16]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a80:	e7a8      	b.n	80049d4 <_printf_i+0x150>
 8004a82:	6923      	ldr	r3, [r4, #16]
 8004a84:	462a      	mov	r2, r5
 8004a86:	4649      	mov	r1, r9
 8004a88:	4640      	mov	r0, r8
 8004a8a:	47d0      	blx	sl
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d0ab      	beq.n	80049e8 <_printf_i+0x164>
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	079b      	lsls	r3, r3, #30
 8004a94:	d413      	bmi.n	8004abe <_printf_i+0x23a>
 8004a96:	68e0      	ldr	r0, [r4, #12]
 8004a98:	9b03      	ldr	r3, [sp, #12]
 8004a9a:	4298      	cmp	r0, r3
 8004a9c:	bfb8      	it	lt
 8004a9e:	4618      	movlt	r0, r3
 8004aa0:	e7a4      	b.n	80049ec <_printf_i+0x168>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4632      	mov	r2, r6
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	47d0      	blx	sl
 8004aac:	3001      	adds	r0, #1
 8004aae:	d09b      	beq.n	80049e8 <_printf_i+0x164>
 8004ab0:	3501      	adds	r5, #1
 8004ab2:	68e3      	ldr	r3, [r4, #12]
 8004ab4:	9903      	ldr	r1, [sp, #12]
 8004ab6:	1a5b      	subs	r3, r3, r1
 8004ab8:	42ab      	cmp	r3, r5
 8004aba:	dcf2      	bgt.n	8004aa2 <_printf_i+0x21e>
 8004abc:	e7eb      	b.n	8004a96 <_printf_i+0x212>
 8004abe:	2500      	movs	r5, #0
 8004ac0:	f104 0619 	add.w	r6, r4, #25
 8004ac4:	e7f5      	b.n	8004ab2 <_printf_i+0x22e>
 8004ac6:	bf00      	nop
 8004ac8:	08005199 	.word	0x08005199
 8004acc:	080051aa 	.word	0x080051aa

08004ad0 <_sbrk_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4d06      	ldr	r5, [pc, #24]	; (8004aec <_sbrk_r+0x1c>)
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	4604      	mov	r4, r0
 8004ad8:	4608      	mov	r0, r1
 8004ada:	602b      	str	r3, [r5, #0]
 8004adc:	f7fc fb76 	bl	80011cc <_sbrk>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_sbrk_r+0x1a>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_sbrk_r+0x1a>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	200000f4 	.word	0x200000f4

08004af0 <__sread>:
 8004af0:	b510      	push	{r4, lr}
 8004af2:	460c      	mov	r4, r1
 8004af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af8:	f000 fab2 	bl	8005060 <_read_r>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	bfab      	itete	ge
 8004b00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b02:	89a3      	ldrhlt	r3, [r4, #12]
 8004b04:	181b      	addge	r3, r3, r0
 8004b06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b0a:	bfac      	ite	ge
 8004b0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b0e:	81a3      	strhlt	r3, [r4, #12]
 8004b10:	bd10      	pop	{r4, pc}

08004b12 <__swrite>:
 8004b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b16:	461f      	mov	r7, r3
 8004b18:	898b      	ldrh	r3, [r1, #12]
 8004b1a:	05db      	lsls	r3, r3, #23
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	460c      	mov	r4, r1
 8004b20:	4616      	mov	r6, r2
 8004b22:	d505      	bpl.n	8004b30 <__swrite+0x1e>
 8004b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b28:	2302      	movs	r3, #2
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f000 f9c8 	bl	8004ec0 <_lseek_r>
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b3a:	81a3      	strh	r3, [r4, #12]
 8004b3c:	4632      	mov	r2, r6
 8004b3e:	463b      	mov	r3, r7
 8004b40:	4628      	mov	r0, r5
 8004b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b46:	f000 b869 	b.w	8004c1c <_write_r>

08004b4a <__sseek>:
 8004b4a:	b510      	push	{r4, lr}
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b52:	f000 f9b5 	bl	8004ec0 <_lseek_r>
 8004b56:	1c43      	adds	r3, r0, #1
 8004b58:	89a3      	ldrh	r3, [r4, #12]
 8004b5a:	bf15      	itete	ne
 8004b5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b66:	81a3      	strheq	r3, [r4, #12]
 8004b68:	bf18      	it	ne
 8004b6a:	81a3      	strhne	r3, [r4, #12]
 8004b6c:	bd10      	pop	{r4, pc}

08004b6e <__sclose>:
 8004b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b72:	f000 b8d3 	b.w	8004d1c <_close_r>
	...

08004b78 <__swbuf_r>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	460e      	mov	r6, r1
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	4605      	mov	r5, r0
 8004b80:	b118      	cbz	r0, 8004b8a <__swbuf_r+0x12>
 8004b82:	6983      	ldr	r3, [r0, #24]
 8004b84:	b90b      	cbnz	r3, 8004b8a <__swbuf_r+0x12>
 8004b86:	f7ff fb81 	bl	800428c <__sinit>
 8004b8a:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <__swbuf_r+0x98>)
 8004b8c:	429c      	cmp	r4, r3
 8004b8e:	d12b      	bne.n	8004be8 <__swbuf_r+0x70>
 8004b90:	686c      	ldr	r4, [r5, #4]
 8004b92:	69a3      	ldr	r3, [r4, #24]
 8004b94:	60a3      	str	r3, [r4, #8]
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	071a      	lsls	r2, r3, #28
 8004b9a:	d52f      	bpl.n	8004bfc <__swbuf_r+0x84>
 8004b9c:	6923      	ldr	r3, [r4, #16]
 8004b9e:	b36b      	cbz	r3, 8004bfc <__swbuf_r+0x84>
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	6820      	ldr	r0, [r4, #0]
 8004ba4:	1ac0      	subs	r0, r0, r3
 8004ba6:	6963      	ldr	r3, [r4, #20]
 8004ba8:	b2f6      	uxtb	r6, r6
 8004baa:	4283      	cmp	r3, r0
 8004bac:	4637      	mov	r7, r6
 8004bae:	dc04      	bgt.n	8004bba <__swbuf_r+0x42>
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 f948 	bl	8004e48 <_fflush_r>
 8004bb8:	bb30      	cbnz	r0, 8004c08 <__swbuf_r+0x90>
 8004bba:	68a3      	ldr	r3, [r4, #8]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	60a3      	str	r3, [r4, #8]
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	6022      	str	r2, [r4, #0]
 8004bc6:	701e      	strb	r6, [r3, #0]
 8004bc8:	6963      	ldr	r3, [r4, #20]
 8004bca:	3001      	adds	r0, #1
 8004bcc:	4283      	cmp	r3, r0
 8004bce:	d004      	beq.n	8004bda <__swbuf_r+0x62>
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	07db      	lsls	r3, r3, #31
 8004bd4:	d506      	bpl.n	8004be4 <__swbuf_r+0x6c>
 8004bd6:	2e0a      	cmp	r6, #10
 8004bd8:	d104      	bne.n	8004be4 <__swbuf_r+0x6c>
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f000 f933 	bl	8004e48 <_fflush_r>
 8004be2:	b988      	cbnz	r0, 8004c08 <__swbuf_r+0x90>
 8004be4:	4638      	mov	r0, r7
 8004be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004be8:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <__swbuf_r+0x9c>)
 8004bea:	429c      	cmp	r4, r3
 8004bec:	d101      	bne.n	8004bf2 <__swbuf_r+0x7a>
 8004bee:	68ac      	ldr	r4, [r5, #8]
 8004bf0:	e7cf      	b.n	8004b92 <__swbuf_r+0x1a>
 8004bf2:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <__swbuf_r+0xa0>)
 8004bf4:	429c      	cmp	r4, r3
 8004bf6:	bf08      	it	eq
 8004bf8:	68ec      	ldreq	r4, [r5, #12]
 8004bfa:	e7ca      	b.n	8004b92 <__swbuf_r+0x1a>
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	4628      	mov	r0, r5
 8004c00:	f000 f81e 	bl	8004c40 <__swsetup_r>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d0cb      	beq.n	8004ba0 <__swbuf_r+0x28>
 8004c08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004c0c:	e7ea      	b.n	8004be4 <__swbuf_r+0x6c>
 8004c0e:	bf00      	nop
 8004c10:	08005148 	.word	0x08005148
 8004c14:	08005168 	.word	0x08005168
 8004c18:	08005128 	.word	0x08005128

08004c1c <_write_r>:
 8004c1c:	b538      	push	{r3, r4, r5, lr}
 8004c1e:	4d07      	ldr	r5, [pc, #28]	; (8004c3c <_write_r+0x20>)
 8004c20:	4604      	mov	r4, r0
 8004c22:	4608      	mov	r0, r1
 8004c24:	4611      	mov	r1, r2
 8004c26:	2200      	movs	r2, #0
 8004c28:	602a      	str	r2, [r5, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f7fc fa7d 	bl	800112a <_write>
 8004c30:	1c43      	adds	r3, r0, #1
 8004c32:	d102      	bne.n	8004c3a <_write_r+0x1e>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	b103      	cbz	r3, 8004c3a <_write_r+0x1e>
 8004c38:	6023      	str	r3, [r4, #0]
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	200000f4 	.word	0x200000f4

08004c40 <__swsetup_r>:
 8004c40:	4b32      	ldr	r3, [pc, #200]	; (8004d0c <__swsetup_r+0xcc>)
 8004c42:	b570      	push	{r4, r5, r6, lr}
 8004c44:	681d      	ldr	r5, [r3, #0]
 8004c46:	4606      	mov	r6, r0
 8004c48:	460c      	mov	r4, r1
 8004c4a:	b125      	cbz	r5, 8004c56 <__swsetup_r+0x16>
 8004c4c:	69ab      	ldr	r3, [r5, #24]
 8004c4e:	b913      	cbnz	r3, 8004c56 <__swsetup_r+0x16>
 8004c50:	4628      	mov	r0, r5
 8004c52:	f7ff fb1b 	bl	800428c <__sinit>
 8004c56:	4b2e      	ldr	r3, [pc, #184]	; (8004d10 <__swsetup_r+0xd0>)
 8004c58:	429c      	cmp	r4, r3
 8004c5a:	d10f      	bne.n	8004c7c <__swsetup_r+0x3c>
 8004c5c:	686c      	ldr	r4, [r5, #4]
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c64:	0719      	lsls	r1, r3, #28
 8004c66:	d42c      	bmi.n	8004cc2 <__swsetup_r+0x82>
 8004c68:	06dd      	lsls	r5, r3, #27
 8004c6a:	d411      	bmi.n	8004c90 <__swsetup_r+0x50>
 8004c6c:	2309      	movs	r3, #9
 8004c6e:	6033      	str	r3, [r6, #0]
 8004c70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c74:	81a3      	strh	r3, [r4, #12]
 8004c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c7a:	e03e      	b.n	8004cfa <__swsetup_r+0xba>
 8004c7c:	4b25      	ldr	r3, [pc, #148]	; (8004d14 <__swsetup_r+0xd4>)
 8004c7e:	429c      	cmp	r4, r3
 8004c80:	d101      	bne.n	8004c86 <__swsetup_r+0x46>
 8004c82:	68ac      	ldr	r4, [r5, #8]
 8004c84:	e7eb      	b.n	8004c5e <__swsetup_r+0x1e>
 8004c86:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <__swsetup_r+0xd8>)
 8004c88:	429c      	cmp	r4, r3
 8004c8a:	bf08      	it	eq
 8004c8c:	68ec      	ldreq	r4, [r5, #12]
 8004c8e:	e7e6      	b.n	8004c5e <__swsetup_r+0x1e>
 8004c90:	0758      	lsls	r0, r3, #29
 8004c92:	d512      	bpl.n	8004cba <__swsetup_r+0x7a>
 8004c94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c96:	b141      	cbz	r1, 8004caa <__swsetup_r+0x6a>
 8004c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c9c:	4299      	cmp	r1, r3
 8004c9e:	d002      	beq.n	8004ca6 <__swsetup_r+0x66>
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	f000 f991 	bl	8004fc8 <_free_r>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	6363      	str	r3, [r4, #52]	; 0x34
 8004caa:	89a3      	ldrh	r3, [r4, #12]
 8004cac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004cb0:	81a3      	strh	r3, [r4, #12]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	6063      	str	r3, [r4, #4]
 8004cb6:	6923      	ldr	r3, [r4, #16]
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	89a3      	ldrh	r3, [r4, #12]
 8004cbc:	f043 0308 	orr.w	r3, r3, #8
 8004cc0:	81a3      	strh	r3, [r4, #12]
 8004cc2:	6923      	ldr	r3, [r4, #16]
 8004cc4:	b94b      	cbnz	r3, 8004cda <__swsetup_r+0x9a>
 8004cc6:	89a3      	ldrh	r3, [r4, #12]
 8004cc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cd0:	d003      	beq.n	8004cda <__swsetup_r+0x9a>
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	4630      	mov	r0, r6
 8004cd6:	f000 f92b 	bl	8004f30 <__smakebuf_r>
 8004cda:	89a0      	ldrh	r0, [r4, #12]
 8004cdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ce0:	f010 0301 	ands.w	r3, r0, #1
 8004ce4:	d00a      	beq.n	8004cfc <__swsetup_r+0xbc>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60a3      	str	r3, [r4, #8]
 8004cea:	6963      	ldr	r3, [r4, #20]
 8004cec:	425b      	negs	r3, r3
 8004cee:	61a3      	str	r3, [r4, #24]
 8004cf0:	6923      	ldr	r3, [r4, #16]
 8004cf2:	b943      	cbnz	r3, 8004d06 <__swsetup_r+0xc6>
 8004cf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004cf8:	d1ba      	bne.n	8004c70 <__swsetup_r+0x30>
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}
 8004cfc:	0781      	lsls	r1, r0, #30
 8004cfe:	bf58      	it	pl
 8004d00:	6963      	ldrpl	r3, [r4, #20]
 8004d02:	60a3      	str	r3, [r4, #8]
 8004d04:	e7f4      	b.n	8004cf0 <__swsetup_r+0xb0>
 8004d06:	2000      	movs	r0, #0
 8004d08:	e7f7      	b.n	8004cfa <__swsetup_r+0xba>
 8004d0a:	bf00      	nop
 8004d0c:	2000000c 	.word	0x2000000c
 8004d10:	08005148 	.word	0x08005148
 8004d14:	08005168 	.word	0x08005168
 8004d18:	08005128 	.word	0x08005128

08004d1c <_close_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4d06      	ldr	r5, [pc, #24]	; (8004d38 <_close_r+0x1c>)
 8004d20:	2300      	movs	r3, #0
 8004d22:	4604      	mov	r4, r0
 8004d24:	4608      	mov	r0, r1
 8004d26:	602b      	str	r3, [r5, #0]
 8004d28:	f7fc fa1b 	bl	8001162 <_close>
 8004d2c:	1c43      	adds	r3, r0, #1
 8004d2e:	d102      	bne.n	8004d36 <_close_r+0x1a>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	b103      	cbz	r3, 8004d36 <_close_r+0x1a>
 8004d34:	6023      	str	r3, [r4, #0]
 8004d36:	bd38      	pop	{r3, r4, r5, pc}
 8004d38:	200000f4 	.word	0x200000f4

08004d3c <__sflush_r>:
 8004d3c:	898a      	ldrh	r2, [r1, #12]
 8004d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d42:	4605      	mov	r5, r0
 8004d44:	0710      	lsls	r0, r2, #28
 8004d46:	460c      	mov	r4, r1
 8004d48:	d458      	bmi.n	8004dfc <__sflush_r+0xc0>
 8004d4a:	684b      	ldr	r3, [r1, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	dc05      	bgt.n	8004d5c <__sflush_r+0x20>
 8004d50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	dc02      	bgt.n	8004d5c <__sflush_r+0x20>
 8004d56:	2000      	movs	r0, #0
 8004d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d5e:	2e00      	cmp	r6, #0
 8004d60:	d0f9      	beq.n	8004d56 <__sflush_r+0x1a>
 8004d62:	2300      	movs	r3, #0
 8004d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d68:	682f      	ldr	r7, [r5, #0]
 8004d6a:	602b      	str	r3, [r5, #0]
 8004d6c:	d032      	beq.n	8004dd4 <__sflush_r+0x98>
 8004d6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d70:	89a3      	ldrh	r3, [r4, #12]
 8004d72:	075a      	lsls	r2, r3, #29
 8004d74:	d505      	bpl.n	8004d82 <__sflush_r+0x46>
 8004d76:	6863      	ldr	r3, [r4, #4]
 8004d78:	1ac0      	subs	r0, r0, r3
 8004d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d7c:	b10b      	cbz	r3, 8004d82 <__sflush_r+0x46>
 8004d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d80:	1ac0      	subs	r0, r0, r3
 8004d82:	2300      	movs	r3, #0
 8004d84:	4602      	mov	r2, r0
 8004d86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d88:	6a21      	ldr	r1, [r4, #32]
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	47b0      	blx	r6
 8004d8e:	1c43      	adds	r3, r0, #1
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	d106      	bne.n	8004da2 <__sflush_r+0x66>
 8004d94:	6829      	ldr	r1, [r5, #0]
 8004d96:	291d      	cmp	r1, #29
 8004d98:	d82c      	bhi.n	8004df4 <__sflush_r+0xb8>
 8004d9a:	4a2a      	ldr	r2, [pc, #168]	; (8004e44 <__sflush_r+0x108>)
 8004d9c:	40ca      	lsrs	r2, r1
 8004d9e:	07d6      	lsls	r6, r2, #31
 8004da0:	d528      	bpl.n	8004df4 <__sflush_r+0xb8>
 8004da2:	2200      	movs	r2, #0
 8004da4:	6062      	str	r2, [r4, #4]
 8004da6:	04d9      	lsls	r1, r3, #19
 8004da8:	6922      	ldr	r2, [r4, #16]
 8004daa:	6022      	str	r2, [r4, #0]
 8004dac:	d504      	bpl.n	8004db8 <__sflush_r+0x7c>
 8004dae:	1c42      	adds	r2, r0, #1
 8004db0:	d101      	bne.n	8004db6 <__sflush_r+0x7a>
 8004db2:	682b      	ldr	r3, [r5, #0]
 8004db4:	b903      	cbnz	r3, 8004db8 <__sflush_r+0x7c>
 8004db6:	6560      	str	r0, [r4, #84]	; 0x54
 8004db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dba:	602f      	str	r7, [r5, #0]
 8004dbc:	2900      	cmp	r1, #0
 8004dbe:	d0ca      	beq.n	8004d56 <__sflush_r+0x1a>
 8004dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dc4:	4299      	cmp	r1, r3
 8004dc6:	d002      	beq.n	8004dce <__sflush_r+0x92>
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f000 f8fd 	bl	8004fc8 <_free_r>
 8004dce:	2000      	movs	r0, #0
 8004dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8004dd2:	e7c1      	b.n	8004d58 <__sflush_r+0x1c>
 8004dd4:	6a21      	ldr	r1, [r4, #32]
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4628      	mov	r0, r5
 8004dda:	47b0      	blx	r6
 8004ddc:	1c41      	adds	r1, r0, #1
 8004dde:	d1c7      	bne.n	8004d70 <__sflush_r+0x34>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d0c4      	beq.n	8004d70 <__sflush_r+0x34>
 8004de6:	2b1d      	cmp	r3, #29
 8004de8:	d001      	beq.n	8004dee <__sflush_r+0xb2>
 8004dea:	2b16      	cmp	r3, #22
 8004dec:	d101      	bne.n	8004df2 <__sflush_r+0xb6>
 8004dee:	602f      	str	r7, [r5, #0]
 8004df0:	e7b1      	b.n	8004d56 <__sflush_r+0x1a>
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004df8:	81a3      	strh	r3, [r4, #12]
 8004dfa:	e7ad      	b.n	8004d58 <__sflush_r+0x1c>
 8004dfc:	690f      	ldr	r7, [r1, #16]
 8004dfe:	2f00      	cmp	r7, #0
 8004e00:	d0a9      	beq.n	8004d56 <__sflush_r+0x1a>
 8004e02:	0793      	lsls	r3, r2, #30
 8004e04:	680e      	ldr	r6, [r1, #0]
 8004e06:	bf08      	it	eq
 8004e08:	694b      	ldreq	r3, [r1, #20]
 8004e0a:	600f      	str	r7, [r1, #0]
 8004e0c:	bf18      	it	ne
 8004e0e:	2300      	movne	r3, #0
 8004e10:	eba6 0807 	sub.w	r8, r6, r7
 8004e14:	608b      	str	r3, [r1, #8]
 8004e16:	f1b8 0f00 	cmp.w	r8, #0
 8004e1a:	dd9c      	ble.n	8004d56 <__sflush_r+0x1a>
 8004e1c:	6a21      	ldr	r1, [r4, #32]
 8004e1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e20:	4643      	mov	r3, r8
 8004e22:	463a      	mov	r2, r7
 8004e24:	4628      	mov	r0, r5
 8004e26:	47b0      	blx	r6
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	dc06      	bgt.n	8004e3a <__sflush_r+0xfe>
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e32:	81a3      	strh	r3, [r4, #12]
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e38:	e78e      	b.n	8004d58 <__sflush_r+0x1c>
 8004e3a:	4407      	add	r7, r0
 8004e3c:	eba8 0800 	sub.w	r8, r8, r0
 8004e40:	e7e9      	b.n	8004e16 <__sflush_r+0xda>
 8004e42:	bf00      	nop
 8004e44:	20400001 	.word	0x20400001

08004e48 <_fflush_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	690b      	ldr	r3, [r1, #16]
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	460c      	mov	r4, r1
 8004e50:	b913      	cbnz	r3, 8004e58 <_fflush_r+0x10>
 8004e52:	2500      	movs	r5, #0
 8004e54:	4628      	mov	r0, r5
 8004e56:	bd38      	pop	{r3, r4, r5, pc}
 8004e58:	b118      	cbz	r0, 8004e62 <_fflush_r+0x1a>
 8004e5a:	6983      	ldr	r3, [r0, #24]
 8004e5c:	b90b      	cbnz	r3, 8004e62 <_fflush_r+0x1a>
 8004e5e:	f7ff fa15 	bl	800428c <__sinit>
 8004e62:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <_fflush_r+0x6c>)
 8004e64:	429c      	cmp	r4, r3
 8004e66:	d11b      	bne.n	8004ea0 <_fflush_r+0x58>
 8004e68:	686c      	ldr	r4, [r5, #4]
 8004e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d0ef      	beq.n	8004e52 <_fflush_r+0xa>
 8004e72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e74:	07d0      	lsls	r0, r2, #31
 8004e76:	d404      	bmi.n	8004e82 <_fflush_r+0x3a>
 8004e78:	0599      	lsls	r1, r3, #22
 8004e7a:	d402      	bmi.n	8004e82 <_fflush_r+0x3a>
 8004e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e7e:	f7ff faa3 	bl	80043c8 <__retarget_lock_acquire_recursive>
 8004e82:	4628      	mov	r0, r5
 8004e84:	4621      	mov	r1, r4
 8004e86:	f7ff ff59 	bl	8004d3c <__sflush_r>
 8004e8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e8c:	07da      	lsls	r2, r3, #31
 8004e8e:	4605      	mov	r5, r0
 8004e90:	d4e0      	bmi.n	8004e54 <_fflush_r+0xc>
 8004e92:	89a3      	ldrh	r3, [r4, #12]
 8004e94:	059b      	lsls	r3, r3, #22
 8004e96:	d4dd      	bmi.n	8004e54 <_fflush_r+0xc>
 8004e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e9a:	f7ff fa96 	bl	80043ca <__retarget_lock_release_recursive>
 8004e9e:	e7d9      	b.n	8004e54 <_fflush_r+0xc>
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <_fflush_r+0x70>)
 8004ea2:	429c      	cmp	r4, r3
 8004ea4:	d101      	bne.n	8004eaa <_fflush_r+0x62>
 8004ea6:	68ac      	ldr	r4, [r5, #8]
 8004ea8:	e7df      	b.n	8004e6a <_fflush_r+0x22>
 8004eaa:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <_fflush_r+0x74>)
 8004eac:	429c      	cmp	r4, r3
 8004eae:	bf08      	it	eq
 8004eb0:	68ec      	ldreq	r4, [r5, #12]
 8004eb2:	e7da      	b.n	8004e6a <_fflush_r+0x22>
 8004eb4:	08005148 	.word	0x08005148
 8004eb8:	08005168 	.word	0x08005168
 8004ebc:	08005128 	.word	0x08005128

08004ec0 <_lseek_r>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4d07      	ldr	r5, [pc, #28]	; (8004ee0 <_lseek_r+0x20>)
 8004ec4:	4604      	mov	r4, r0
 8004ec6:	4608      	mov	r0, r1
 8004ec8:	4611      	mov	r1, r2
 8004eca:	2200      	movs	r2, #0
 8004ecc:	602a      	str	r2, [r5, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f7fc f96e 	bl	80011b0 <_lseek>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	d102      	bne.n	8004ede <_lseek_r+0x1e>
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	b103      	cbz	r3, 8004ede <_lseek_r+0x1e>
 8004edc:	6023      	str	r3, [r4, #0]
 8004ede:	bd38      	pop	{r3, r4, r5, pc}
 8004ee0:	200000f4 	.word	0x200000f4

08004ee4 <__swhatbuf_r>:
 8004ee4:	b570      	push	{r4, r5, r6, lr}
 8004ee6:	460e      	mov	r6, r1
 8004ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eec:	2900      	cmp	r1, #0
 8004eee:	b096      	sub	sp, #88	; 0x58
 8004ef0:	4614      	mov	r4, r2
 8004ef2:	461d      	mov	r5, r3
 8004ef4:	da08      	bge.n	8004f08 <__swhatbuf_r+0x24>
 8004ef6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	602a      	str	r2, [r5, #0]
 8004efe:	061a      	lsls	r2, r3, #24
 8004f00:	d410      	bmi.n	8004f24 <__swhatbuf_r+0x40>
 8004f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f06:	e00e      	b.n	8004f26 <__swhatbuf_r+0x42>
 8004f08:	466a      	mov	r2, sp
 8004f0a:	f000 f8bb 	bl	8005084 <_fstat_r>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	dbf1      	blt.n	8004ef6 <__swhatbuf_r+0x12>
 8004f12:	9a01      	ldr	r2, [sp, #4]
 8004f14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f1c:	425a      	negs	r2, r3
 8004f1e:	415a      	adcs	r2, r3
 8004f20:	602a      	str	r2, [r5, #0]
 8004f22:	e7ee      	b.n	8004f02 <__swhatbuf_r+0x1e>
 8004f24:	2340      	movs	r3, #64	; 0x40
 8004f26:	2000      	movs	r0, #0
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	b016      	add	sp, #88	; 0x58
 8004f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f30 <__smakebuf_r>:
 8004f30:	898b      	ldrh	r3, [r1, #12]
 8004f32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f34:	079d      	lsls	r5, r3, #30
 8004f36:	4606      	mov	r6, r0
 8004f38:	460c      	mov	r4, r1
 8004f3a:	d507      	bpl.n	8004f4c <__smakebuf_r+0x1c>
 8004f3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	6123      	str	r3, [r4, #16]
 8004f44:	2301      	movs	r3, #1
 8004f46:	6163      	str	r3, [r4, #20]
 8004f48:	b002      	add	sp, #8
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	ab01      	add	r3, sp, #4
 8004f4e:	466a      	mov	r2, sp
 8004f50:	f7ff ffc8 	bl	8004ee4 <__swhatbuf_r>
 8004f54:	9900      	ldr	r1, [sp, #0]
 8004f56:	4605      	mov	r5, r0
 8004f58:	4630      	mov	r0, r6
 8004f5a:	f7ff fa57 	bl	800440c <_malloc_r>
 8004f5e:	b948      	cbnz	r0, 8004f74 <__smakebuf_r+0x44>
 8004f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f64:	059a      	lsls	r2, r3, #22
 8004f66:	d4ef      	bmi.n	8004f48 <__smakebuf_r+0x18>
 8004f68:	f023 0303 	bic.w	r3, r3, #3
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	81a3      	strh	r3, [r4, #12]
 8004f72:	e7e3      	b.n	8004f3c <__smakebuf_r+0xc>
 8004f74:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <__smakebuf_r+0x7c>)
 8004f76:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	6020      	str	r0, [r4, #0]
 8004f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f80:	81a3      	strh	r3, [r4, #12]
 8004f82:	9b00      	ldr	r3, [sp, #0]
 8004f84:	6163      	str	r3, [r4, #20]
 8004f86:	9b01      	ldr	r3, [sp, #4]
 8004f88:	6120      	str	r0, [r4, #16]
 8004f8a:	b15b      	cbz	r3, 8004fa4 <__smakebuf_r+0x74>
 8004f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f90:	4630      	mov	r0, r6
 8004f92:	f000 f889 	bl	80050a8 <_isatty_r>
 8004f96:	b128      	cbz	r0, 8004fa4 <__smakebuf_r+0x74>
 8004f98:	89a3      	ldrh	r3, [r4, #12]
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	f043 0301 	orr.w	r3, r3, #1
 8004fa2:	81a3      	strh	r3, [r4, #12]
 8004fa4:	89a0      	ldrh	r0, [r4, #12]
 8004fa6:	4305      	orrs	r5, r0
 8004fa8:	81a5      	strh	r5, [r4, #12]
 8004faa:	e7cd      	b.n	8004f48 <__smakebuf_r+0x18>
 8004fac:	08004225 	.word	0x08004225

08004fb0 <__malloc_lock>:
 8004fb0:	4801      	ldr	r0, [pc, #4]	; (8004fb8 <__malloc_lock+0x8>)
 8004fb2:	f7ff ba09 	b.w	80043c8 <__retarget_lock_acquire_recursive>
 8004fb6:	bf00      	nop
 8004fb8:	200000e8 	.word	0x200000e8

08004fbc <__malloc_unlock>:
 8004fbc:	4801      	ldr	r0, [pc, #4]	; (8004fc4 <__malloc_unlock+0x8>)
 8004fbe:	f7ff ba04 	b.w	80043ca <__retarget_lock_release_recursive>
 8004fc2:	bf00      	nop
 8004fc4:	200000e8 	.word	0x200000e8

08004fc8 <_free_r>:
 8004fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fca:	2900      	cmp	r1, #0
 8004fcc:	d044      	beq.n	8005058 <_free_r+0x90>
 8004fce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fd2:	9001      	str	r0, [sp, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f1a1 0404 	sub.w	r4, r1, #4
 8004fda:	bfb8      	it	lt
 8004fdc:	18e4      	addlt	r4, r4, r3
 8004fde:	f7ff ffe7 	bl	8004fb0 <__malloc_lock>
 8004fe2:	4a1e      	ldr	r2, [pc, #120]	; (800505c <_free_r+0x94>)
 8004fe4:	9801      	ldr	r0, [sp, #4]
 8004fe6:	6813      	ldr	r3, [r2, #0]
 8004fe8:	b933      	cbnz	r3, 8004ff8 <_free_r+0x30>
 8004fea:	6063      	str	r3, [r4, #4]
 8004fec:	6014      	str	r4, [r2, #0]
 8004fee:	b003      	add	sp, #12
 8004ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ff4:	f7ff bfe2 	b.w	8004fbc <__malloc_unlock>
 8004ff8:	42a3      	cmp	r3, r4
 8004ffa:	d908      	bls.n	800500e <_free_r+0x46>
 8004ffc:	6825      	ldr	r5, [r4, #0]
 8004ffe:	1961      	adds	r1, r4, r5
 8005000:	428b      	cmp	r3, r1
 8005002:	bf01      	itttt	eq
 8005004:	6819      	ldreq	r1, [r3, #0]
 8005006:	685b      	ldreq	r3, [r3, #4]
 8005008:	1949      	addeq	r1, r1, r5
 800500a:	6021      	streq	r1, [r4, #0]
 800500c:	e7ed      	b.n	8004fea <_free_r+0x22>
 800500e:	461a      	mov	r2, r3
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	b10b      	cbz	r3, 8005018 <_free_r+0x50>
 8005014:	42a3      	cmp	r3, r4
 8005016:	d9fa      	bls.n	800500e <_free_r+0x46>
 8005018:	6811      	ldr	r1, [r2, #0]
 800501a:	1855      	adds	r5, r2, r1
 800501c:	42a5      	cmp	r5, r4
 800501e:	d10b      	bne.n	8005038 <_free_r+0x70>
 8005020:	6824      	ldr	r4, [r4, #0]
 8005022:	4421      	add	r1, r4
 8005024:	1854      	adds	r4, r2, r1
 8005026:	42a3      	cmp	r3, r4
 8005028:	6011      	str	r1, [r2, #0]
 800502a:	d1e0      	bne.n	8004fee <_free_r+0x26>
 800502c:	681c      	ldr	r4, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	6053      	str	r3, [r2, #4]
 8005032:	4421      	add	r1, r4
 8005034:	6011      	str	r1, [r2, #0]
 8005036:	e7da      	b.n	8004fee <_free_r+0x26>
 8005038:	d902      	bls.n	8005040 <_free_r+0x78>
 800503a:	230c      	movs	r3, #12
 800503c:	6003      	str	r3, [r0, #0]
 800503e:	e7d6      	b.n	8004fee <_free_r+0x26>
 8005040:	6825      	ldr	r5, [r4, #0]
 8005042:	1961      	adds	r1, r4, r5
 8005044:	428b      	cmp	r3, r1
 8005046:	bf04      	itt	eq
 8005048:	6819      	ldreq	r1, [r3, #0]
 800504a:	685b      	ldreq	r3, [r3, #4]
 800504c:	6063      	str	r3, [r4, #4]
 800504e:	bf04      	itt	eq
 8005050:	1949      	addeq	r1, r1, r5
 8005052:	6021      	streq	r1, [r4, #0]
 8005054:	6054      	str	r4, [r2, #4]
 8005056:	e7ca      	b.n	8004fee <_free_r+0x26>
 8005058:	b003      	add	sp, #12
 800505a:	bd30      	pop	{r4, r5, pc}
 800505c:	200000ec 	.word	0x200000ec

08005060 <_read_r>:
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	4d07      	ldr	r5, [pc, #28]	; (8005080 <_read_r+0x20>)
 8005064:	4604      	mov	r4, r0
 8005066:	4608      	mov	r0, r1
 8005068:	4611      	mov	r1, r2
 800506a:	2200      	movs	r2, #0
 800506c:	602a      	str	r2, [r5, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	f7fc f83e 	bl	80010f0 <_read>
 8005074:	1c43      	adds	r3, r0, #1
 8005076:	d102      	bne.n	800507e <_read_r+0x1e>
 8005078:	682b      	ldr	r3, [r5, #0]
 800507a:	b103      	cbz	r3, 800507e <_read_r+0x1e>
 800507c:	6023      	str	r3, [r4, #0]
 800507e:	bd38      	pop	{r3, r4, r5, pc}
 8005080:	200000f4 	.word	0x200000f4

08005084 <_fstat_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	4d07      	ldr	r5, [pc, #28]	; (80050a4 <_fstat_r+0x20>)
 8005088:	2300      	movs	r3, #0
 800508a:	4604      	mov	r4, r0
 800508c:	4608      	mov	r0, r1
 800508e:	4611      	mov	r1, r2
 8005090:	602b      	str	r3, [r5, #0]
 8005092:	f7fc f872 	bl	800117a <_fstat>
 8005096:	1c43      	adds	r3, r0, #1
 8005098:	d102      	bne.n	80050a0 <_fstat_r+0x1c>
 800509a:	682b      	ldr	r3, [r5, #0]
 800509c:	b103      	cbz	r3, 80050a0 <_fstat_r+0x1c>
 800509e:	6023      	str	r3, [r4, #0]
 80050a0:	bd38      	pop	{r3, r4, r5, pc}
 80050a2:	bf00      	nop
 80050a4:	200000f4 	.word	0x200000f4

080050a8 <_isatty_r>:
 80050a8:	b538      	push	{r3, r4, r5, lr}
 80050aa:	4d06      	ldr	r5, [pc, #24]	; (80050c4 <_isatty_r+0x1c>)
 80050ac:	2300      	movs	r3, #0
 80050ae:	4604      	mov	r4, r0
 80050b0:	4608      	mov	r0, r1
 80050b2:	602b      	str	r3, [r5, #0]
 80050b4:	f7fc f871 	bl	800119a <_isatty>
 80050b8:	1c43      	adds	r3, r0, #1
 80050ba:	d102      	bne.n	80050c2 <_isatty_r+0x1a>
 80050bc:	682b      	ldr	r3, [r5, #0]
 80050be:	b103      	cbz	r3, 80050c2 <_isatty_r+0x1a>
 80050c0:	6023      	str	r3, [r4, #0]
 80050c2:	bd38      	pop	{r3, r4, r5, pc}
 80050c4:	200000f4 	.word	0x200000f4

080050c8 <_init>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	bf00      	nop
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr

080050d4 <_fini>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	bf00      	nop
 80050d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050da:	bc08      	pop	{r3}
 80050dc:	469e      	mov	lr, r3
 80050de:	4770      	bx	lr
